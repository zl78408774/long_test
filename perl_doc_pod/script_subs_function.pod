=head1 NAME

subs_adaptiveframealignment


=head1 DESCRIPTION

Document number: 121/190 55-CAH 161 1607/1
MODULE      : subs_adaptiveframealignment.pm
DESCRIPTION : This program specifies Test Case for:  04.01
             use -init to initiate subinit file
COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE      NAME              REVIEW          COMMENT
A     20101011  XDAVMEL           XWIKMAR         File created. Approved UABTOH.
B     20101213  XMABENT           XTOBSEM         Added GetFreqBand and GetTAValueMSSIM, modified ChActBts with TA input.
                                                  Update SetAttrMSSIM added ClearBufferMSSIM
                                                  Added GetARFCN, RestoreARFCN and SetArfcnMSSIM
PC1   20110513  XMABENT           XDAVMEL         Added ConvertTAValue, GetMeasurementReport,
                                                  Updated SetArfcn
PC2   20111215  XTOBSEM           XDAVMEL         Updated GetMeasurementReport (HO16002)
PC3   20120228  XNAVNAS           XSOFFRO         Ran PerlCritic, updated to latest template (HP65006)


=head1 REQUIRES

L<Hash::Util> 

L<Carp> 

L<mssim_sub> 

L<mssim> 

L<mssim_def()> 

L<dbLog> 

L<subinit_adaptiveframealignment> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 ChActBTS

 ChActBTS();

Subroutine: ChActBTS
Purpose:    To activate a channel in the BTS, uses par hash variables
Input:      $BTS (Abisco connection parameter)
Output:     None


=head2 ChActMSSIM

 ChActMSSIM();

Subroutine: ChActMSSIM
Purpose:    To activate a channel in the MSSIM, sets the CcId package variable
Input:      $Bypass  (set to '1' to bypass MSSIM automatic LAPDm handling)
Output:     $CcId


=head2 ChCleanBTS

 ChCleanBTS();

Subroutine: ChCleanBTS
Purpose:    To release all radio traffic channels or control channels in the BTS
             without asserting the responses
Input:      $BTS (Abisco connection parameter),
             $RelType (Use 'Traffic' for traffic channels and 'Control' for control channels
Output:     None


=head2 ChRelBTS

 ChRelBTS();

Subroutine: ChRelBTS
Purpose:    To release radio traffic channels or control channels in the BTS
Input:      $BTS (Abisco connection parameter)
            $TG,
            $TRXC,
            $TS,
            $ChType
Output:     None


=head2 ChRelMSSIM

 ChRelMSSIM();

Subroutine: ChRelMSSIM
Purpose:    To release a channel in the MSSIM, uses the package variable CcId to
             identify the opened channel
Input:      None
Output:     None


=head2 ChannelRequestTA

 ChannelRequestTA();

Subroutine: ChannelRequestTA
Purpose:    request TA-value,  Observe that 3 processes must be turned off on the TSS, rr_Main_tpr...
Input:      None
Output:     TA-value


=head2 CheckBCCHConfig

 CheckBCCHConfig();

Subroutine:  CheckBCCHConfig
Purpose:    To verify and set correct BCCHType for active sub test case, calls a restart of BTS
        if changed.
Input:      $BTS (Abisco connection parameter)
Output:


=head2 ConvertTAValue

 ConvertTAValue();

Subroutine: ConvertTAValue
Purpose:    To convert TA values from/to decimal to MSSIM format
Input:      Value (Value to be converted),
Output:     Converted value

Comments:   We support setting the TaAb and TaNb fields with 1/8th of a symbol.
            The TaAb and TaNb fields are unsigned shorts (16 bits) where the upper byte contains
            the high-precision part (1/8th of a symbol) and the lower byte is the low-precision part
            in steps of symbols.
            Thus, to set a ta of 1/8 you would write 1 << 8 = 256, to set it to 2/8 you write 2<<8 = 512 etc.
            To set it to 1 symbol + 2/8 you write: 2<<8 + 1 = 513 etc.


=head2 GetActiveCell

 GetActiveCell();

=head2 GetFreqBand

 GetFreqBand();

Get the frequency band


=head2 GetMeasurementReport

 GetMeasurementReport();

Subroutine: GetMeasurementResult
Purpose:  Receive MeasurmentResult on Abis and return timing advance number


Input:    Timout              Timeout, Default is 1 second
          Expect              Part of MeasurementResult wanted
          Tries               Number of messages to search through

Output:   MeasurementResult   Message sent on Abis
                              -1 is Returned if no MeasurementResult was found



=head2 GetTAValueMSSIM

 GetTAValueMSSIM();

Get current TA Value from the MSSIM


=head2 RestartBTS

 RestartBTS();

Subroutine:  RestartBTS
Purpose:    Restarting the BTS, make sure that the parameters set during restart
             complies with your specific TC
Input:      $BTS (Abisco connection parameter)
Output:


=head2 RestoreARFCN

 RestoreARFCN();

Restore ARFCN Value to cell
Input: BCCHno and ARFCNList


=head2 SetArfcn

 SetArfcn();

Subroutine: SetArfcn
Purpose:    To set the correct ARFCN according to TS
Input:      $BTS
Output:     $TestBand The current BTS under test
            'No error' or 'error'
            'No restart' or 'Restart'   sent back if a restart is necessary to make changes effective


=head2 SetArfcnMSSIM

 SetArfcnMSSIM();

Set ARFCN Value to MSSIM
Input: ARFCN number


=head2 SetAttrMSSIM

 SetAttrMSSIM();

Subroutine: SetAttrMSSIM
Purpose:
Input:
Output:


=head2 resetMSSIM

 resetMSSIM();

Subroutine: resetMSSIM
Purpose: Resets MSSIM
Input: None
Output: None



=cut

=head1 NAME

Subs_ATraSup


=head1 DESCRIPTION

Document number : 192/190 55-CAH 161 1607/1 Uen
MODULE          : subs_atrasup.abi
DESCRIPTION     : This file specifies subroutines for 2259 scripts
                  Abis Transmission and Supervision

COPYRIGHT © : ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV DATE      NAME      REVIEW    COMMENT
A   20110531  XLOHFOO   XDAVMEL   Added ActivateCSData,ChActSecChMulti,
                                   ChModeModify,CorruptDLDataFrames,
                                   DecactivateCSData, FindMsgInLog,
                                   HexToBinary
B   20120222  XTOBSEM   XLEIMAR   Added support of changeing $BTS in ReceiveAbiscoMessage
C   20120906  XAMMELY   EERICSV   Clean up, Dynamic TG, Perlcritic, Script template, Added
                                  AdjustTG, SetTG and CompleteStartRBS. According TR: HP65004.
                                  Updated CorruptedDLFrames and CorruptedDLDataFrames
PD1 20120912  XYNSTAN             Added TSConfigRequest, similar to DoTSConfigRequest but
                                                          and no Disable/Enable Request
PD2 20121109  XHENRMA   XMAREDV   Updated the following functions to use locked_key rather than if exists
								RadioChRel, ChActImmediateAssignBTS,
								ChActNormalAssignBTS , ChActMSSIM,
								ChRelMSSIM, SetSpeechLoopback,
								ReceiveAbiscoMessage, TSConfigRequest
								ChModeModify. Added some assertions where needed.


=head1 REQUIRES

L<mssim_def()> 

L<Abisco_Connection> 

L<PerlFunc> 

L<Hash::Util> 

L<AbiscoFunc2> 

L<English> 

L<Carp> 

L<dbLog> 

L<mssim_sub> 

L<mssim> 

L<SubInit_ATraSup> 

L<diagnostics> 


=head1 METHODS

=head2 ActivateCSData

 ActivateCSData();

SUBROUTINE  : ActivateCSData
DESCRIPTION : Activate data on an activated channel

IN  :       1) TG           * Default parameters were given to the Input variable
            2) TRXC           so Input variable is vary based on Test Case
            3) DBRate
            4) DataGenMode
            5) DTX
            6) LoopDelay
OUT :       NONE


=head2 ActivateSpeech

 ActivateSpeech();

SUBROUTINE  : ActivateSpeech
DESCRIPTION :    Activate speech on an activated channel

IN  :
OUT :  NONE


=head2 AdjustTG

 AdjustTG();

SUBROUTINE  : AdjustTG
DESCRIPTION : To set TCM configuration. Disconnects, updates and reconnects TG.
              May Restart BTS if AbisMode or TLS settings is changed

IN  :    TCH_Configuration
OUT :    None


=head2 ChActImmediateAssignBTS

 ChActImmediateAssignBTS();

SUBROUTINE  : ChActImmediateAssignBTS
DESCRIPTION : Activate a channel in the BTS

IN  :    Hash with following keys: TG, TRXC, TS, ChType, TypeOfCh, ChRate, AlgOrRate
OUT :    Response message


=head2 ChActMSSIM

 ChActMSSIM();

SUBROUTINE  : ChActMSSIM
DESCRIPTION : To activate a channel in the MSSIM

IN  :    Hash containing the following key(s):
              AMRCodec    -   AMR Codec
              ChRate      -   Channel rate
              TG          -   TG number
              TRXC        -   TRXC
              TS          -   Timeslot number
              ChType      -   Channel Type
              TypeOfCh    -   Type of Channel
              AlgOrRate   -   GSM algorithm or Rate
              Bypass      -   Bypass flag
              Ref         -   Ref
              AllSacchSI  -   Indicator if all SACCH messages should be recieved
                              or just changes
              MsId        -   MSSSim ID
              Timeout     -   Timeout

OUT :    CcId


=head2 ChActNormalAssignBTS

 ChActNormalAssignBTS();

SUBROUTINE  : ChActNormalAssignBTS
DESCRIPTION : Activate a channel in the BTS

IN  :    Hash with following keys: TG, TRXC, TS, ChType, TypeOfCh, ChRate, AlgOrRate
OUT :    Response message


=head2 ChActSecChMulti

 ChActSecChMulti();

SUBROUTINE  : ChActSecChMulti
DESCRIPTION : Activate a channel in the BTS

IN  : Hash with following keys: TG, TRXC, TS, ChType, TypeOfCh, ChRate, AlgOrRate
OUT : Response message


=head2 ChModeModify

 ChModeModify();

SUBROUTINE  : ChModeModify
DESCRIPTION : Change mode structure such as Speech, Data and Signalling

IN  : Hash with following keys: TG, TRXC, TS, ChType, TypeOfCh, ChRate, AlgOrRate
OUT : Response message


=head2 ChRelMSSIM

 ChRelMSSIM();

SUBROUTINE  : ChRelMSSIM
DESCRIPTION : To release a channel in the MSSIM

IN  :    CcId         - CcId of channel to close
OUT :    None


=head2 ClearMSSIMBuffer

 ClearMSSIMBuffer();

SUBROUTINE  : ClearMSSIMBuffer
DESCRIPTION : Clearing MSSIM message buffer

IN  :    None
OUT :    None


=head2 CompleteStartRBS

 CompleteStartRBS();

SUBROUTINE  : CompleteStartRBS
DESCRIPTION : Runs a complete startup of the RBS.

IN  :      Hash containing complete start specific data
            - Receive   -> 'YES' || 'NO'
                      If the answer of the complete start is required
            - TG
            - BTS
            - TLSI    ->'OFF' || 'ON'
                      TLS on Idle channel
            - TLSA    ->'OFF' || 'ON'
                      TLS on Active channel
            - TLSFilteringTime    -> 10 .. 100
                      The range for TLS filtering time is 1 to 10 seconds
OUT :      $Ret    -> 1 || 0
                      Indicates the succession of the complete startup


=head2 CorruptDLDataFrames

 CorruptDLDataFrames();

SUBROUTINE  : CorruptDLDataFrames
DESCRIPTION : Start or stop corrupting DL CS Data frames with bit errors

IN  :    Mode      => 'ON' or 'OFF'
            TimeToRun => Time to run in seconds. Will resend Update Command
                         every fourth second so that corrupted frames are sent
                         for at least this specified time
                         '1' (or undefined) will send command once
            AndMask   => [xxx]
            XorMask   => [xxx]
            OrMask    => [xxx]
            BTS
OUT :    Error        1 if Error
                      0 if no Error


=head2 CorruptDLFrames

 CorruptDLFrames();

SUBROUTINE  : CorruptDLFrames
DESCRIPTION : Start or stop corrupting DL speech frames with bit errors

IN  :    Mode      => 'ON' or 'OFF'
            TimeToRun => Time to run in seconds. Will resend Update Command
                         every fourth second so that corrupted frames are sent
                         for at least this specified time
                         '1' (or undefined) will send command once
OUT :    Error        1 if Error
                         0 if no Error


=head2 DeactivatePayload

 DeactivatePayload();

SUBROUTINE  : DectivateSpeech
DESCRIPTION :    Deactivate speech

IN  :
OUT :  NONE


=head2 DelayDLFrames

 DelayDLFrames();

SUBROUTINE  : DelayDLFrames
DESCRIPTION : Delaying DL frames more than configured jitter buffer size or
            stopping delay.

IN  :    TG           - TG number
            SettingsFile - Lanforge settings file
            Mode         - 'ON' or 'OFF'
OUT :    Error        - This key is set with an error msg if an error occured


=head2 DoTSConfigRequest

 DoTSConfigRequest();

SUBROUTINE  : DoTSConfigRequest
DESCRIPTION : Do a TSConfigRequest to set TLS settings, Receiver Diversity etc
            Note: Only Comb TCH implemented
            Changing TLS filtering time does not work
            Notes :JitterSize and PackingAlgorithm only enable for SC (updated by LF -24 May 2011)
IN  :    1)TS
            2)ReceiverDiversity
            3)ExtendedRange
            4)TLSA
            5)TLSI
            6)TLSFilteringTime
OUT :


=head2 FindMsgInLog

 FindMsgInLog();

SUBROUTINE  : FindMsgInLog
DESCRIPTION : To find a message in log

IN  :
OUT : Array


=head2 GetTG

 GetTG();

SUBROUTINE  : GetTG
DESCRIPTION : Store TG parameters. This subroutin shall be followed by SetTG
              (copied from subs_Broadcast)

IN  :
OUT :     {Cell}, {TG}, {MCTR};
Sample:   %StoredTG = GetTG();


=head2 HexToBinary

 HexToBinary();

SUBROUTINE  : HexToBinary
DESCRIPTION : To Convert a Hex value to Bin

IN  :    Hex
OUT :    Bin


=head2 RadioChRel

 RadioChRel();

SUBROUTINE  : RadioChRel
DESCRIPTION : Release all channels

Input:
Output:


=head2 ReceiveAbiscoMessage

 ReceiveAbiscoMessage();

SUBROUTINE  : ReceiveAbiscoMessage
DESCRIPTION : Receiving Abisco messages
IN  :    Expect (message wanted)
            Server (server for expected message)
            CauseValue (Only applicable for ConnectionFailureIndication)
            Fault (Only applicable for FaultReport)
            ChType (Bm/Bm_1)
            Timeout [s]
OUT :    'Found'         - if expected message found
            [Error Cause]   - if message not found


=head2 SetSpeechLoopback

 SetSpeechLoopback();

SUBROUTINE  : SetSpeechLoopback
DESCRIPTION : Start or stop the Speech loopback functionality

IN  :    Mode: 'ON' or 'OFF'
            CcId
            LoopCcId
            Timeout
OUT :    Respons message


=head2 SetTG

 SetTG();

SUBROUTINE  : SetTG
DESCRIPTION : Resets the TG to the one stored in Stored TG
              (copied from subs_Broadcast)

IN  :     Cell, TG, MCTR
OUT :     Will die if errors found
Sample:   SetTG(%StoredTG);


=head2 TSConfigRequest

 TSConfigRequest();

SUBROUTINE  : TSConfigRequest
DESCRIPTION : Do a TSConfigRequest to set TLS settings, Receiver Diversity etc
            Note: Only Comb TCH implemented
            Notes :JitterSize and PackingAlgorithm only enable for SC
IN  :    1)TS
            2)ReceiverDiversity
            3)ExtendedRange
            4)TLSA
            5)TLSI
            6)TLSFilteringTime
            7)SUBTC number
OUT : none



=cut

=head1 NAME

Subs_AuxEq


=head1 DESCRIPTION

Document number : 197/190 55-CAG 161 1607/1
MODULE          : Subs_AuxEq
DESCRIPTION     : Contains subroutines for auxiliary equipment script 17_01.abi
                   and deblock.abi (?)

COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE        NAME            REVIEW            COMMENT
R1    20090616    ERAHEIK         Syntronic AB/     First release.
                                  Tobias Semberg

A     20110415    Syntronic AB/   XDAVMEL           Updated the header of the script and added use strict (HN33887)
                  Tobias Semberg                    Added AbisLoggingBTS and RestartBTS

B     20110506    XTOBSEM         XGUSTPE           Added UpdateCellBTS  
--

=head1 REQUIRES

L<Exporter> 

L<PerlFunc> 

L<Abisco_Connection> 


=head1 METHODS

=head2 AbisLoggingBTS

 AbisLoggingBTS();

Subroutine: AbisLoggingBTS
Purpose:    Turn Abis logging off or on
Input:      State => 'OFF',
            TG    =>  $TG,
            BTS    =>  $BTS,
Output:


=head2 ClearLogFile

 ClearLogFile();

--FUNCTION : ClearLogFile
COMMENT  :

IN       :
OUT      :
--

=head2 GetMOStatus

 GetMOStatus();

-COMMENT: GetMOStatus
IN     : Optionally one or more of the following
         keys: TRXC, MO, INST, TFMode, MOState
OUT    : None
-

=head2 RenameStoreLogFile

 RenameStoreLogFile();

--FUNCTION : RenameStoreLogFile
COMMENT  :

IN       :
OUT      :
--

=head2 RestartBTS

 RestartBTS();

Subroutine:  RestartBTS
Purpose:    Restarting the BTS
Input:      Hash containing the following key(s):
             BTS  - Abisco connection parameter
Output:


=head2 UpdateCellBTS

 UpdateCellBTS();

Subroutine: UpdateCellBTS
Purpose:    Update information in choosen BTS Cell
Input:      %Input ->BTS, TG, CellNumber, BCCHType, BS_AG_BLKS_RES, BS_PA_MFRMS
Output:     None
Added:      XTOBSEM



=cut

=head1 NAME

subs_bcchpower


=head1 DESCRIPTION

Document number: 235/190 55-CAH 161 1607/1 Uen
MODULE      : subs_bcchpower
DESCRIPTION :

COPYRIGHT © : ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV DATE      NAME            REVIEW    COMMENT
A   20121030  XANSBEM         XNAVNAS   Initial release
PB1           XANSBEM         XHENMRA   Added GetActiveCell, Updated workaround solution for problem in HQ96955
                                        removed GetTRXValues_Parser
PB2 20130617  XHENRMA                   Modified CheckBSPowerWithMSSIMLog to support SACCH-frames.
                                        Added routines ReleaseReqBTS, EstReqBTS, CheckFACCHPowerWithMSSIMLog
                                        Modified MSSIMChannelAct to support "Dummy-bursts".


=head1 REQUIRES

L<Carp> 

L<PerlFunc> 

L<English> 

L<Hash::Util> 

L<wireshark> 

L<mssim_def> 

L<mssim_sub> 

L<mssim> 

L<dbLog> 

L<AbiscoFunc2> 

L<Abisco_Connection> 

L<subinit_bcchpower> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 AbisLoggingBTS

 AbisLoggingBTS();

SUBROUTINE  : AbisLoggingBTS
DESCRIPTION : Turn Abis logging off or on

IN  : State => 'OFF',
OUT : none


=head2 BSPowerControl

 BSPowerControl();

SUBROUTINE  : BSPowerControl
DESCRIPTION : Send a BSPowerControl message to the BCCH carrier

IN  : See hash Config below
OUT : None


=head2 BTSChannelAct

 BTSChannelAct();

SUBROUTINE  : BTSChannelAct
DESCRIPTION : Activates a channel on the BTS

IN  : See hash Config below
OUT : None


=head2 BTSChannelRelease

 BTSChannelRelease();

SUBROUTINE  : BTSChannelRelease
DESCRIPTION : Release a channel on the BTS

IN  : TS
      TRXC
      ChType

OUT : None


=head2 ChRelMSSIM

 ChRelMSSIM();

SUBROUTINE  : ChRelMSSIM
DESCRIPTION : To release a channel in the MSSIM

IN  : CcId
      Timeout
OUT : None


=head2 CheckBCCHResult

 CheckBCCHResult();

SUBROUTINE  : CheckBCCHResult
DESCRIPTION : Checks results for 5173:007

IN  : $SUBTC
OUT : $ErrVal


=head2 CheckBCCHResult2

 CheckBCCHResult2();

SUBROUTINE  : CheckBCCHResult2
DESCRIPTION : Checks results for 5173:007

IN  : $SUBTC
OUT : $ErrVal


=head2 CheckBSPowerWithMSSIMLog

 CheckBSPowerWithMSSIMLog();

SUBROUTINE  : CheckBSPowerWithMSSIMLog
DESCRIPTION : Checks BS power by creating and analysing an LSU log
              Wireshark.pm needs an update for this subroutine to work
              (current version released in Abisco version R43A)

IN  : ConfigFile
      MsSIM_LSU_FileName
OUT : Hash containing power levels for timeslots or subtimeslots


=head2 CheckCombNcomb

 CheckCombNcomb();

my $TLSFilteringTime    = 100;
SUBROUTINE  : CheckCombNcomb
DESCRIPTION : Checks if the BCCH is configured correctly and updates it
              if it is not

IN  : Expected BCCH type, NCOMB or COMB
OUT : None, calls HandleError if wrong BCCH type


=head2 CheckFACCHPowerWithMSSIMLog

 CheckFACCHPowerWithMSSIMLog();

SUBROUTINE  : CheckFACCHPowerWithMSSIMLog
DESCRIPTION : Checks FACCH power by creating and analysing an LSU log
              while provoking FACCH-traffic with SAPI-0 establishment requests.

IN  : ConfigFile
      MsSIM_LSU_FileName
OUT : Hash containing power level and frame-count


=head2 ClearMSSIMbuffer

 ClearMSSIMbuffer();

SUBROUTINE  : ClearMSSIMbuffer
DESCRIPTION : Clears the MSSIM message buffer

IN  : Timeout
OUT : Number of cleared messages


=head2 ConfigureFreqHopping

 ConfigureFreqHopping();

SUBROUTINE  : ConfigureFreqHopping
DESCRIPTION : Configure frequency hopping

IN  : HoppingType, Hsn, Arfcn
OUT : none


=head2 ConnectMO

 ConnectMO();

SUBROUTINE  : ConnectMO
DESCRIPTION : Sends ConnectCommand to MO defined by MOClass, InstanceNo
              and AssosiatedSOInstance and checks ConnectComplete.

IN  : Optionally one or more of the following
      keys: TRXC, MO, MOState, INST, ASOInst
OUT : None


=head2 CreateParameterHash

 CreateParameterHash();

SUBROUTINE  : CreateParameterHash
DESCRIPTION :

IN  : See hash Config below
OUT : Same as IN


=head2 DisableMO

 DisableMO();

Subroutine: DisableMO
Purpose:    To Disable MO
Input:      See parameter hash below
Output:     %Resp


=head2 DisableTX

 DisableTX();

SUBROUTINE  : DisableTX
DESCRIPTION : Disable TX of first TRXC by sending DisableRequest

IN  : BTS
      NoEval
OUT : none


=head2 EnableMO

 EnableMO();

Subroutine: EnableMO
Purpose:    To Enable MO
Input:      See parameter hash below
Output:     %Resp


=head2 EnableTX

 EnableTX();

SUBROUTINE  : EnableTX
DESCRIPTION : Enable TX of first TRXC by sending EnableRequest

IN  : none
OUT : none


=head2 EstReqBTS

 EstReqBTS();

SUBROUTINE  : EstReqBTS
DESCRIPTION : To send Establish Request from BTS and receive
             the expected response from BTS on SAPI3.
             This routine is copied from subs_mspower.pm rev D
IN  : $BTS
             $SAPI
             $Expected data
             $LinkId ( FACCH/SDCCH or SACCH)
OUT : None


=head2 GetActiveCell

 GetActiveCell();

SUBROUTINE  : GetActiveCell
DESCRIPTION : Return the Cell containing input TRXC

IN  :         TRXC => $TRXC
OUT :         Cell number


=head2 GetBCCHMonData

 GetBCCHMonData();

SUBROUTINE  : GetBCCCHMonData
DESCRIPTION : Get BCCH Data from DVT monitor

IN  :  None
OUT : %BCCHMonData


=head2 GetBCCHReports

 GetBCCHReports();

SUBROUTINE  : GetBCCHReports
DESCRIPTION : Returns the BCCH Reports from Abis interface

IN  : BTSConn
      BCCHActiveMsg
      BCCHIdleMsg
      Timeout
OUT : $L - Reference to hash with found messages


=head2 GetMCTRInfo

 GetMCTRInfo();

--FUNCTION : GetMCTRInfo
COMMENT  : Get info from TG used to save MCTR info
Syntax   :
IN       : none
OUT      : %Resp
--

=head2 GetMCTRRecords

 GetMCTRRecords();

SUBROUTINE  : GetMCTRRecords
DESCRIPTION : Returns MCTRRecords from Capabilities in CF

IN  : -
OUT : @MCTRRecords


=head2 GetMCTRmaxTRXs

 GetMCTRmaxTRXs();

SUBROUTINE  : GetMCTRmaxTRXs
DESCRIPTION : Returns number of TRXs allowed per MCTR

IN  : -
OUT : @MCTRRecords


=head2 GetTXMonData

 GetTXMonData();

SUBROUTINE  : GetTXMonData
DESCRIPTION : Get TX Data from DVT monitor

IN  : $NrOfTRX - The number of TRX´s
OUT : %MCTRMonData with info for each TRX


=head2 ImmediateAssignInfoP2

 ImmediateAssignInfoP2();

SUBROUTINE  : ImmediateAssignInfoP2
DESCRIPTION : Send immediate assign

IN  :     %lResp TG, TRXC, TS, CH_TYPE, PageMode, EP1_BEH, EP1_TXCNT
OUT :     %lResp


=head2 MCTRConfig

 MCTRConfig();

--FUNCTION : MCTRConfig
COMMENT  : Send MCTRConfigRequest
Syntax   :
IN       :
OUT      : %Resp
--

=head2 MOState

 MOState();

--------SUBROUTINE  : MOState
DESCRIPTION : Returns the status of MO

IN  : See config hash below
OUT : MOState


=head2 MSSIMChannelAct

 MSSIMChannelAct();

SUBROUTINE  : MSSIMChannelAct
DESCRIPTION : To activate a channel in the MSSIM

IN  : See hash Config below
OUT :	CcId


=head2 MSSIMPacketChannelAct

 MSSIMPacketChannelAct();

SUBROUTINE  : MSSIMPacketChannelAct
DESCRIPTION : To activate a PDCH channel in the MSSIM

IN  : See hash Config below
OUT : CcId


=head2 MakeAscii

 MakeAscii();

SUBROUTINE  : MakeAscii
DESCRIPTION : Convert an array with characters to printable Ascii.
              Quit if null found

IN  : Character array reference
OUT : Printable ascii string


=head2 ReleaseReqBTS

 ReleaseReqBTS();

SUBROUTINE  : ReleaseReqBTS
DESCRIPTION : To send Release Request from BTS and receive
             the expected response from BTS on SAPI3.
              This routine is simply copied from EstReqBTS
IN  : $BTS
             $SAPI
             $Expected data
             $LinkId ( FACCH/SDCCH or SACCH)
OUT : None


=head2 ResetMO

 ResetMO();

SUBROUTINE  : ResetMO
DESCRIPTION : Sends ResetCommand to MO defined by MOClass,
              AssosiatedSOInstance, InstanceNo and checks ResetComplete.

IN  : Optionally one or more of the following
      keys: TRXC, MO, MOState, INST, ASOInst, BACKCOMP
OUT : None


=head2 RestartRBS

 RestartRBS();

SUBROUTINE  : RestartRBS
DESCRIPTION : Restarts the RBS

IN  : None
OUT : None


=head2 RoundFloat

 RoundFloat();

SUBROUTINE  : RoundFloat
DESCRIPTION : Rounds the first argument to (the second argument) number
              of decimal places.

IN  : Float     (Value to round)
      Decimals  (Number of decimal digits, >= 0)
OUT : Rounded float


=head2 SendSIInformation

 SendSIInformation();

SUBROUTINE  : SendSIInformation
DESCRIPTION : Sends SI Information that is used upon restart of the BTS
IN  : $NrOfTrx - Number of TRX´s
OUT :


=head2 SendTSConfigRequest

 SendTSConfigRequest();

Subroutine: SendTSConfigRequest
Purpose:    To Enable a Time Slot
Input:
Output:
example:    SendTSConfigRequest();


=head2 StartLoopMSSIM

 StartLoopMSSIM();

SUBROUTINE  : StartLoopMSSIM
DESCRIPTION : To start the loop function in MSSIM

IN  : Timeout
      CcId        (MSSIM downlink channel id)
      LoopCcId    (MSSIM uplink channel id)

OUT : None


=head2 StartMO

 StartMO();

SUBROUTINE  : StartMO
DESCRIPTION : Sends StartRequest to MO defined by MOClass,
              AssosiatedSOInstance, InstanceNo and checks StartResult.

IN  : Optionally one or more of the following
      keys: TRXC, MO, INST, ASOInst
OUT :


=head2 StopLoopMSSIM

 StopLoopMSSIM();

SUBROUTINE  : StopLoopMSSIM
DESCRIPTION : To stop the loop function in MSSIM

IN  : CcId    (MSSIM downlink channel id)
      Timeout

OUT : None


=head2 TXConfig

 TXConfig();

SUBROUTINE  : TXConfig
DESCRIPTION : Send a TXConfigRequest with BCCH Power Saving settings

IN  : BTS
      TRXC
      PRO - Power Reduction OFFSET
      Idle
      Active
      BCCHPSTNMap

OUT : None


=head2 UpdateGslData

 UpdateGslData();

SUBROUTINE  : UpdateGslData
DESCRIPTION :

IN  : See hash Config below
OUT : None



=cut

=head1 NAME

Subs_Broadcast


=head1 DESCRIPTION

Document number: 89/190 55-CAH 161 1607/1 Uen
MODULE      : Subs_Broadcast
DESCRIPTION : Contains subroutines that will be used in CCCH tests, such as Mobile Call Setup.

COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE       NAME             REVIEWER        COMMENT
A     20100920   Syntronic AB/    Syntronic AB/   File created. Approved UABTOH
                 Martin Wikström  David Melin
B     20100927   Syntronic AB,    XWIKMAR         Added subroutine ClearMSSIMBuffer().
                 David Melin                      Approved UABTOH
C     20110607   XMABENT          XDAVMEL         Added subs: SearchErrorReport SendSMSBroadcastCommand
                                                  SendSMSBroadcastRequest SetSMSCBReporting GetDVTMonitorValue
                                                  GetSMSBroadcastCmdPoll SendBitStream ReceiveSMSCBSequence
                                                  EnableDVTMonitor DisableDVTMonitor FindFirstSMSCBMessage
                                                  SetBehaviourMode SendStoredMessages GetLastNoOfSentMessages
                                                  SeqNrBuilder
                                                  Imported Assert from dbLog. Removed log functions and general cleanup
                                                  Added function GetCellParameters_MSSIM. Added Receive2SMSCB, updated SMSBroadcastRequest
                                                  Added parameter TGId to all UpdateCell calls.
                                                  Removed unused inclusions. Updated SendBCCHInformation and ReceiveAbiscoMessage
                                                  TR HN88916 solved. Updated DisableConfigEnableTimeslot_Extended due to changed mandatory parameter
                                                  Solves issues with script 01.13
D     20110510   XMABENT          ELIAOSH         Added the possibility to add EP1_TIMER to SendSMSBroadcastCommand
                                                  Missing variables for TRAFFN.SACCHFilling5 added at line 3458
E     20110513   XTOBSEM          XPRRANA         Added ResetTG
F     20110922   XTOBSEM/         XLEIMAR         Updated according to perlcritic
                 XLEIMAR                           and fixed introduced bugs. Added
                                                   waitForCellSync to ChActMSSIM.
                                                   Changed the sub to import $TG, $TRXC, $Cell and $TRXList from subinit (HO98876)
G     20120629   XANSBEM          XNAVNAS         Updated StoreTG and ResetTG for better MCTR support. (HP39283)
                                                   Solved TR HP54787
PH1   20130712   XSALNIC          XNAVNAS         Changed SdcchByp from "1" to "0" in ChActMSSIM and add SDCCHList in CheckBCCHTypeBTS.
                                                   add subroutine GetActiveCell() and changed CellNumber from "0" to GetActiveCell() in sub SetBCCHType.
PH2   20130716   XSALNIC          XNAVNAS         Add "PGSLTimersStruct" in Sub ChActBTS for PacketChannel.
PH3   20130812   XSALNIC          XNAVNAS         After updating in MSSIM changed SdcchByp from "0" to "1" in ChActMSSIM.
PH4   20131018   XAMMELY          EKHOELH         Updated CheckCellSettings, Perlcritic.
PH5	20131113   EXXUZZG			XNAXNAS			Updated SACCHInfoModifySetParam function for MI
                                                   Fixed TR HR43413 and UpdateCell command for Ufte R50A
PH6   20131118   XAMMELY          XHENRMA         Updated DisableDVTMonitor and EnableDVTMonitor due HR43413. Run Perlcritic


=head1 REQUIRES

L<Hash::Util> 

L<Carp> 

L<mssim_def> 

L<SubInit_Broadcast> 

L<mssim_sub> 

L<mssim> 

L<dbLog> 

L<wireshark> 

L<English> 

L<PerlFunc> 

L<AbiscoFunc2> 

L<User> 

L<Msg> 

L<Abisco_Connection> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 BCCHInfoP2

 BCCHInfoP2();

SUBROUTINE  : BCCHInfoP2
DESCRIPTION : Send a BCCH Info message

IN  :     $BTS, SYS Info type, BCCH Mapping
OUT :     None


=head2 BCCHInfoP2_Off

 BCCHInfoP2_Off();

SUBROUTINE  : BCCHInfoP2_Off
DESCRIPTION : Stops a BCCH Info message

IN  :     $BTS,
          Type (SI-type to be stopped) => '1',
          Timeslot => $TS
OUT :     None


=head2 BCCHInfoP2_unexpected

 BCCHInfoP2_unexpected();

SUBROUTINE  : BCCHInfoP2_unexpected
DESCRIPTION : Send a BCCH Info message that causes Error:
              unexpected information element

IN  :     $BTS, SYS Info type, BCCH Mapping
OUT :     None


=head2 BackupOldTimeslotConfigurations

 BackupOldTimeslotConfigurations();

SUBROUTINE  : BackupOldTimeslotConfigurations
DESCRIPTION : Returns the channel combination for all timeslots that are
              defined in .ABI file TS vector (which must be defined as a
              vector in the PAR hash), and the BSAG value for timeslot 0.

IN  :     EnableDebugPrintouts => undef (otherwise only uses global variables).
OUT :     { BackupChComb => @BackupChComb;
            BackupBSAGForTS0 => $BackupBSAGForTS0;
          }


=head2 BitstreamBCCHInfoP1

 BitstreamBCCHInfoP1();

SUBROUTINE  : BitstreamBCCHInfoP1
DESCRIPTION : Set configuration for BCCH

IN  :     None
OUT :     None


=head2 ChActBTS

 ChActBTS();

SUBROUTINE  : ChActBTS
DESCRIPTION : To activate a channel in the BTS

IN  :     Hash containing the following key:
              BTS - Abisco connection parameter
OUT :     None


=head2 ChActBTSSetSetSIParam

 ChActBTSSetSetSIParam();

SUBROUTINE  : ChActBTSSetSetSIParam
DESCRIPTION : To send Channel activation including si types and
              changing one parameter for the specified si types

IN  :    Hash containing
         - $BTS
         - $SITypes          array reference defining the si types to set
                            "5", "5bis", "6", "5ter"
         - $ChComb          channel combination
OUT :    None


=head2 ChActMSSIM

 ChActMSSIM();

SUBROUTINE  : ChActMSSIM
DESCRIPTION : To activate a channel in the MSSIM, returns the CcId package variable

IN  :      Bypass      => 0,
           RxAcchOn    => 1,
           AllSacchSI  => 0,
           RToutOff    => 0,
           RxTrfcOn    => 0,
           UndecFrm    => 0,
           TrxNum      => 0,
           L2hdr       => 2,
           Data        => [@Meas],
           TG          => $TG,
           TRXC        => $TRXC,
           TS          => $TS,
           PDCHMode    => "",
           ChannelType => $ChType,
           ChRate      => $ChRate,
           TypeOfCh    => $TypeOfCh,
           AlgOrRate   => $AlgOrRate,
           AMRCodec    => $AMRCodec
           Cell        => $Cell
           MsId        => $MsId,
OUT  :     $CcId

Changes:     2091210 BJER added condition when MSId = -1 to not send
                          gsmbSrvMS_SET_MEAS_CMD.
                          Removed global gCcId. Keep gCcId in abi file


=head2 ChCleanBTS

 ChCleanBTS();

SUBROUTINE  : ChCleanBTS
DESCRIPTION : To release all radio traffic channels or control channels in the BTS
              without asserting the responses

IN  :     BTS   => $BTS,
          TG    => $TG,
          TRXC  => $TRXC
OUT :     None


=head2 ChRelBTS

 ChRelBTS();

SUBROUTINE  : ChRelBTS
DESCRIPTION : To release a channel in the BTS

IN  :     Hash containing the following key(s):
              BTS - Abisco connection parameter
OUT :     None


=head2 ChRelMSSIM

 ChRelMSSIM();

SUBROUTINE  : ChRelMSSIM
DESCRIPTION : To release a channel in the MSSIM, uses the package variable CcId to
              identify the opened channel

IN  : CcId    => $gCcId,
OUT : None

Changes:     2091210 BJER Removed global gCcId. Keep gCcId in abi file


=head2 CheckBCCHTypeBTS

 CheckBCCHTypeBTS();

SUBROUTINE  : CheckBCCHTypeBTS
DESCRIPTION : To verify and set correct BCCHType(from par-hash) for active sub test case,
              makes a restart of BTS if to save changes.

IN  :      BTS (Abisco connection parameter)
           TGId
           CellNumber
           BCCHType
OUT :


=head2 CheckCell

 CheckCell();

SUBROUTINE  : CheckCell
DESCRIPTION :

Syntax   : CheckCell();



=head2 CheckCellSettings

 CheckCellSettings();

SUBROUTINE  : CheckCellSettings
DESCRIPTION : If the 'Expected' input hash doesnt match the current cell settings
              from InfoCell then update cell with 'Expected's keys and restart BTS.
              The 'Expected' input hash is merged with a default settings hash if
              'UseDefaults' is set to 1. The default settings hash has
              the settings a cell has when New TG is used in Abisco.
              NOTE: the cell must be configured once before this function is used
              since it doesnt update HW specific settings in UpdateCell (such as
              ARFCN number).

IN  : BTS         => $BTS,
      TG          => $TGId,
      Cell        => 0,
      UseDefaults => 0
      Expected => {
              BCCHType        => $::BCCHType,
              SDCCHList       => [$::TRXC, $::TS],
              BS_AG_BLKS_RES  => $::BSAG,
              CBCHIndicator   => $::CBCH_Ind,
      ..(above are just examples, all parameters in iwd updatecell valid)},
OUT : Void


=head2 CheckLoggedMultiframePositionsAndTimeslots

 CheckLoggedMultiframePositionsAndTimeslots();

SUBROUTINE  : CheckLoggedMultiframePositionsAndTimeslots
DESCRIPTION : Takes the output from ProcessTsharkLogfileAndCheckMessageType2Values()
              and checks that the frame number (TC value) is correct for each
              message, as well as the allowed timeslots. Based on the PAR hash.
              Although most errors will raise a HandleError instead of returning 0.

IN  :     <A hash on the same form as the output from ProcessTsharkLogfileAndCheckMessageType2Values()>
          EnableDebugPrintouts        => undef                    # undef or anything else
          DoNotAbortOnEmptySysInfoTC  => undef                    # undef or anythign else
          SysInfoTC             => Array reference of System Information TC values (frame numbers)
          SysInfoType           => Array reference of System Information types
          TS                    => Array reference of Timeslots
OUT :     $Result = 1: Successful, data matches the PAR hash. $Result = 0: Not successful. Error.


=head2 CheckSysInfo

 CheckSysInfo();

SUBROUTINE  : CheckSysInfo
DESCRIPTION : Check if and what SYS INFO has been sent on LAPDm

IN  :      None
OUT :      Sys info type


=head2 CheckSysInfoSeq

 CheckSysInfoSeq();

SUBROUTINE  : CheckSysInfoSeq
DESCRIPTION : To retrieve sys info message sequence on the air interface
              or to check if a certain message is sent downlink

IN  :     SYSInfo type to trigger 1st record, Number of messages to report,
          Max. messages to check
OUT :     Array containing sequence (the scheduling order)
          Returns undef array if starttype not found within MaxToSearch


=head2 CheckSysInfoSeqSACCH

 CheckSysInfoSeqSACCH();

SUBROUTINE  : CheckSysInfoSeqSACCH
DESCRIPTION : To retrieve sys info message sequence on the air interface
              or to check if a certain message is sent downlink

IN  :     SYSInfo type to trigger 1st record, Number of messages to report,
          Max. messages to check
OUT :     Array containing sequence (the scheduling order)
          Returns undef array if starttype not found within MaxToSearch


=head2 ClearMSSIMBuffer

 ClearMSSIMBuffer();

SUBROUTINE  : ClearMSSIMBuffer
DESCRIPTION : To clear MSSIM Buffer

IN  :     Hash containing the following key(s):
            Timeout  - Duration to empty the buffer

OUT :     None


=head2 CompareArrays

 CompareArrays();

Common subroutines
SUBROUTINE  : CompareArrays
DESCRIPTION : To compare two Arrays

IN  : $lArray1    ONE dimensional array
      $lArray2    ONE dimensional array
      Debug       Enables debug trace 1 = On, 0 = Off

OUT : 0 - tables DOESNT match
      1 - tables match


=head2 CompareArraysUncertainLength

 CompareArraysUncertainLength();

SUBROUTINE  : CompareArraysUncertainLength
DESCRIPTION : To compare two Arrays named Expect and Received

IN  :      Two arrays    - Received
                         - Expect
OUT :      Returns 0 if data differs, else 1


=head2 CompareHash

 CompareHash();

SUBROUTINE  : CompareHash
DESCRIPTION : Compares two hashes by using recursion

IN  : Expected    Expected hash table
      Received    Hash table to compare Expected to
      Debug       Set to 1 to get debug printouts

OUT : 0 - tables DOESNT match
      1 - tables match


=head2 CompleteStart

 CompleteStart();

SUBROUTINE  : CompleteStart
DESCRIPTION :

Syntax   : CompleteStart(TGId => $TG{TGNr});



=head2 ConfigureTimeslotsFromPARValues

 ConfigureTimeslotsFromPARValues();

SUBROUTINE  : ConfigureTimeslotsFromPARValues
DESCRIPTION : Sets the channel combinations and, when applicable, the BS AG value.
              All values can be overridden, but the default are taken from the PAR hash.

IN  : TSVec => \@lPARTS, CMBVec => \@lPARChComb, BSAGForVAndIV => $::BSAGForVAndIV, SuppressLogOutput => undef
OUT : None.


=head2 ConnectTG

 ConnectTG();

SUBROUTINE  : ConnectTG
DESCRIPTION :

Syntax   : ConnectTG(TGId => $TG{TGNr});



=head2 CountFcchFrames

 CountFcchFrames();

SUBROUTINE  : CountFcchFrames
DESCRIPTION : To detect the correct amount and frame numbers of FCCH frames
              periodically

IN  : Hash containing the following key(s):
      Iterations : Number of iterations the test should run (default 1)
      IterationPeriod : Delay (in sec) between each iteration  (default 1)
      Timeout : Timeout (in sec) while waiting to cell info  (default 5)
Note: The test execution time, Te, will be in the interval:
      (Iterations * IterationPeriod) < Te <= (Iterations * ( IterationPeriod + Timeout ))
OUT : None


=head2 CountSchFrames

 CountSchFrames();

SUBROUTINE  : CountSchFrames
DESCRIPTION : To detect the correct amount and frame numbers of SCH frames
              periodically

IN  : Hash containing the following key(s):
      Iterations : Number of iterations the test should run (default 1)
      IterationPeriod : Delay (in sec) between each iteration  (default 1)
      Timeout : Timeout (in sec) while waiting to cell info  (default 5)
Note: The test execution time, Te, will be in the interval:
      (Iterations * IterationPeriod) < Te <= (Iterations * ( IterationPeriod + Timeout ))
OUT : None


=head2 DeactivateSACCH

 DeactivateSACCH();

SUBROUTINE  : DeactivateSACCH
DESCRIPTION : Send one Deactivates SACCH command to the BTS on Abis and compare the
              recieved message and cause value with the expected.

IN  : Hash containing the following key(s):
      BTS                   - Abisco connection parameter
      ChAct                 - Channel Activation parameter
      TG                    - TG
      TRXC                  - TRXC
      TS                    - Timeslot
      ChType                - Channel Type
      BTSExpectedResult     - Expected result message from BTS
      AbisInterfaceMessage  - Expected message from Abis interface
      AbisCauseValue        - Expected Cause Value associatied with Abis message
      AbisSupressTimeout    - Indicate that Error messages due to timeout on
                              the Abis interface should be suppressed
      AbisTimeout           - Time in sec before timeout when waiting for a
                              message on the Abis interface
OUT : None


=head2 DeactivateSACCH2

 DeactivateSACCH2();

SUBROUTINE  : DeactivateSACCH2
DESCRIPTION : Deactivates all messages on SACCH

IN  :       TG     => $TG,
            TRXC   => $TRXC,
            TS     => $TS,
            ChType => $ChType,
OUT :       %lResp                        -The expected message, if recieved


=head2 DisableConfigEnable

 DisableConfigEnable();

SUBROUTINE  : DisableConfigEnable
DESCRIPTION : Sets channel combination. Will not work for CMB = 'tch'!
              See also DisableConfigEnableTimeslot_Extended().

Syntax   : DisableConfigEnable(TS => $TS, CMB => $CMB);



=head2 DisableConfigEnableTimeslot_Extended

 DisableConfigEnableTimeslot_Extended();

SUBROUTINE  : DisableConfigEnableTimeslot_Extended
DESCRIPTION : Sets channel combination for a given timeslot.
              Will work for CMB = 'tch', 'iv', 'v' and 'vi'. Other values not implemented [yet].

Syntax   : DisableConfigEnableTimeslot_Extended(TS => $TS, CMB => $CMB, BSAGForVAndIV => $BSAGForVAndIV);
           TS, CMB and BSAGForVAndIV are mandatory



=head2 DisableDVTMonitor

 DisableDVTMonitor();

SUBROUTINE  : DisableDVTMonitor
DESCRIPTION : Disable a DVT monitor

IN  :     Hash containing the following key(s):
            Area    - The area (or path) of the DVT monitor. Default 'TRXY:PLS' Where Y = first defined TRX from ABISCO
            Monitor - The DVT monitor to deactivate

OUT :     None


=head2 DisconnectTG

 DisconnectTG();

SUBROUTINE  : DisconnectTG
DESCRIPTION :

Syntax   : DisconnectTG(TGId => $TG{TGNr});



=head2 EmptyBufferMSSIM

 EmptyBufferMSSIM();

SUBROUTINE  : EmptyBufferMSSIM
DESCRIPTION : To empty the receive buffer of the MMSIM

IN  :     $NumOfMsgs            Number of messages to read.
          $AbortIfTimeout       If defined (!= undef), regardless of value, returns if a timeout is detected
OUT :     None


=head2 EnableDVTMonitor

 EnableDVTMonitor();

SUBROUTINE  : EnableDVTMonitor
DESCRIPTION : Enable a DVT monitor

IN  :     Hash containing the following key(s):
            Area    - The area (or path) of the DVT monitor. Default 'TRXY:PLS' where Y = First connected TRX in ABISCO
            Monitor - The DVT monitor to activate
OUT :     None


=head2 EnableTS

 EnableTS();

SUBROUTINE  : EnableTS
DESCRIPTION : Enable or disable Timeslot

IN  :     $BTS, message: 'EnableRequest'/'disablerequest', response
OUT :     None


=head2 EstablishReqMSSim

 EstablishReqMSSim();

SUBROUTINE  : EstablishReqMSSIM
DESCRIPTION : To send Establish Request to MSSIM and receive EstablishIndication from Abisco

IN  :      BTS     => $BTS,
            SAPI    => 3,
            Chan    => $Chan,
            L3Data  => undef,
OUT :      None


=head2 FindFirstSMSCBMessage

 FindFirstSMSCBMessage();

SUBROUTINE  : FindFirstSMSCBMessage
DESCRIPTION : To receive the first SMSCB frames

IN  :     Hash containing the following key(s):
            Timeout   - Number of seconds to receive SMSCB traffic before
                        exiting the sub
            SeqNr     - Sequence number of the exected SMSCB message

OUT :     Hash containing the following key(s):
            ErrMsg    - Error message (only exists if there was an error)


=head2 FormatTestcaseName

 FormatTestcaseName();

SUBROUTINE  : FormatTestcaseName
DESCRIPTION : Reformats the PAR hash test case name for printout purposes.
              If the input string is not on the format "XX_YY", it is returned unchanged.

IN  :     TestcaseName => "xx_yy"
OUT :     "xx.yy"


=head2 GetActiveCell

 GetActiveCell();

SUBROUTINE  : GetActiveCell
DESCRIPTION : Return the Cell containing input TRXC

IN  :         TRXC => $TRXC
OUT :         Cell number


=head2 GetCellParameters_MSSIM

 GetCellParameters_MSSIM();

SUBROUTINE  : GetCellParameters_MSSIM
DESCRIPTION : Get Cell Parameters in the MSSIM

IN  :     Hash containing the following key(s):
            Cell

OUT :     Hash with the command response


=head2 GetDVTMonitorValue

 GetDVTMonitorValue();

SUBROUTINE  : GetDVTMonitorValue
DESCRIPTION : Return the value of an enabled DVT monitor

IN  :     Hash containing the following key(s):
            Area    - The area (or path) of the DVT monitor. Default 'TRXY:' Where Y = first defined TRX from ABISCO
            Monitor - The DVT monitor

OUT :     Hash containing the following key(s):
            MonitorFound  - Indicate if the DVT monitor value was found
            MonitorValue  - The found DVT monitor value


=head2 GetLastNoOfSentMessages

 GetLastNoOfSentMessages();

SUBROUTINE  : GetLastNoOfSentMessages
DESCRIPTION : Waits until the DVT monitor value of no_of_sent_mess has stablilized.
              Produces HandleError if no values are found, so the the DVT Monitor
              /TFS/CCH/SMS/no_of_sent_mess should be enabled before this is run.

IN  :     None

OUT :     The stable value of /TFS/CCH/SMS/no_of_sent_mess


=head2 GetSMSBroadcastCmdPoll

 GetSMSBroadcastCmdPoll();

SUBROUTINE  : GetSMSBroadcastCmdPoll
DESCRIPTION : Get an GetSMSBroadcastCmdPoll
              ( Remember to turn the SetSMSCBReporting 'On' first )

IN  :     Hash containing the following key(s):
            Timeout      - Timeout in sec

OUT :     Hash containing the following key(s):
            Status       - 'Ok' or 'Timeout'
            SMSCBCmdPoll - Reference to SMSBroadcastCmdPoll hash ( Only valid of Status = Ok )


=head2 InitiateTsharkLogging

 InitiateTsharkLogging();

SUBROUTINE  : InitiateTsharkLogging
DESCRIPTION : Initiates Tshark logging based on PAR hash and the log file name.

IN  :     TsharkLogfileName     =>    'Tsharklog.log'
          EnableDebugPrintouts  =>    undef                     # undef or anything else
OUT :     None.


=head2 LAPDmReceive

 LAPDmReceive();

FRLI:
SUBROUTINE  : LAPDmReceive
DESCRIPTION : To receive a LAPDm frame

IN  :        $Chan      (SDCCH, SACCH or FACCH)
OUT :        $Resp     (Response = "Timeout", "I", "RR", RNR", "REJ", "SABM", "DM", "UI", "DISC" or "UA"
             N(R)       (Receive Sequence Number)
             N(S)      (Send Sequence Number)
             P/F       (Poll/Final bit)
             LPD        (Link Protocol discriminator)
             api        (Service Access Point)
             C/R        (Command/Response)
             EA        (Address Extension Bit)
             L          (Length of Information field)
             M          (More bit)
             EL        (Length Extension bit)
             Fn}        (Frame Number)
             Data      (Information Field)


=head2 PrintDebug

 PrintDebug();

SUBROUTINE  : PrintDebug
DESCRIPTION : Prints Debug printouts if global variable Debug is set to 1

IN  : DebugMsg => "Debug msg\n"
OUT : None


=head2 ProcessTsharkLogfileAndCheckMessageType2Values

 ProcessTsharkLogfileAndCheckMessageType2Values();

SUBROUTINE  : ProcessTsharkLogfileAndCheckMessageType2Values
DESCRIPTION : Opens and processes a raw Tshark log file, checks that all
              MessageType2 values are in the "allowed list" from the PAR hash,
              and returns several arrays with various information based on the
              logs.

IN  :     LogfileHandle         => 'LogHandle',
          LogfilePath           => 'Tsharklog.log',
          EnableDebugPrintouts  => undef                      # undef or anything else
          EnableSIPrettyPrint   => undef                      # undef or anything else, PrettyPrints all log messages
          DiscardMsgType2       => Array reference of MessageType2 types to discard in the log
          MessageType2          => Array reference of MessageType2 types to check against
          SysInfoType           => Array reference of System Information types
OUT :     None.


=head2 RadioChReleaseCommand

 RadioChReleaseCommand();

SUBROUTINE  : RadioChReleaseCommand
DESCRIPTION : Cleans all radiochannels connected to TG

IN  :     BTS  => $BTS
          TG   => $::TG
          TRXC => 'Undefined'
OUT :     None


=head2 Receive2SMSCB

 Receive2SMSCB();

SUBROUTINE  : Receive2SMSCB
DESCRIPTION : To receive SMSCB frames until error occurs or maximum numer of
              fillframes received

IN  :     MaxCBCHFillFrames  number of CBCH fill frames to receive before
                             exiting the sub, set to 0 for infinite
          Timeout            number of seconds to receive SMSCB traffic before
                             exiting the sub, set to 0 for infinite
          SMSCBInfo          2 dim array containing the SMSCB data to compare received
                             data with. Must be of the format:
                             4-rows x 22-columns x number-of-unique-msgs
OUT :     lSMSCBMsgsRec      number of SMSCB msgs received


=head2 ReceiveAbiscoData

 ReceiveAbiscoData();

SUBROUTINE  : ReceiveAbiscoData
DESCRIPTION : To receive a spontanious message from Abisco

IN  :    BTS (Abisco connection parameter)
         Timeout    => undef,
         Expect     => undef,
         Supress    => undef,
         L3Data     => undef,
OUT :    CauseValue


=head2 ReceiveAbiscoMessage

 ReceiveAbiscoMessage();

SUBROUTINE  : ReceiveAbiscoMessage
DESCRIPTION : To receive a spontanious message from Abisco

IN  :     BTS (Abisco connection parameter)
             Timeout    => undef,
             Expect    => undef,
             Supress    => "SupressError",
OUT :     Received Data hash


=head2 ReceiveMSSIM

 ReceiveMSSIM();

SUBROUTINE  : ReceiveMSSIM
DESCRIPTION : To receive a spontanious message from MSSIM

IN  :
         Timeout  =>  $gTimeout,            -Timeout value
         ExpMsg   =>  $ExpMsg,              -Expected Message
         Expect  =>  @L3Data                -L3Data of expected message
OUT :    %RESP                              -The expected message, if recieved


=head2 ReceiveMSSIMData

 ReceiveMSSIMData();

SUBROUTINE  : ReceiveMSSIMData
DESCRIPTION : To receive a spontanious message from MSSIM and return the Resp->Data array

IN  : Timeout
      ExpMsg
OUT : An array from RESP->Data


=head2 ReceiveSIType

 ReceiveSIType();

SUBROUTINE  : ReceiveSIType
DESCRIPTION : Receive System information on SACCH

IN  :     $SIType
OUT :     system information content


=head2 ReceiveSMSCB

 ReceiveSMSCB();

SUBROUTINE  : ReceiveSMSCB
DESCRIPTION : To receive SMSCB frames until error occurs or maximum numer of
              fillframes received

IN  : MaxCBCHFillFrames  number of CBCH fill frames to receive before
                         exiting the sub, set to 0 for infinite
      Timeout            number of seconds to receive SMSCB traffic before
                         exiting the sub, set to 0 for infinite
      SMSCBInfo          2 dim array containing the SMSCB data to compare received
                         data with. Must be of the format:
                         4-rows x 22-columns x number-of-unique-msgs
OUT : lSMSCBMsgsRec      number of SMSCB msgs received


=head2 ReceiveSMSCBSequence

 ReceiveSMSCBSequence();

SUBROUTINE  : ReceiveSMSCBSequence
DESCRIPTION : To receive SMSCB frames until error occurs or maximum numer of
              fillframes received

IN  :     Hash containing the following key(s):
            MaxCBCHFillFrames - Number of CBCH fill frames to receive before
                                exiting the sub, set to 0 for infinite
            Timeout           - Number of seconds to receive SMSCB traffic before
                                exiting the sub, set to 0 for infinite
            SMSCBInfo         - 2 dim array containing the SMSCB data to compare received
                                data with. Must be of the format:
                                4-rows x 22-columns x number-of-unique-msgs

OUT :     Hash containing the following key(s):
            lSMSCBMsgsRec     - Number of SMSCB msgs received
              or, in case of error
            ErrMsg            - Error message


=head2 ResetTG

 ResetTG();

SUBROUTINE  : ResetTG
DESCRIPTION : Resets the TG to the one stored in Stored TG

IN  :     Cell, TG, MCTR
OUT :     Will die if errors found
Sample:   ResetTG(%StoredTG);


=head2 RestartBTS

 RestartBTS();

SUBROUTINE  : RestartBTS
DESCRIPTION : Restarting the BTS, make sure that the parameters set during restart
              complies with your specific TC

IN  :       BTS (Abisco connection parameter)
            TGId
            TRXList (array)
            TypeOfStart
OUT :


=head2 SACCHFilling

 SACCHFilling();

SUBROUTINE  : SACCHFilling
DESCRIPTION : To send SACCHFilling for specified SI type

IN  :      Hash containing
            - $BTS
            - $SIType
            - $EXT_IND
OUT :      None


=head2 SACCHFillingOff

 SACCHFillingOff();

SUBROUTINE  : SACCHFillingOff
DESCRIPTION : Sent SACCHFillingOff for specified SI type

IN  :     Si message type
OUT :     None


=head2 SACCHFillingSetParam

 SACCHFillingSetParam();

SUBROUTINE  : SACCHFillingSetParam
DESCRIPTION : To send SACCHFilling message changing one parameter for
              the specified si type

IN  :    Hash containing
         - $BTS
         - $SIType          "5", "5bis", "6", "MI"
         - $parameter       system info parameter to be changed from default
                          Default is 0 except for SI6 (default is 255)
OUT :    None


=head2 SACCHFillingWrongType

 SACCHFillingWrongType();

SUBROUTINE  : SACCHFillingWrongType
DESCRIPTION : Send SACCHFilling with incorrect SiType

IN  :   None
OUT :   None


=head2 SACCHInfoModify

 SACCHInfoModify();

SUBROUTINE  : SACCHInfoModify
DESCRIPTION : Sent SACCHInfoModify for specified SI type

IN  :     Si message type
OUT :     None


=head2 SACCHInfoModifyMIStart

 SACCHInfoModifyMIStart();

SUBROUTINE  : SACCHInfoModifyMIStart
DESCRIPTION : Send SACCHInfoModifyMIStart message

IN  :     None
OUT :     None


=head2 SACCHInfoModifyOff

 SACCHInfoModifyOff();

SUBROUTINE  : SACCHInfoModifyOff
DESCRIPTION : Send SACCHInfoModifyOff for specified SI type

IN  :   Si message type
OUT :   None


=head2 SACCHInfoModifySetParam

 SACCHInfoModifySetParam();

SUBROUTINE  :  SACCHInfoModifySetParam
DESCRIPTION :  To send SACCHInfoModify message changing one parameter for
               the specified si type

IN  :    Hash containing
         - $BTS
         - $SIType          "5", "5bis", "5ter", "6", "10"
         - $parameter       system info parameter to be changed from default
                          Default is 0 except for SI6 (default is 255)
OUT :    None


=head2 SMSBroadcastRequest

 SMSBroadcastRequest();

SUBROUTINE  : SMSBroadcastRequest
DESCRIPTION : To send one block (of 4) in a SMS Broadcast Request message

IN  : BTS           BTS reference
      TG            TG number
      TRXC          TRXC number
      ChType        Channel Type
      SeqNum        Sequence number 0-3 or 15
      TSNum         Time slot to send in
      MsgNum        offset in @SMSCBInfo array to start from divided by 4
      SMSCBInfo     2 dim arrayreference containing the SMSCB data to send
                    Must be of the format:
                    4-rows x 22-columns x number-of-unique-msgs
      SendWithError 0 = No, 1 = Yes = No parsing
      Queue         Queue SMSCB msgs, send later with DISPATCH.SendStoredMessages

OUT : 0 - Error occured
      1 - NO Error occured
Used in:    36_02.abi


=head2 SearchErrorReport

 SearchErrorReport();

SUBROUTINE  : SearchErrorReport
DESCRIPTION : Searches for ErrorReport from BTS in Abisco. Generates HandleError if
              the conditions in the input hash is not met.

IN  :     Hash containing the following key(s):
            ExpectErrorReport - Indicator if an ErrorReport is expected on not.
                                Valid values: 'TRUE' / 'FALSE'. Default 'FALSE'.
            Timeout           - Timeout in sec
            CauseValues       - The expected cause value of the ErrorReport.
            ShowPrintouts     - Enables or disables debug printouts.
                                Valid values: 'TRUE' / 'FALSE'. Default 'FALSE'.
OUT :     None


=head2 SendBCCHInformation

 SendBCCHInformation();

SUBROUTINE  : SendBCCHInformation
DESCRIPTION : Send one BCCH System Information command to the BTS on Abis and compare the
              recieved message and cause value with the expected.

IN  :      Hash containing the following key(s):
              BTS                   - Abisco connection parameter
              ChAct                 - Channel Activation parameter
              TG                    - TG number
              TRXC                  - TRXC
              TS                    - Timeslot
              ChType                - Channel Type
              SystemInfoType        - System Information Type Command (S1, S2, S2Bis, ... etc
              SystemStructInfoType  - System Information Type in parameter struct (usually
                                      the same as SystemInfoType other than in error-cases.)
              SyntaxCheck           - Indicator if a syntax check on the parameter values should
                                      be performed on the input parameters. Set to 'Off' in
                                      error cases where the parameters are incorrect.
              ActType               - Channel activation type
              BTSExpectedResult     - Expected result message from BTS
              AbisInterfaceMessage  - Expected message from Abis interface
              AbisCauseValue        - Expected Cause Value associatied with Abis message
              AbisSupressTimeout    - Indicate that Error messages due to timeout on
                                      the Abis interface should be suppressed
              Timeout               - Time in sec before timeout when waiting for a
                                      message on the Abis interface
OUT :     None


=head2 SendBitStream

 SendBitStream();

SUBROUTINE  : SendBitStream
DESCRIPTION : Send a BitStream command to BTS over Abis

IN  :     Hash containing the following key(s):
            TGId     - TG Id
            TRXC     - TRXC nr
            PCM_SAPI - PCM SAPI (default 62)
            Data     - Reference to matrix to send command

OUT :     Hash with the command response


=head2 SendSMSBTS

 SendSMSBTS();

SUBROUTINE  : SendMultiPurposeReqBTS
DESCRIPTION : To send a downlink message.

IN  :      BTS         => $BTS,
            SAPI        => undef,
            LinkId      => undef,
            TG          => $TG,
            TRXC        => $TRXC,
            TS          => $TS,
            ChType      => $ChType,
            NABit       => 0 ,
OUT :      None


=head2 SendSMSBroadcastCommand

 SendSMSBroadcastCommand();

SUBROUTINE  : SendSMSBroadcastCommand
DESCRIPTION : Send a SMS Broadcast Command message to the BTS

IN  :     Hash containing the following key(s):
            TGId         - TG nr
            TRXC         - TRXC nr
            TS           - Timeslot
            ChType       - Channel type
            SlotNo       - Message Slot Nr
            LastBlock    - Last sequence block
            CommandType  - Message Command Type
            SMSCBMsg     - Reference to message array (88 byte)
            SchedulingPeriodLength - Message scheduling period length
            SyntaxCheck  - Turns on/off message syntax check (Let incorrect
                           messges be sent using Abisco)
            StoreMessage - If 'TRUE', messages are stored in a TX queue until
                           the sub SendStoredMessages() are called.
            EP1_TIMER    - Delay between each block sent.

OUT :     Response from Abisco


=head2 SendSMSBroadcastRequest

 SendSMSBroadcastRequest();

SUBROUTINE  : SendSMSBroadcastRequest
DESCRIPTION : Send a SMS Broadcast Request message to the BTS

IN  :     Hash containing the following key(s):
            TGId         - TG nr
            TRXC         - TRXC nr
            TS           - Timeslot
            ChType       - Channel type
            LPD          - Should always be set to 1 (01b)
            SeqNo        - Message sequence number
            SMSCBMsg     - Reference to message array  (22 byte)
            SMSCBElementId  - Element ID for SSM Command Broadcast. Should be 36 (0x24)
            StoreMessage - If 'TRUE', messages are stored in a TX queue until
                           the sub SendStoredMessages() are called.

OUT :     Response from Abisco


=head2 SendStoredMessages

 SendStoredMessages();

SUBROUTINE  : SendStoredMessages
DESCRIPTION : Sends all messages that are stored in the TX queue by being
              sent with the parameter Behaviour.EP1_BEH = 'TXQUEUE'

IN  :     Hash containing the following key(s):
            IssueUNACK  - Indicate if an UNACKNOWLEDGED_MESSAGE_SENT should be
                          sent after each transmitted message.
                          Valid values 'Yes' / 'No'. Default 'No'.

OUT :     Response from Abisco


=head2 SendSysinfoMessages_SI3SpecialConfiguresMSSIM

 SendSysinfoMessages_SI3SpecialConfiguresMSSIM();

SUBROUTINE  : SendSysinfoMessages_SI3SpecialConfiguresMSSIM
DESCRIPTION : Sends system information messages according to input vectors.
              Sysinfo 3 is a special case - Enables all SI messages (without filtering) on the MSSIM,
              and also configures the MSSIM to enable reception of SI messages based on the latest SI3 message.

IN  :     SITypes               =>    ['3'],                    # Vector (use an array reference when calling, "SITypes => \@lSITypes")
          MessageStrPrefix      =>    'BCCHInfoP2_',            # Scalar
          BcchMap               =>    'Normal',                 # Scalar, although hard-coded 'Normal' for SI3
          SI3_CCCHConfirmed     =>    1                         # Scalar, only used for SI3
          EnableDebugPrintouts  =>    undef                     # undef or anything else
OUT :     None.


=head2 Send_SysInfo

 Send_SysInfo();

SUBROUTINE  : Send_SysInfo
DESCRIPTION :

Syntax   : Send_SysInfo(TGId => $TG{TGNr}, TS => 0, TRXC => $TRXC, Info => $Info
                        ChType => 'BCCH', BcchMap => 'Normal', TXInteger => 14,
                        MaxRetrans => 2, RadioLinkTimeout => 1, RXLevMin => 35);
           If the optional parameter "SIP2_3_CCCHConfirmed" is present, it is used
              in the BCCHInfoP2_3 message. Otherwise it is ignored.

Change log:   The MessageType2 for BCCHInfoP2_2quater was changed from 25 to 7
              (7 is the correct value in the IWD browser).



=head2 SeqNrBuilder

 SeqNrBuilder();

SUBROUTINE  : SeqNrBuilder
DESCRIPTION : Build the header byte for a SMS Command over air interface

IN  :     Hash containing the following key(s):
            LB     - LastBlock indicator
            LBD    - (must be 01)
            Block  - Block sequence no

OUT :     Resulting SeqNrHeader


=head2 SetAllSIMSSIM

 SetAllSIMSSIM();

SUBROUTINE  : SetAllSIMSSIM
DESCRIPTION : Activate all System information in the MSSIM (remove filtering).
              Note that this command _also_, automatically, makes the MSSIM
              listen for the system information configuration that is carried
              by System information type 3. (Because the flag CCauto = 1.)

IN  :     None
OUT :     None


=head2 SetBCCH

 SetBCCH();

SUBROUTINE  : SetBCCH
DESCRIPTION : Set configuration for BCCH

IN  :     $BTS, BS_AG_BLKS_RES, BCCHType
OUT :     None


=head2 SetBCCHType

 SetBCCHType();

SUBROUTINE  : SetBCCHType
DESCRIPTION : Set BCCHType from par hash (NCOMB or COMB)

IN  :     $BTS
OUT :     None


=head2 SetBehaviourMode

 SetBehaviourMode();

SUBROUTINE  : SetBehaviourMode
DESCRIPTION : Set the BG behavoiur mode using BG.SetBehaviourMode
              See Abisco IWD for further info.

IN  :     Hash containing the following key(s):
            BGCommand   - BG command parameter. See Abisco IWD for further info.
            BGBehaviour - BG behavoiur parameter. See Abisco IWD for further info.

OUT :     Response from Abisco


=head2 SetSMSCBReporting

 SetSMSCBReporting();

SUBROUTINE  : SetSMSCBReporting
DESCRIPTION : Set the SMSCBReporting ON or OFF

IN  :     Hash containing the following key(s):
            TGId           - TG nr
            TRXC           - TRXC nr
            TS             - Timeslot
            SMSCBReporting - 'On' or 'Off'

OUT :     None


=head2 StoreTG

 StoreTG();

SUBROUTINE  : StoreTG
DESCRIPTION : Store TG parameters. This subroutin shall be followed by ResetTG

IN  :
OUT :     {Cell}, {TG}, {MCTR};
Sample:   %StoredTG = StoreTG();


=head2 SysInfoOff

 SysInfoOff();

SUBROUTINE  : SysInfoOff
DESCRIPTION : Turns off "SI5", "SI5BIS", "SI6", "MI"

IN  :     $BTS, $TG, $TRXC
OUT :     None


=head2 UpdateCell

 UpdateCell();

SUBROUTINE  : UpdateCell
DESCRIPTION :

Syntax   : UpdateCell(TGId => $TG{TGNr}, CellNr => 0, BSAG => $BSAG, BSPA => $BSPA
                       BCCHType => 'NCOMB');



=head2 UpdateTG

 UpdateTG();

SUBROUTINE  : UpdateTG
DESCRIPTION :

Syntax   : UpdateTG(TGId => $TG{TGNr});




=cut

=head1 NAME

subs_bspower


=head1 DESCRIPTION

Document number: 147/190 55-CAH 161 1607/1
MODULE      : subs_bspower.pm
DESCRIPTION : This package contains the subfunctions and variables used
              with the main test case
COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE        NAME              REVIEW          COMMENT
A     20101001    Syntronic AB,     Syntronic AB,   File created. Approved UABTOH.
                  Torbjörn Wilund   Fredrik Lie
B     20110614    XDAVMEL           XGUSTPE,        Added functions: CalcFreqListElement CalcFreqList
                  Niclas Östberg    Martin Wikström                  ConfigReadMO BSPowerControl SelectARFCN
                                                                     EnableMO DisableMO GetFreqBand GetTSCparameters
                                                    Restored GetTRXValuesMSSIM and renamed VAMOS version to
                                                    GetTRXValuesMSSIM_VAMOS.
                                                    Updated GetTRXValues_Parser to be compatible with newer version of MSSIM.
                                                    Updated and fixed bug in changeTSonBTSforSDCCH
                                                    Added functions: LAPDmEstablishRequestMSSIM CheckL3Data GetBSPower
                                                                     SendBitstream GetChan
                                                    changed from using inputhash to local variables in all LADPm functions
                                                    Updated GetTRXNominalLevel to take Stabilization time parameter
                                                    Added DeactivateCSData, ActivateCSData, ClearMSSIMBuffer, SetNominalMinPower,
                                                    GetPowerLevel, ReadPowerSettingsFile

C   20120228      XTOBSEM           XPRRANA         Changed the script to use assert from dBLog and added support for RUS in
                                                    GetPowerLevel
                  XDAVMEL           XTOBSEM         Fixed small bug in LAPDmEstablishRequestMSSIM
                  XTOBSEM           XSOFFRO         Added Perl Critic and Diagnostics
                  XTOBSEM           XTOBSEM         Updated sub to import $TG, $TRXC, $TRXList and $Cell from
                                                    SubInit (HP36222)
                  XTOBSEM           XSOFFRO         Added waitForCellSync to GetTRXNominalLevel
                  EDAMELI           XTOBSEM         Removed ReceiverDiversity from TSConfig (does not need to changed)
                  XNAVNAS           XSOFFRO         Ran PerlCritic. Removed unnecessary code from GetTRXValuesMSSIM.
D   20120906      XANSBEM           XNAVNAS         Merged subs_bspowerchreact.pm with subs_bspowerchact.pm to subs_bspower.pm
                                                     Added CheckBSPowerWithMSSIMLog, StoreTG and ResetTG
PE1 20121016      XANSBEM           XNAVNAS         Updated TSConfig
PE2 20121105      XANSBEM           XMAREDV         Updated StoreTG and ResetTG to support several MCTR instances and several Cells.
PE3 20121220      XANSBEM           XMAREDV         Added subroutines VerifySIDTCHPowerLevel, VerifyNoDownlinkSpeech, CheckSIDCodeWord
                                                     IsInSIDPosition, VerifyDownlinkSpeech, ReleaseAllOpenChannels
PE4 20121221      XMAREDV                           Added subroutines GetVPO, CreateMS, DeleteMS and GetTCHRefPower.
                                                     Updated subroutines TSConfig, resetNominalPower and SetNominalMaxPower
PE5 20130126	    XHENRMA						XMAREDV         Updated resetNominalPower, SetNominalMaxPower and TSConfig


=head1 REQUIRES

L<dbLog> 

L<speechfunc> 

L<wireshark> 

L<mssim_sub> 

L<mssim> 

L<mssim_def> 

L<lsuConfig> 

L<Hash::Util> 

L<PerlFunc> 

L<English> 

L<Carp> 

L<AbiscoFunc2> 

L<subinit_bspower> 

L<Abisco_Connection> 

L<diagnostics> 


=head1 METHODS

=head2 ActivateCSData

 ActivateCSData();

Subroutine: ActivateCSData
Purpose:    To activate sending of CS Data in TSS
Input:
Output:      0=Ok, 1=Error


=head2 BSPowerControl

 BSPowerControl();

Send a BS Power Control Message


=head2 CCCHReconfMSSIM

 CCCHReconfMSSIM();

Subroutine: CCCHReconfMSSIM
Purpose: To turn CCCH signaling off and on in MSSIM
Input: None
Output: None


=head2 CalcFreqList

 CalcFreqList();

Calculates a Frequency List for TSConfiguration acc. to IWD
In: ARFCN => $ARFCN - Pointer to array containing all ARFCNs in
                    desired order (required)
    TX => $TX - Pointer to array containing all TXs in desired order
    RX => $RX - Pointer to array containing all RXs in desired order
    TRXC => $TRXC - if this is given, all TX and RX values will be
                            set to $TRXC
    Note: EITHER TX+RX OR TRXC must be given!
          All input arrays must contain the same number of elements!

    Optional: Hop => <Nr. of Hopp-Frequencies, 1->No Hopping>


=head2 CalcFreqListElement

 CalcFreqListElement();

Calculates the Frequency List out of given ARFCNs in the argument
Call: CalcFreqElement (TX=>$TX, RX=>$RX, ARFCN=> <ARFCN>)


=head2 ChActBTS

 ChActBTS();

Subroutine: ChActBTS
Purpose:    To activate a channel in the BTS, uses par hash variables
Input:      $BTS (Abisco connection parameter)
            $ChAct
            $TG,
            $TRXC,
            $TS,
            $ChType,
            $ActType,
            $TypeOfCh,
            $ChRate,
            $AlgOrRate,
            $BSPower (Pn)
            $ExpectedMsg
            $ExpectedErrCode
Output:     None


=head2 ChActMSSIM

 ChActMSSIM();

Subroutine: ChActMSSIM
Purpose:    To activate a channel in the MSSIM, sets the CcId package variable
Input:      Bypass       => 0,
            RxAcchOn    => 1,
            AllSacchSI  => 0,
            RToutOff    => 0,
            RxTrfcOn    => 0,
            UndecFrm    => 0,
            TrxNum      => 0,
            L2hdr       => 2,
            Data        => [@Meas],
            TG          => $TG,
            TRXC        => $TRXC,
            TS          => $TS,
            PDCHMode    => "",
            ChType      => $ChType,
            ChRate      => $ChRate,
            TypeOfCh    => $TypeOfCh,
            AlgOrRate   => $AlgOrRate,
            AMRCodec    => $AMRCodec
            Cell        => $eCell
            OverrideChnComb => undef            (This is a workaround, see mssim_sub.pm)
            OverrideSub     => undef            (This is a workaround, see mssim_sub.pm)
Output:     $CcId


=head2 ChActMSSIMVamos

 ChActMSSIMVamos();

Subroutine: ChActMSSIMVamos
Purpose:    To activate a channel in the MSSIM, VAMOS
Input:      Hash containing the following key(s):
              AMRCodec    -   AMR Codec
              ChRate      -   Channel rate
              TG          -   TG number
              TRXC        -   TRXC
              TS          -   Timeslot number
              ChType      -   Channel Type
              ActType     -   Activation type
              TypeOfCh    -   Type of Channel
              AlgOrRate   -   GSM algorithm or Rate
              ChAct       -   Channel Activation type
              AlgId       -   Algorithm ID
              Bypass      -   Bypass flag
              Ref         -   Ref
              AllSacchSI  -   Indicator if all SACCH messages should be recieved
                              or just changes
              MsId        -   MSSSim ID
              Timeout     -   Timeout

Output:     CcId


=head2 ChRelBTS

 ChRelBTS();

Subroutine: ChRelBTS
Purpose:    To release radio traffic channels or control channels in the BTS
Input:      $BTS (Abisco connection parameter)
            $TG,
            $TRXC,
            $TS,
            $ChType
Output:     None


=head2 ChRelMSSIM

 ChRelMSSIM();

Subroutine: ChRelMSSIM
Purpose:    To release a channel in the MSSIM, uses the package variable CcId to
            identify the opened channel
Input:      CcId    => $gCcId,
            Timeout => Timeout value
Output:     None


=head2 CheckBSPowerWithMSSIMLog

 CheckBSPowerWithMSSIMLog();

SUBROUTINE  : CheckBSPowerWithMSSIMLog
DESCRIPTION : Checks BS power by creating and analysing an LSU log
              Wireshark.pm needs an update for this subroutine to work
              (current version released in Abisco version R43A)

IN  : ConfigFile
      MsSIM_LSU_FileName
OUT : Hash containing power levels for timeslots and subtimeslots


=head2 CheckL3Data

 CheckL3Data();

Subroutine:  CheckL3Data
Purpose:    To compare received L3Data to expected L3Data
Input:      Expected L3Data
             Received L3Data
Output:     Returns 1 if data differs, else 0


=head2 CheckSIDCodeWord

 CheckSIDCodeWord();

SUBROUTINE  : CheckSIDCodeWord
DESCRIPTION : Check SID Codeword and Comfort Noise on downlink Um frame

IN  : Hash containing the following key(s):
             Message    - Packed traffic frame, as $RESP{Message} recieved from lsuReadWLog
             SpType     - FR, EFR or HR

OUT : 1 if SID Frame      (SID Codeword and Comfort Noise OK)
      0 if NOT SID Frame


=head2 ClearMSSIMBuffer

 ClearMSSIMBuffer();

Subroutine: ClearMSSIMBuffer
Purpose:    Remove all messages in the MSSIM buffer
Input:      None
Output:     None


=head2 CompareArrays

 CompareArrays();

Subroutine:  CompareArrays
Purpose:     To compare two Arrays named Expect and Received
Input:      Two arrays
Output:      Returns 0 if data differs, else 1


=head2 CompareHash

 CompareHash();

Subroutine: CompareHash
Purpose:    Compares two hashes by using recursion
Input:      Expected    Expected hash table
            Received    Hash table to compare Expected to
            Debug       Set to 1 to get debug printouts

Output:     0 - tables DOESNT match
            1 - tables match


=head2 ConfigReadMO

 ConfigReadMO();

FUNCTION : ConfigReadMO
COMMENT  : Get current parameters for wanted MO
Syntax   : ConfigReadMO(MO => $MO);
IN       : MO type
OUT      : %lResp


=head2 CreateMS

 CreateMS();

SUBROUTINE  : CreateMS
DESCRIPTION : Create an MS on MSSIM

IN  : Hash containing the following key(s):
              $MsId  - MSSIM ID
OUT : -


=head2 DataRequestMulti

 DataRequestMulti();

FUNCTION : DataRequestMulti
COMMENT  :

Out      : %Resp


=head2 DeactivateCSData

 DeactivateCSData();

Subroutine: DeactivateCSData
Purpose:    To activate sending of CS Data in TSS
Input:
Output:      0=Ok, 1=Error


=head2 DeleteMS

 DeleteMS();

SUBROUTINE  : DeleteMS
DESCRIPTION : Delete existing MS on MSSIM

IN  : Hash containing the following key(s):
              $MsId  - MSSIM ID
OUT : -


=head2 DisableMO

 DisableMO();

FUNCTION : DisableMO
COMMENT  : Sends DisableRequest to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks DisableResult.
IN           : Optionally a reference to a Hash
           containing one or more of the following
           keys: TRXC, MO, MOState, ASOInst, ReasonCode, ResultCode
           ASOInst, INST
Out           : None


=head2 EnableMO

 EnableMO();

FUNCTION : EnableMO
COMMENT  : Sends EnableRequest to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks EnableResult.
IN             : Optionally a reference to a Hash containing
           one or more of the following
           keys: TRXC, MO, MOState, ASOInst
OUT             : None


=head2 EstReqBTS

 EstReqBTS();

Subroutine: EstReqBTS
Purpose:    To send Establish Request from BTS and receive
             the expected response from BTS on SAPI3
Input:      BTS => $BTS,
            SAPI => 0,
            Expected => 'EstablishConfirm',
            LinkId => 'FACCH/SDCCH',
            TG   => $TG,
            TRXC => $TRXC
            TS => $TS,
            ChType => $ChType,
            TIMER1=>10000,
            NABit  => 0,
Output:     None


=head2 EstablishReqMSSIM

 EstablishReqMSSIM();

Subroutine: EstablishReqMSSIM
Purpose:    To send Establish Request to MSSIM and receive EstablishIndication
            from Abisco
Input:      Hash containing the following key(s):
             BTS     - Abisco connection parameter
             SAPI    - Sapi value
             CHAN    - Channel state
             L3DATA  - Reference to L3Data array

Output:     None


=head2 GetBSPower

 GetBSPower();

Subroutine: GetBSPower
Purpose:    Get BS Power parameter (chx_AvgRfl)
Input:      TS
Output:     BSpower at Ch x


=head2 GetFreqBand

 GetFreqBand();

Get the frequency band


=head2 GetPowerLevel

 GetPowerLevel();

Subroutine: GetPowerLevel
Purpose:    Get PnMax, PnMin or Pmin
Input:      Level => PnMax, PnMin or Pmin
Output:     Desired power level (standard is PnMax)

Comment:    Values for PnMin and PnMax is extracted from BTS Parameter Limitations
            (17/1551-HRB 105 21) and values for Pmin is extracted from
            Requirements Specifications of different base stations.


=head2 GetTCHRefPower

 GetTCHRefPower();

SUBROUTINE  : GetTCHRefPower
DESCRIPTION : Takes a reference value for the nominal power level.

IN  : TRXC
OUT : Reference power


=head2 GetTRXValuesMSSIM

 GetTRXValuesMSSIM();

Subroutine: GetTRXValuesMSSIM
Purpose:    Get TRX values from MSSIM (gsmbSrvTRX_INFO_CMD)
Input:      Cell => ,
            TRXC => ,
            Timeout =>
Output:     %lResp hash


=head2 GetTRXValuesMSSIM_VAMOS

 GetTRXValuesMSSIM_VAMOS();

Subroutine: GetTRXValuesMSSIM_VAMOS
Purpose:    Get TRX values from MSSIM (gsmbSrvTRX_INFO_CMD)
Input:      Hash containing the following keys
              Cell        - MSSIM cell
              TRXC        - TRXC to measure on (as seen from the MSSIM)
              Timeout     - Message timeout
              Channel     - Channel number (optional. The BSPower key in the result hash
                            will have the BSPower of the channel that is given here)
              VAMOS       - Indiactor if this is a VAMOS pair or not
Output:     Hash containing the following keys:
              {Resp}      - 'Ok' if successfull measurement, otherwise an error message
              {AvgRfl}{X} - Average BSPower for channel X
              {BSPower}   - BSPower for the channel specified by 'Channel' in the input hash



=head2 GetTRXValues_Parser

 GetTRXValues_Parser();

Subroutine: GetTRXValues_Parser
Purpose:    Extracts all information from MSSIM response and
            parses it into a responsehash
Input:      LSU response (Raw format)
Output:     ResponseHash

Changes:    2010-12-03: Updated to be compatible with newer MSSIM version



=head2 GetTSCparameters

 GetTSCparameters();

Subroutine: GetTSCparameters
Purpose:    To get the appropriate TSC_SET and TSC depending
            of wanted ChType when using VAMOS
            TSC on MSSIM is a combination of TSC_SET and TSC
Call:       %Resp = GetTSCparameters(ChType => $ChType);
Input:      ChType
            Valid parameters: Bm
                              Bm_1
                              Lm/0
                              Lm/1
                              Lm/0_1
                              Lm/1_1
Output:     Hash containing TSC_SET
                            TSC
                            MixingOrder
                            MSCapability
                            MSSIM_TSC


=head2 GetVPO

 GetVPO();

SUBROUTINE  : GetVPO
DESCRIPTION : Creates an array for use in TSConfig based on the table @VPO

IN  : MinSPIR
      MSCapability
OUT : VPO array


=head2 IsInSIDPosition

 IsInSIDPosition();

SUBROUTINE  : IsInSIDPosition
DESCRIPTION : Check if FrameNumber is in SID posistion

IN  : Hash containing the following key(s):
             FN         - Frame number
             SpType     - FR, EFR or HR

OUT : 1 if SID Position
      0 if NOT SID Position


=head2 LAPDmCheckReceived

 LAPDmCheckReceived();

Subroutine: LAPDmCheckReceived
Purpose:    Check data in frames Received on LAPDm
Input:      NR from ReceiveLAPDm
             Expected NR
             NS from ReceiveLAPDm
             Expected NS
             PF from ReceiveLAPDm
             Expected PF
             CR from ReceiveLAPDm
             Expected CR
             L from ReceiveLAPDm
             Expected L
             M from ReceiveLAPDm
             Expected M
             Frame type from ReceiveLAPDm
             Expected frame type
             Data from ReceiveLAPDm as ref (\@Data)
             Expected Data as ref(\@ExpectedData)
Output:     None


=head2 LAPDmEstablishRequestMSSIM

 LAPDmEstablishRequestMSSIM();

Subroutine: LAPDmEstablishRequestMSSIM
Purpose:    Establish link between MSSIM and BTS, LAPDM Protocol
Input:      $BTS
            $SAPI
Output:     None


=head2 LAPDmReceive

 LAPDmReceive();

Subroutine: LAPDmReceive
Purpose:    To receive a LAPDm frame
Input:      Chan      (SDCCH, SACCH or FACCH)
Output:     $Resp     (Response = "Timeout", "I", "RR", RNR", "REJ", "SABM", "DM", "UI", "DISC" or "UA"
            N(R)      (Receive Sequence Number)
            N(S)      (Send Sequence Number)
            P/F       (Poll/Final bit)
            LPD       (Link Protocol discriminator)
            api       (Service Access Point)
            C/R       (Command/Response)
            EA        (Address Extension Bit)
            L         (Length of Information field)
            M         (More bit)
            EL        (Length Extension bit)
            Fn        (Frame Number)
            Data      (Information Field)


=head2 LAPDmSend

 LAPDmSend();

Subroutine:    LAPDmSend
Purpose:       To send a LAPDm frame
Input:         $Chan      (SDCCH, SACCH or FACCH)
               $MsPower  (Only applicable for SACCH)
               $TA        (Timing advance, only applicable for SACCH)
               $Cmd       (Command = "I", "RR", RNR", "REJ", "SABM", "DM", "UI", "DISC" or "UA"
               N(R)       (Receive Sequence Number)
               N(S)      (Send Sequence Number)
               P/F       (Poll/Final bit)
               SAPI      (Service Access Point)
               C/R        (Command/Response)
               M          (More bit)
               EL        (Length Extension bit)
               EA        (Address Extension Bit)
               refData      (Information Field)
               CcId      => $gCcId
Output:        None


=head2 RadioChReleaseCommand

 RadioChReleaseCommand();

Subroutine: RadioChReleaseCommand
Purpose:    Cleans all radiochannels connected to TG
Input:      TG
            TRXC
Output:     TC result value


=head2 ReadPowerSettingsFile

 ReadPowerSettingsFile();

Subroutine: ReadPowerSettingsFile
Purpose:    Get PnMax, PnMin and Pmin from user editable text file
Input:      None
Output:     If file not found: ( Result => Use_Standard )
            If file found:     Hash containing PnMax, PnMin and Pmin as read
                               from PowerSettings.cfg



=head2 ReceiveAbisco

 ReceiveAbisco();

Subroutine: ReceiveAbisco
Purpose:    To receive a spontaneous message from Abisco
Input:      Timeout value
             Expected Message
             L3Data of expected message
Output:     None


=head2 ReceiveAbiscoMessage

 ReceiveAbiscoMessage();

Subroutine: ReceiveAbiscoMessage
Purpose:    To receive a spontanious message from Abisco
Input:      BTS (Abisco connection parameter)
            Timeout  => undef,
            Expect    => undef,
            Supress   => "SupressError",
Output:     Received Data hash


=head2 ReceiveMSSimMsg

 ReceiveMSSimMsg();

Subroutine: ReceiveMSSimMsg
Purpose:    Receive msgs on the MSSim until one is found that matches the
            in Expected hash or timeout occurs

Input:      Timeout       - 0.., time to look for msg in seconds
            SupressError  - 1/0, supress croak On/Off
            ErrorMsg      - if this string is defined it will be printed if an
                            error occurs
            Expected      - Hash containing keys to look for in received msg

Output:     0 - Message matching Expected's keys NOT found
            1 - Message matching Expected's keys found


=head2 ReleaseAllOpenChannels

 ReleaseAllOpenChannels();

SUBROUTINE  : ReleaseAllOpenChannels
DESCRIPTION : Release Channel activated in Payload

IN  : ChannelName - CSData, PSData, Speech, All
OUT :


=head2 ResetTG

 ResetTG();

SUBROUTINE  : ResetTG
DESCRIPTION : Resets the TG to the one stored in Stored TG
              (copied from subs_Broadcast)

IN  :     Cell, TG, MCTR
OUT :     Will die if errors found
Sample:   ResetTG(%StoredTG);


=head2 RestartBTS

 RestartBTS();

Subroutine:   RestartBTS
Purpose:      Restarting the BTS, make sure that the parameters set during restart
              complies with your specific TC
Input:        BTS (Abisco connection parameter)
              TGId
              TRXList (array)
Output:


=head2 RoundFloat

 RoundFloat();

Subroutine: RoundFloat
Purpose:    Rounds the first argument to (the second argument) number of decimal places.
Input:      Float     (Value to round)
            Decimals  (Number of decimal digits, >= 0)
Output:     Rounded float


=head2 SelectARFCN

 SelectARFCN();

FUNCTION : SelectARFCN
COMMENT  : Select a random ARFCN out of the given Band
IN       : $Band (e.g. GSM900P), Reference to list of not allowed ARFCNs,
           Number of ARFCNs to be calculated
OUT      : @Arfcn


=head2 SetNominalMaxPower

 SetNominalMaxPower();

Subroutine: SetNominalMaxPower
Purpose:    Set nominal power to max power
Input:      TG
            TRXC
Output:     backupValues => TRXno => NominalPower


=head2 SetNominalMinPower

 SetNominalMinPower();

Subroutine: SetNominalMinPower
Purpose:    Set nominal power to in power
Input:      TG
            TRXC
            PnMin (optional)
Output:     backupValues => TRXno => NominalPower


=head2 StoreTG

 StoreTG();

SUBROUTINE  : StoreTG
DESCRIPTION : Store TG parameters. This subroutin shall be followed by ResetTG
              (copied from subs_Broadcast)

IN  :
OUT :     {Cells}, {TG}, {MCTR};
Sample:   %StoredTG = StoreTG();


=head2 TSConfig

 TSConfig();

FUNCTION : TSConfig
COMMENT  : Reconfigure TS
Syntax   : TSConfig(TS => $TS);
IN       :
OUT      : %lResp


=head2 VerifyDownlinkSpeech

 VerifyDownlinkSpeech();

SUBROUTINE  : VerifyDownlinkSpeech
DESCRIPTION : Verify frames sent downlink on Um

IN  : Hash containing the following key(s):
             MSSIMLog   - MSSIM log file (.lsu)
             SpType     - FR, EFR or HR
             TXPower    - Expected TXPower, 'On' or 'Off'
             SIDFrames  - Expected presens of SID frames, 'Present' or 'Not_Present'

OUT : 0 if OK, Error text if error found


=head2 VerifyNoDownlinkSpeech

 VerifyNoDownlinkSpeech();

SUBROUTINE  : VerifyNoDownlinkSpeech
DESCRIPTION : Verify that no frames are sent downlink on
              (Only developed for half rate)

IN  : Hash containing the following key(s):
             MSSIMLog   - MSSIM log file (.lsu)
             TS         - Timeslot
             SubTS      - Subtimeslot

OUT : 0 if OK, Error text if error found


=head2 VerifySIDTCHPowerLevel

 VerifySIDTCHPowerLevel();

SUBROUTINE  : VerifySIDTCHPowerLevel
DESCRIPTION : Verify the Power level for SID frames and TCH frames

IN  : Hash containing the following key(s):
             Message    - Packed traffic frame, as $RESP{Message} recieved from lsuReadWLog
             SpType     - FR, EFR or HR

OUT : 0 if OK
      Error if not OK


=head2 changeTSonBTSforSDCCH

 changeTSonBTSforSDCCH();

Subroutine: changeTSonBTSforSDCCH
Purpose: To change TS configuration used in all TC with SDCCH
Input:
Output:None


=head2 changeTSonBTSforTCH

 changeTSonBTSforTCH();

Subroutine: changeTSonBTSforTCH
Purpose: To be able to setup traffic channels on BTS TS
Input:
Output:None


=head2 makeAscii

 makeAscii();

Subroutine: makeAscii
Purpose:    Convert an array with chacters to printable Ascii. Quit if null found
Input:      Character array
Output:     Printable ascii string


=head2 resetMSSIM

 resetMSSIM();

Subroutine: resetMSSIM
Purpose: Resets MSSIM
Input: None
Output: None


=head2 resetNominalPower

 resetNominalPower();

Subroutine: resetNominalPower
Purpose:    Set nominal power to max power
Input:      TG
            TRXC
Uses:       backupValues=> TRXno => NominalPower
Output:



=cut

=head1 NAME

Subs_Caco


=head1 DESCRIPTION

Document number: 125/190 55-CAH 161 1607/1 Uen
MODULE      : Subs_Caco.pm
DESCRIPTION : This program provides defines and subfunctions for Call Control tests

COPYRIGHT © : ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV DATE      NAME           REVIEW            COMMENT
A   20100927  ERATZIS,
              ERAKOSI        Syntronic AB/     File created based on old caco.abi.
              Syntronic AB/  Anders Jokobsson  Approved UABTOH
              Fredrik Lie
B   20101008  Syntronic AB/  XWIKMAR           Updated with dbLog. Added ClearMSSIMBuffer. Updated CheckIfMeasReportInMeasResult with new log settings.
              David Melin                       Replaced WriteLog calls with HandleLogg. Approved UABTOH.
C   20110408  XMABENT        XDAVMEL           Updated ReceiveMeasurmentResultNormal:MergeWork work of parallell development.
                                                Removed last existing lines of writelog logging
                                                Removed use carp (not used in sub)
                                                Removed use user (not used in sub)
                                                Updated ConnectToMSSIM inorder to allow several MsId:s
                                                Updated RestartBTS() Setting prevented other than TDMmode to be used.
                                                Updated SetTG() to handle SC mode
                                                Updated ActivateAndEstablish and ChRelMSSIM to handle several CcId
                                                Added GetTSCparameters MSSIM vamos implementation
                                                Updated ChActBTS() to call GetTSCparameters
                                                Updated ChActMSSIM() to call GetTSCparameters
                                                Updated ActivateAndEstablishExistingChannel due to FTS update
                                                Updated ActivateAndEstablishExistingChannel so that one can choose whether to use MSSIM or not
                                                Updated SetTG to support ExtendedRange
                                                Updated ChActBTS_PDCH so that one could check AckType and CauseValue
                                                Corrected ChActBTS so that one could check AckType and CauseValue
                                                Uppdated ChActBTS so that one could choose to make an Reactivation. Old setting in macro.
                                                Uppdated ActivateAndEstablishExistingChannel so that one could choose whether to use VAMOSparameters or not. Old setting in macro.
                                                : Added ActivateSpeech : Added DeactivateSpeech : Added StartLoopMSSIM : Added StopLoopMSSIM
                                                Merged G10B and G11B versions
                                                Added GetTRXValuesMSSIM PrepareChActData SendBitstream
                                                Added CreateParamHashSpeech GetChannelInfoHash ConvertMSSIMstatistics
                                                Updated PrepareChActData to solve TR HN30323, ChActBTS and ActivateAndEstabl.. updated with DTXd parameter
                                                Added CreateSpeechPatternFile MSSIMTransferFile
                                                Added CreateMS & DeleteMS : Fixed ChRelMSSIM :

D   20110520  XMABENT        XDAVMEL           Fixed mandatory parameter in SetTG_TCHConfig, Fixed printout on HandoverAccessMSSIM.
                                                Added Iterations to ReceiveMSSIM sub, Fixed printout in CheckifSysInfoMessages
E   20110620  XTOBSEM        XOSKRON           Added ResetTG
                                                Added StoreTG, GetMSSIMTRXValues, GetTRXValues_Parser, RoundFloat
                                                and Updated ResetTG
                                                Added support for MCTR in StoreTG and ResetTG
                                                Added support for custom TFConfigRequest in StoreTG and ResetTG HO23295
                                                Added support for custom TFConfigRequest and MCTR in SetTG
                                                Added support for custom TFConfigRequest and MCTR in SetTG_TCHConfig
F   20111012  XSOFFRO        XTOBSEM           To solve issues in updated TR HO28330:
                                                Explicitly imported variable $Cell fron package SubInit_Caco.
                                                Other updates:
                                                 Added function TimeSlotConfigure().
                                                 Minor syntax fixes (no change in functionality).
G   20120906  XANSBEM        XSOFFRO           Removed unused subroutines and variables
                                                Ran Perl-Critic and implemented ActiveTG
                                                Added SetAbisMode, ChangeTG, GetActiveCell
                                                Updated StoreTG, ResetTG, RadioChRel, SetTG, ConfigMORX,
                                                 DoTSConfigRequest, ChActBTS, RFChannelRelease, SetMeasurementReporting,
                                                 RecieveAbisco, DecodeWireSharkLog, CheckFillBitsInMessage and ChActBTS
G1  20120906  XNAVNAS        XSOFFRO           Updated ReceiveSpontMSSIM to correctly print data in HandleLogg message
                                                Updated DecodeWiresharkLog to remove unnecessary file creation
H   20121030  XMAREDV        XNAVNAS           Implemeted support for dynamic MCTR settings and added function CheckUMTraffic
PI1 20121101  XMAREDV        XANSBEM           Updated ChActBTS to support MinSCPIR
PI2 20121105  XMAREDV        XANSBEM           Solved TR HQ59716 and implemented support for multiple dynamic cells
PI3 20121121  XMAREDV        XHENRMA           Added SyntaxCheck parameter to ChActBTS()
PI4 20121203  XANSBEM        XMAREDV           Added comment in CheckIfMeasReportInMeasResult()
PI5 20121212  XMAREDV        XHENRMA           Added default value for MinSCPIR in ChActBTS()
PI6 20121213  XANSBEM        XNAVNAS           Added parameter PDCHOptionsStruct in ChActBTS_PDCH


=head1 REQUIRES

L<mssim_def> 

L<mssim_sub> 

L<mssim> 

L<Carp> 

L<English> 

L<Hash::Util> 

L<mssim_sub> 

L<lsuConfig> 

L<wireshark> 

L<HelpFunc> 

L<psdatafunc> 

L<packetfunc> 

L<PerlFunc> 

L<AbiscoFunc2> 

L<Abisco_Connection> 

L<dbLog> 

L<SubInit_Caco> 

L<diagnostics> 


=head1 METHODS

=head2 ActivateAndEstablishExistingChannel

 ActivateAndEstablishExistingChannel();

SUBROUTINE  : ActivateAndEstablishExistingChannel
DESCRIPTION : ChannelActivation
              General sub written as an absstraction layer
              between TC and ChActBTS and ChActMSSIM.
              TC calls this sub with a specific channelcombination
              request as a precondition to TC.
              Implemented to enable VAMOS TC implementation.
IN  :  Pre       => Channel combination identifier
       PreType   => Normal och HOP (AsyncHandover)
OUT :


=head2 ActivateSpeech

 ActivateSpeech();

SUBROUTINE  : ActivateSpeech
DESCRIPTION : Activate speech on an activated channel
IN  :   %Param
OUT :   None


=head2 AllocateICP

 AllocateICP();

SUBROUTINE  : AllocateICP
DESCRIPTION : To allocate ICP and CI numbers
IN  :  TG
       TRXC
       TS
       Downlink Encoding
       Uplink Encoding
       Width
OUT :  ICP
       CI


=head2 AllocateICPifTDMmode

 AllocateICPifTDMmode();

SUBROUTINE  : AllocateICPifTDMmode
DESCRIPTION : If TDM mode and Dynamic config it allocates ICP

IN  : $AbisMode
      $Config
      $DLEncoding
      $ULEncoding
OUT : $ICP
      $CI


=head2 CalcRoundTripDelayAbis

 CalcRoundTripDelayAbis();

SUBROUTINE  : CalcRoundTripDelayAbis
DESCRIPTION : Calculate the round trip time from PGSL-DLDATA-REQ to PGSL-DLDATA-IND

IN  :     Abislog - TSS Abis log object

OUT :     RTTMin  - RTT min
          RTTMax  - RTT max
          RTTAvg  - RTT average


=head2 ChActBTS

 ChActBTS();

SUBROUTINE  : ChActBTS
DESCRIPTION : To activate a channel in the BTS

IN  :  Hash containing the following key(s):
              AMRCodec    -   AMR Codec
              ChRate      -   Channel rate
              TG          -   TG number
              TRXC        -   TRXC
              TS          -   Timeslot number
              ChType      -   Channel Type
              ActType     -   Activation type
              TypeOfCh    -   Type of Channel
              AlgOrRate   -   GSM algorithm or Rate
              ChAct       -   Channel Activation type
              RFB         -
              AlgId       -   Algorithm ID
              AckType     -   Acknowledgement type (Ack/NAck)
              StartMode   -
              ICP         -
              CI          -
              MRver       -
              MultiRateConfig - Multirate configuration
              IgnoreBSPower - set to true to disble BSPower
              IgnoreChannelMode - set to true to disble ChannelMode struct
OUT :  None


=head2 ChActBTS_PDCHOptions

 ChActBTS_PDCHOptions();

SUBROUTINE  : ChActBTS_PDCHOptions
DESCRIPTION : To activate a PDCH channel with PDCHOptions struct in the BTS

IN  :  Hash containing the following key(s):
              ChAct       -
              AbisMode    -
              DLEncoding  -
              ULEncoding  -
              ICP         -
              CI          -
              PTA         -
              PAL         -
              PDCHOptionsStruct       -
OUT :  None


=head2 ChActBTS_PDCH_PTCCH

 ChActBTS_PDCH_PTCCH();

SUBROUTINE  : ChActBTS_PDCH_PTCCH
DESCRIPTION : To activate a PDCH channel in the BTS with PTCCH ON\OFF

IN  :  Hash containing the following key(s):
              ChAct       -
              AbisMode    -
              DLEncoding  -
              ULEncoding  -
              ICP         -
              CI          -
              PTA         -
              PAL         -
              PDCHOptionsStruct       -
OUT :  None


=head2 ChActMSSIM

 ChActMSSIM();

SUBROUTINE  : ChActMSSIM
DESCRIPTION : To activate a channel in the MSSIM

IN  : Hash containing the following key(s):
              AMRCodec    -   AMR Codec
              ChRate      -   Channel rate
              TG          -   TG number
              TRXC        -   TRXC
              TS          -   Timeslot number
              ChType      -   Channel Type
              ActType     -   Activation type
              TypeOfCh    -   Type of Channel
              AlgOrRate   -   GSM algorithm or Rate
              ChAct       -   Channel Activation type
              AlgId       -   Algorithm ID
              Bypass      -   Bypass flag
              Ref         -   Ref
              AllSacchSI  -   Indicator if all SACCH messages should be recieved
                              or just changes
              MsId        -   MSSSim ID
              Timeout     -   Timeout
OUT : CcId


=head2 ChActPacketMSSIM

 ChActPacketMSSIM();

SUBROUTINE  : ChActPacketMSSIM
DESCRIPTION : To activate a PDCH channel in the MSSIM with PTCCH ON\OFF
IN  :   %Param hash, see main program for description
OUT :   CcId


=head2 ChActPacketMSSIM_PTCCH

 ChActPacketMSSIM_PTCCH();

SUBROUTINE  : ChActPacketMSSIM_PTCCH
DESCRIPTION : To activate a PDCH channel in the MSSIM

IN  :     %Param hash, see main program for description
OUT :     CcId


=head2 ChCleanBTS

 ChCleanBTS();

SUBROUTINE  : ChCleanBTS
DESCRIPTION : To release all radio traffic channels or control channels in the BTS
             without asserting the responses

IN  :  BTS   => $BTS,
            TG    => $TG,
            TRXC  => $TRXC
            EP1_BEH   - EP1 Behaviour
OUT :  None


=head2 ChRelBTS

 ChRelBTS();

SUBROUTINE  : ChRelBTS
DESCRIPTION : To release a channel in the BTS

IN  : Hash containing the following key(s):
              ChType    - Channel type
              TG        - TG number
              TRXC      - TRXC
              TS        - Timeslot number
              EP1_BEH   - EP1 Behaviour
OUT :  None


=head2 ChRelMSSIM

 ChRelMSSIM();

Subroutine: ChRelMSSIM
Purpose:    To release a channel in the MSSIM
Input:      Hash containing the following key(s):
              CcId    - CC id
              Timeout - Timeout value
Output:     None


=head2 ChangeTG

 ChangeTG();

SUBROUTINE  : ChangeTG
DESCRIPTION : Alters the TG and cell parameters of the input hash in
              accordance to the desired abis mode (TDM or SC), channel rate
              and extended range. Output can be used with ResetTG.

IN  :     Reference to hash containing:
            Cell, TG, MCTR
          Desired abis mode
          Channel mode (array)
          Extended range, 'On' or 'Off'
OUT :     Altered hash


=head2 CheckCauseValue

 CheckCauseValue();

SUBROUTINE  : CheckCauseValue
DESCRIPTION : Compares the causevalue in response if a required value

IN  :  $RespCauseValue          Response from eg. "ChannelActivation..."
OUT :  0 if recieved value compares to required value
       1 if recieved value does not compares to required value


=head2 CheckFillBitsInMessage

 CheckFillBitsInMessage();

SUBROUTINE  : CheckFillBitsInMessage
DESCRIPTION : To Decode The Wireshark(.lsu) log file

IN  :  Decoded hex string from LSU log, Fillbits (random/fixed),
            Channel type (SDCCH/FACCH)
OUT :


=head2 CheckIfMeasReportInMeasResult

 CheckIfMeasReportInMeasResult();

SUBROUTINE  : CheckIfMeasReportInMeasResult
DESCRIPTION : Checks that if Measurement Report is sent from MS to BTS

IN  :  Hash containing the following key(s):
       State true/false (1/0)
       MessageTimeout - Timeout value
OUT :  None


=head2 CheckIfMeasResultOnABIS

 CheckIfMeasResultOnABIS();

SUBROUTINE  : CheckIfMeasReportInMeasResult
DESCRIPTION : Checks that if Measurement Report is sent from MS to BTS

IN  :  Hash containing the following key(s):
       State true/false (1/0)
       MessageTimeout - Timeout value
OUT :  None


=head2 CheckIfPayloadDataInMSSIM

 CheckIfPayloadDataInMSSIM();

SUBROUTINE  : CheckIfPayloadDataInMSSIM
DESCRIPTION : Checks if Packed Data arrives to MSSIM or not

IN  :  Hash containing the following key(s):
       True  - State true/false (1/0)
       MessageTimeout - Timeout value
       Expect - Reference to expected data array
OUT :  None


=head2 CheckIfSysInfoMessages

 CheckIfSysInfoMessages();

SUBROUTINE  : CheckIfSysInfoMessage
DESCRIPTION : Checks if Sys Info messages arrives or not

IN  :  Hash containing the following key(s):
       True  - State true/false (1/0)
       MessageTimeout - Timeout value
       SysInfoArray - Reference to expected data array
OUT :  None


=head2 CheckL3Data

 CheckL3Data();

SUBROUTINE  : CheckL3Data
DESCRIPTION : To check that two arrays are equal

IN  :  %Arrays hash
        Expected array
        Received array
OUT :  0=Equal, 1=Unequal


=head2 CheckSysInfoSACCH

 CheckSysInfoSACCH();

return 0;
}
SUBROUTINE  : CheckSysInfoSACCH                             FRLI: Ändra beskrivningen, ta bort oönskade in-parametrar och oanvända variabler i funktionen
DESCRIPTION : Checking if traffic is on the SACCH channel
IN  :   NumOfMess - Number of messages to check
        MaxToSearch - Maximum number of messages to search
OUT :   0- No traffic
        1 - Traffic exists


=head2 CheckUMTraffic

 CheckUMTraffic();

SUBROUTINE  : CheckUMTraffic
DESCRIPTION : Logs briefly over Um to to verify that traffic is occuring

IN  :
OUT :


=head2 ClearMSSIMBuffer

 ClearMSSIMBuffer();

SUBROUTINE  : ClearMSSIMBuffer
DESCRIPTION : Clear MSSIM Buffer
IN  :   None
OUT :   None


=head2 ClearMSSIMbuffer

 ClearMSSIMbuffer();

SUBROUTINE  : ClearMSSIMbuffer
DESCRIPTION : Clears the MSSIM message buffer

IN  :     None
OUT :     Number of cleared messages


=head2 ConfigMORX

 ConfigMORX();

SUBROUTINE  : ConfigMORX / taken from sub_divsuper.pm
DESCRIPTION : To send a RX_CONFIGURATION_REQUEST and read the received
              frames on abis instead from abisco.

IN  :     TG, TRXC, MO, RecDiv
OUT :     %return (Hash reference), Message.


=head2 ConnectTG

 ConnectTG();

SUBROUTINE  : ConnectTG
DESCRIPTION : Connect TG
IN  :  BTS (Abisco connection parameter)
OUT :  None


=head2 ConvertMSSIMstatistics

 ConvertMSSIMstatistics();

SUBROUTINE  : ConvertMSSIMstatistics
DESCRIPTION : To convert statistics into easier read hash
IN  :    Results from StopPRBS()
OUT :    Statistics hash


=head2 CreateMS

 CreateMS();

SUBROUTINE  : CreateMS
DESCRIPTION : Create an MS on MSSIM

IN  : Hash containing the following key(s):
              $MsId  - MSSIM ID
OUT : -


=head2 CreateParamHashSpeech

 CreateParamHashSpeech();

SUBROUTINE  : CreateParamHashSpeech
DESCRIPTION : To create parameter hash to be sent to subroutine SendSpeech
              in module speechfunc.pm.
              See speechfunc.pm for parameter layout
IN  :    Speech Type
OUT :    Parameter hash


=head2 CreateSpeechPatternFile

 CreateSpeechPatternFile();

SUBROUTINE  : CreateSpeechPatternFile
DESCRIPTION : Create a MSSIM pattern file
IN  :    Hash containing the following key:
              SpeechFrames - Number of speech frames
              SilentFrames - Number of silent frames
              CMR_TAG      - CMR
              CMI_TAG      - CMI
              Rate         - Speech rate (FR / HR)
              SPConfigFile - Name of the generated cfg file
OUT :    Name of the created pattern file


=head2 DeactivateSpeech

 DeactivateSpeech();

SUBROUTINE  : DectivateSpeech
DESCRIPTION : Deactivate speech
IN  :   %Param
OUT :   None


=head2 DeallocateICP

 DeallocateICP();

SUBROUTINE  : DeallocateICP
DESCRIPTION : To allocate ICP and CI numbers
IN  :   TG
        TRXC
        TS
        ChType
        ICP
        CI
OUT :   None


=head2 DecodeWiresharkLog

 DecodeWiresharkLog();

SUBROUTINE  : DecodeWiresharkLog
DESCRIPTION : To Decode The Wireshark(.lsu) log file

IN  :  Hash containing the following key(s):
          OutFile - Save decoded Log File name
OUT :


=head2 DeleteMS

 DeleteMS();

SUBROUTINE  : DeleteMS
DESCRIPTION : Delete existing MS on MSSIM

IN  : Hash containing the following key(s):
              $MsId  - MSSIM ID
OUT : -


=head2 DisconnectTG

 DisconnectTG();

SUBROUTINE  : DisconnectTG
DESCRIPTION : Disconnect TG
IN  :  BTS (Abisco connection parameter)
OUT :  None


=head2 DoTSConfigRequest

 DoTSConfigRequest();

SUBROUTINE  : DoTSConfigRequest / taken from subs_atrasup.abi
DESCRIPTION : Do a TSConfigRequest to set TLS settings, Receiver Diversity etc
            Note: Only Comb TCH implemented
            Changing TLS filtering time does not work
            Notes :JitterSize and PackingAlgorithm only enable for SC (updated by LF -24 May 2011)
IN  :       1)TN
            2)RecDiv
            3)ERI
            4)TLSA
            5)TLSI
            6)TLSFilteringTime
            7)MOClass
OUT :       None


=head2 EmptyBufferMSSIM

 EmptyBufferMSSIM();

SUBROUTINE  : EmptyBufferMSSIM
DESCRIPTION : To empty the receive buffer of the MMSIM
IN  :   $NumOfMsgs Number of messages to read.
OUT :   None


=head2 Encr

 Encr();

SUBROUTINE  : Encr
DESCRIPTION : To turn on encryption in MSSIM

IN  :  Hash containing the following key(s):
         CcId  - CcId
         AlgId - Algorithm Id
OUT :  None


=head2 EstablishRequestMSSIM

 EstablishRequestMSSIM();

SUBROUTINE  : EstablishRequestMSSIM
DESCRIPTION : To send Establish Request to MSSIM and receive EstablishIndication
            from Abisco

IN  :  %Param hash, see main program for description
OUT :  None


=head2 FormatFileName

 FormatFileName();

SUBROUTINE  : FormatFileName
DESCRIPTION : To create a file name based on TC and TCSUB

IN  :  Hash containing the following key(s):
              TC_name    - Test case name
              TC         - Test case number
              SUBTC      - Sub TC number
              FileFormat - File format (file ending)
OUT :  filename


=head2 GetAbisModeAndConfig

 GetAbisModeAndConfig();

SUBROUTINE  : GetAbisModeAndConfig
DESCRIPTION : Gets the Abis Mode and Config type (Dynamic/Static)

IN  : None
OUT : $AbisMode
      $Config


=head2 GetActiveCell

 GetActiveCell();

SUBROUTINE  : GetActiveCell
DESCRIPTION :

Syntax   : GetActiveCell();


=head2 GetChan

 GetChan();

SUBROUTINE  : GetChan
DESCRIPTION : To get channel and LinkId lapdm commands

IN  :  None
OUT :  Channel
       Linkid


=head2 GetChannelInfoHash

 GetChannelInfoHash();

SUBROUTINE  : GetChannelInfoHash
DESCRIPTION : To create hash with all channels wanted to be tested.
IN  :    Existing channel and resulting channel type and Rate
OUT :    Parameter hash


=head2 GetMSSIMTRXValues

 GetMSSIMTRXValues();

SUBROUTINE  : GetMSSIMTRXValues
DESCRIPTION : Get TRX values from MSSIM (gsmbSrvTRX_INFO_CMD)
IN  :    Cell => ,
            TRXC => ,
            Timeout =>
OUT :    %lResp hash


=head2 GetRoundTripDelayAbis

 GetRoundTripDelayAbis();

SUBROUTINE  : GetRoundTripDelayAbis
DESCRIPTION : Get the round trip time from PGSL-DLDATA-REQ to PGSL-DLDATA-IND
              on Abis

IN  :     Interface - Wireshark lsu config file
          Savefile  - Tempfile to store Abis lsu log in
          Duration  - Time to log data before calculating RTT
OUT :     RTTMin  - RTT min
          RTTMax  - RTT max
          RTTAvg  - RTT average


=head2 GetSapiAndChan

 GetSapiAndChan();

SUBROUTINE  : GetSapiAndChan
DESCRIPTION : To get Sapi, channel and LinkId lapdm commands

IN  :  Param hash containing the key :
            Action
OUT :  Sapi
            Channel
            Linkid


=head2 GetSysInfoType

 GetSysInfoType();

SUBROUTINE  : GetSysInfoType
DESCRIPTION : Gets the System Info Type

IN  :  Hash containing the following key(s):
       TypeNum  - System info type number
OUT :  Sys Info Type


=head2 GetTRXValues_Parser

 GetTRXValues_Parser();

SUBROUTINE  : GetTRXValues_Parser
DESCRIPTION : Extracts all information from MSSIM response and
              parses it into a responsehash
IN  :    LSU response (Raw format)
OUT :    ResponseHash


=head2 GetTSCparameters

 GetTSCparameters();

SUBROUTINE  : GetTSCparameters
DESCRIPTION : To get the appropriate TSC_SET and TSC depending
              of wanted ChType when using VAMOS
              TSC on MSSIM is a combination of TSC_SET and TSC

IN  :  ChType
            Valid parameters: Bm
                              Bm_1
                              Lm/0
                              Lm/1
                              Lm/0_1
                              Lm/1_1
OUT :  Hash containing TSC_SET
                            TSC
                            MixingOrder
                            MSCapability
                            MSSIM_TSC
                            SubTs


=head2 HandoverAccessMSSIM

 HandoverAccessMSSIM();

SUBROUTINE  : HandoverAccessMSSIM
DESCRIPTION : To send Handover Access to MSSIM and receive HandoverDetection
              from Abisco

IN  :  ChType
OUT :  None


=head2 LAPDmReceive

 LAPDmReceive();

SUBROUTINE  : LAPDmReceive
DESCRIPTION : To receive a LAPDm frame
IN  :   $Chan   (SDCCH, SACCH or FACCH)
OUT :   $Resp   (Response = "Timeout", "I", "RR", RNR", "REJ", "SABM", "DM", "UI", "DISC" or "UA"
        N(R)    (Receive Sequence Number)
        N(S)    (Send Sequence Number)
        P/F     (Poll/Final bit)
        LPD     (Link Protocol discriminator)
        api     (Service Access Point)
        C/R     (Command/Response)
        EA      (Address Extension Bit)
        L       (Length of Information field)
        M       (More bit)
        EL      (Length Extension bit)
        {Fn}    (Frame Number)
        Data    (Information Field)


=head2 MSSIMTransferFile

 MSSIMTransferFile();

SUBROUTINE  : MSSIMTransferFile
DESCRIPTION : Transfer the config file to the MSSMIM
IN  :    User
            Password
            LocalFilename
            RemoteFilename
OUT :    0 - OK
         1 - Error


=head2 MeasurementReporting

 MeasurementReporting();

SUBROUTINE  : MeasurementReporting
DESCRIPTION : Turns on Measurement Reporting

IN  :  Hash containing the following key(s):
              State true/false (1/0)
OUT :  None


=head2 PrepareChActData

 PrepareChActData();

SUBROUTINE  : PrepareChActData
DESCRIPTION : This routine assembles data for errenous ModeModify-commands with Bitstream
IN  :    TranspInd => 1, 0=Transparent and 1=Non-Transparent service
            AlgRate => 'T2.4kbits/s'
OUT :    0=OK 1=Error
            @Data, (Array containing prepared ModeModify-replica data)


=head2 PrintDebug

 PrintDebug();

SUBROUTINE  : PrintDebug
DESCRIPTION : Prints Debug printouts if global variable Debug is set to 1

IN  :  DebugMsg => "Debug msg\n"
OUT :  None


=head2 RFChannelRelease

 RFChannelRelease();

SUBROUTINE  : RFChannelRelease
DESCRIPTION : Release a channel in the BTS, without asserting ACK
IN  :   Hash containing the following key(s):
              ChType    - Channel type
              TG        - TG number
              TRXC      - TRXC
              TS        - Timeout number
              EP1_BEH   - EP1 Behaviour
OUT :   None


=head2 RadioChRel

 RadioChRel();

SUBROUTINE  : RadioChRel
DESCRIPTION : BSC commands TRS to release all dedicated resources within the TRX.
IN  :  BTS
       TG
       TRXC
OUT :


=head2 RadioChReleaseCommand

 RadioChReleaseCommand();

Subroutine: RadioChReleaseCommand
Purpose:    To release a channel in the BTS
Input:      TG
            TRXC
Output:     none


=head2 ReceiveAbisco

 ReceiveAbisco();

SUBROUTINE  : ReceiveAbisco
DESCRIPTION : To receive a spontaneous message from Abisco

IN  :   Timeout value
        Expected Message
        L3Data of expected message
OUT :  None


=head2 ReceiveAbiscoData

 ReceiveAbiscoData();

SUBROUTINE  : ReceiveAbiscoData
DESCRIPTION : To receive a spontaneous message from Abisco

IN  :   $BTS (Abisco connection parameter)
         Timeout value
         Expected message
         Supress, "SupressError" if HandleError should not be called
         L3Data of expected message
OUT :  CauseValue


=head2 ReceiveMSSIM

 ReceiveMSSIM();

SUBROUTINE  : ReceiveMSSIM
DESCRIPTION : To receive a spontaneous message from MSSIM

IN  :  Timeout - Timeout value
       ExpMsg - Expected Message
       Type - Expected Type
       Expect - Reference to L3Data of expected message
OUT :  $Msg


=head2 ReceiveMeasurmentResultNormal

 ReceiveMeasurmentResultNormal();

SUBROUTINE  : ReceiveMeasurmentResultNormal
DESCRIPTION : Receives Measurment Result and checks that L1InfoStruct is defined,
IN  :  Timeout value
        Expected message
        Supress, "SupressError" if HandleError should not be called
OUT :  Response


=head2 ReceiveSpontMSSIM

 ReceiveSpontMSSIM();

SUBROUTINE  : ReceiveSpontMSSIM
DESCRIPTION : To receive a spontaneous message from MSSIM

IN  :  Timeout value
       Expected Message
       Expected Type
       L3Data of expected message
OUT :  $Msg


=head2 ReleaseRequestMSSIM

 ReleaseRequestMSSIM();

SUBROUTINE  : ReleaseRequestMSSIM
DESCRIPTION : To send Release Request to MSSIM and receive ReleaseIndication
            from Abisco

IN  :  %Param hash, see main program for description
OUT :  None


=head2 ResetTG

 ResetTG();

SUBROUTINE  : ResetTG
DESCRIPTION : Resets the TG to the one stored in Stored TG
IN  :    Cell, TG, MCTR
OUT :    Will die if errors found


=head2 RestartBTS

 RestartBTS();

SUBROUTINE  : RestartBTS
DESCRIPTION : Restarting the BTS, make sure that the parameters set during restart
             complies with your specific TC
IN  :  BTS (Abisco connection parameter)
OUT :  None


=head2 RoundFloat

 RoundFloat();

SUBROUTINE  : RoundFloat
DESCRIPTION : Rounds the first argument to (the second argument) number of decimal places.
IN  :    Float     (Value to round)
         Decimals  (Number of decimal digits, >= 0)
OUT :    Rounded float


=head2 SendBitstream

 SendBitstream();

SUBROUTINE  : SendBitstream
DESCRIPTION :  To send an message over Bitstream and to get a specified response
IN  :    SendData => @Data, Whole set of data to
OUT :    0=OK 1=Error


=head2 SendData

 SendData();

SUBROUTINE  : SendData
DESCRIPTION : To send DataReq to Abisco and receive Data Indication from MSSIM.
              To send Data Indication to MSSIM and receive DataInd from Abisco.

IN  :  %Param hash, see main program for description
OUT :  None


=head2 SetAbisMode

 SetAbisMode();

SUBROUTINE  : SetAbisMode
DESCRIPTION : Set the Abis and TCH mode

IN  :     AbisMode      - Abis mode: TDM, SC
          TLSA          - TLSA: ON, FF
          ForceRestart  - Force a restart even id TCH and Abis mode is as
                          expected
OUT :     None


=head2 SetAttrMSSIM

 SetAttrMSSIM();

Subroutine: SetAttrMSSIM
Purpose:
Input:
Output:


=head2 SetMeasurementReporting

 SetMeasurementReporting();

SUBROUTINE  : SetMeasurementReporting
DESCRIPTION : Set Measurement Reporting

IN  : Hash containing the following key(s):
              TG                   - TG number
              TRXC                 - TRXC
              TS                   - Timeslot
              ChType               - Channel Type
              MeasurementReporting - 'On' / 'Off'
OUT : None


=head2 SetTG

 SetTG();

SUBROUTINE  : SetTG
DESCRIPTION : To set TCM configuration, updates, disconnects and reconnects.
IN  :   TCH_Configuration
OUT :   None


=head2 SetTG_TCHConfig

 SetTG_TCHConfig();

SUBROUTINE  : SetTG_TCHConfig
DESCRIPTION : To set TCM configuration to Dynamic 8kbps
IN  :  Parameter hash containing the following keys:
              BTS
              TG
              TCH_Config
OUT :  None


=head2 StartLoopMSSIM

 StartLoopMSSIM();

SUBROUTINE  : StartLoopMSSIM
DESCRIPTION : To start the loop function in MSSIM

IN  :     Timeout
          $CcId        (MSSIM downlink channel id)
          $LoopCcId    (MSSIM uplink channel id)
OUT :     0=OK


=head2 StopLoopMSSIM

 StopLoopMSSIM();

SUBROUTINE  : StopLoopMSSIM
DESCRIPTION : To stop the loop function in MSSIM

IN  :     CcId    (MSSIM downlink channel id)
          Timeout
OUT :     Status    (0=Ok, 1=Error)


=head2 StoreTG

 StoreTG();

SUBROUTINE  : StoreTG
DESCRIPTION : Store TG parameters. This subroutin shall be followed by ResetTG
IN  :    {Cell}, {TG}, {MCTR};
OUT :


=head2 TimeSlotConfigure

 TimeSlotConfigure();

SUBROUTINE  : TimeSlotConfigure
DESCRIPTION : A general TSConfigure request.
              This function should be put in FRAMEWORK in future releases of Abisco.
              New input parameters may be added if needed.
IN  :    TG, TRXC, MOClass, InstanceNo, CMB, TimeSlotNo, S_CT, CT
OUT :    None


=head2 TurnOnTetherealLogging

 TurnOnTetherealLogging();

SUBROUTINE  : TurnOnTetherealLogging
DESCRIPTION : To set a path in config.ini file

IN  :  Parameter hash containing the following keys:
            Interface - LSU Configuration file,
            Savefile  - LSU log file,
            Duration  - Time out
OUT :


=head2 bin2dec

 bin2dec();

SUBROUTINE  : bin2dec
DESCRIPTION : binary to decimal convertion

IN  :  binary
OUT :  decimal


=head2 bin2hex

 bin2hex();

SUBROUTINE  : bin2hex
DESCRIPTION : binary to decimal convertion

IN  :  binary
OUT :  hexadecimal



=cut

=head1 NAME

Subs_ccch


=head1 DESCRIPTION

Document number : 164/190 55-CAH 161 1607/1
MODULE          : Subs_ccch
DESCRIPTION     : Contains subroutines that will be used in CCCH tests,
                  such as Mobile Call Setup.

COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV DATE      NAME            REVIEW      COMMENT
A   20101019  Syntronic AB/   XWIKMAR     File created. Approved UABTOH.
              David Melin
B   20110302  Syntronic AB/   XGUSTPE     Added behaviour to PagingCommand2
              Tobias Semberg
C   20111116  XPRRANA         XTOBSEM     Changed UpdateCCCHList
                                           Added ImmAssignInfoP2TwoMsg, SetupAndStartTsharkLoggingOnAbis
                                           Added:    ImmediateAssignRejectP2BTS,
                                           Updated:  ImmAssignRejectP2, ImmAssignExtP2
                                           Bugfixed ImmediateAssingInfoP2BTS and ran perlcritic on file,
                                            warnings added, unused subs removed
                                           Added SC compatibility for SetupAndStartTsharkLoggingOnAbis
                                           Updated UpdateCCCHList to support SC
                                           Added ImmediateAssingInfoP1, GetLoopHandle
                                           Updated InitiateTsharkLogging to allow userdefined parameters
                                           Added: ProcessTsharkLogfileAndLookForSpecifiedValues
                                           Updated GetLoopHandle, PagingBTS to handle TMSI as input and Ran perlcritic on file.
                                           Added check for message length in ProcessTsharkLogfileAndLookForSpecifiedValues and
                                            ProcessTsharkLogfileAndCheckMessageType2Values
D    20120229 XLEIMAR         EERICSV     Updated according to perlcritic and removed unnecessary imports.
                                           Edited ImmAssignExtP2 to receive more optional inputs
                                           Added DisableMO and EnableMO from previous revision
                                           Removed PrettyPrint from ProcessTsharkLogfileAndLookForSpecifiedValues
                                            and added function ReceiveAbiscoData
                                           Added DecodeIMSI and updated UpdateCCCHList to only
                                            do a complete start if strictly necessary.
E    20120820 XNAVNAS         XSOFFRO     Removed unneccessary functions, implemented lock_keys
                                           Solved TR HP14554 (removed keys from Resp2 hash in UpdateCCCHList)
                                           Updated UpdateCCCHList to make it more dynamic (MCTR instances etc.)
                                           Added function GetBCCHTrx.
                                           Updated ImmAssignInfoP2 to accept more input, and UpdateCCCHList
                                            to handle case of only 1 MCTR 0 instance.
PF1  20130516	XHENRMA		      XAMMELY     Updated TRXReportCtrl to be able to specify TRXC
                                            Copied ResetTG() and StoreTG() from subs_Broadcast
PF2  20130624 XPATHIL         XAMMELY     Added SetIASOnOff for Immediate Assignment Sent message control.
                                           Updated TRXReportCtrl to accept more input and return Asserted %Resp,
                                           ImmAssignInfoP2 updated accepting more input, accepting MobileIdentifier for IAD2 use.
PF3 20130731 EKHOELH          XPATHIL     Added restartBTS subroutine.
PF4 20120725 XDANHEN          XYNSTAN     Added RachTabActReq for HP86019 and HP86022
PF5 20130909 EKHOELH          XSALNIC     Added FindOctetsInLogFrame to support the new IP login.
PF6 20130913 XAMMELY          EKHOELH     Added RachTabActReqMSSIM.
PF7 20131023 XHENRMA          XAMMELY     Added ChangeMssimCellPower() due to HR83440
PF8 20131023 XHENRMA          XAMMELY     Re-wrote ChangeMssimCellPower do be more dynamic (and not require inputted directories)
                                            Added RRC-flag to DisableConfigEnableBTS.
PF9 20131023 XHENRMA          XAMMELY     Modified ChangeMssimCellPower to require less input
PF10 20131216 XHENRMA          XPATHIL     Changed 'RRC'-flag to 'RABI' in DisableConfigEnableBTS due to IWD updates


=head1 REQUIRES

L<Hash::Util> 

L<English> 

L<Storable> 

L<mssim_sub> 

L<mssim> 

L<lsuConfig> 

L<wireshark> 

L<PerlFunc> 

L<dbLog> 

L<AbiscoFunc2> 

L<Abisco_Connection> 

L<SubInit_ccch> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 AbisLoggingBTS

 AbisLoggingBTS();

Subroutine: AbisLoggingBTS
Purpose:    Turn Abis logging off or on
Input:      State => 'OFF',
            TG    =>  $TG,
            BTS    =>  $BTS,
Output:


=head2 CalculateIMSIForAGivenPagingGroup

 CalculateIMSIForAGivenPagingGroup();

SUBROUTINE  : CalculateIMSIForAGivenPagingGroup
DESCRIPTION : Calculates a IMSI that will belong to a certain paging group,
              once the returned IMSI is sent in a TRAFFRN.Paging call.
              The IMSI will be stepped until a matching paging group has been found.

IN  :     BaseIMSI => [7, 5, 7, 0, 0, 8, 2] (array, 7 elements) : The last IMSI to use, BCD encoded. (The returned IMSI will be different from this one.)
          BCCHType            => 'COMB'                         : 'NCOMB' or 'COMB' only.
          BS_AG_BLKS_RES      => 0                              : 0-1
          BS_PA_MFRMS         => 2                              : 2-9
          PagingGroup         => 0                              : 0-80 (although the maximum possible is 27, given the paging group formula.)
OUT :     NewIMSI     => @NewIMSI   <Same format as BaseIMSI above> : An IMSI that has the desired paging group (but only if Result == 0).
          Wrapped     => 1 (if IMSI wrapped to ((0)x7)) or 0 (no wrapping)
          ResultCode  => 0 (if successfully calculated new IMSI) or 1 (if no IMSI could be calculated with the desired paging group)
          Counter     => The distance between the original (input) and the new (output) IMSI values


=head2 CalculateIMSIForAGivenPagingGroup_Helper_StepUp

 CalculateIMSIForAGivenPagingGroup_Helper_StepUp();

SUBROUTINE  : CalculateIMSIForAGivenPagingGroup_Helper_StepUp
DESCRIPTION : Helper function for CalculateIMSIForAGivenPagingGroup.
              Steps the IMSI by one.

IN  :     BaseIMSI => [0, 0, 0, 0, 0, 0, 0] (array, 7 elements)
OUT :     NewIMSI => @NewIMSI   <Same format as BaseIMSI above>
          Wrapped => 1 (if IMSI wrapped to ((0)x7)) or 0 (no wrapping)


=head2 CalculateTMSIForAGivenPagingGroup

 CalculateTMSIForAGivenPagingGroup();

SUBROUTINE  : CalculateTMSIForAGivenPagingGroup
DESCRIPTION : Calls CalculateIMSIForAGivenPagingGroup() after a suitable
              reformatting of the TMSI/IMSI vector. No range checking or overflow checking.

IN  :     BaseTMSI => [0x00, 0x00, 0x00, 0x01] (array, 7 elements) : The last TMSI to use, not BCD encoded.
          BCCHType, BS_AG_BLKS_RES, BS_PA_MFRMS, PagingGroup       : Same as for CalculateIMSIForAGivenPagingGroup().
OUT :     NewTMSI => @NewTMSI  <Same format as BaseTMSI above>
          Wrapped, ResultCode, Counter                             : Same as for CalculateIMSIForAGivenPagingGroup().


=head2 CcchDataIndMSSIM

 CcchDataIndMSSIM();

SUBROUTINE  : CcchDataIndMSSIM
DESCRIPTION : Indicates the reception of data on the CCCH

Syntax: CcchDataIndMSSIM (Cell        => $Cell,
                          TS          => $TS,
                          Fn          => $Fn,
                          MsId        => $MsId,
                          MsId2       => $MsId2,
                          Data        => $Data
                          [ReturnHash => 'Anything']);
        ReturnHash is optional, and causes this function to return the
        mssimGet() response.


=head2 CcchDataReqMSSIM

 CcchDataReqMSSIM();

SUBROUTINE  : CcchDataReqMSSIM
DESCRIPTION : Perform a channel request from MSSIM on RACH

Syntax: CcchDataReqMSSIM(Cell  => $Cell,
                         AbBlk => $AbBlk,
                         TrSeq => $TrSeq,
                         Rep   => $Rep,
                         TS    => $TS,
                         MsId  => $MsId,
                         Data  => $Data);


=head2 ChangeMssimCellPower

 ChangeMssimCellPower();

SUBROUTINE  : ChangeMssimCellPower
DESCRIPTION : To change the default power-level of a specified MSSIM-cell.

IN  :        host       =>  Mssim hostname
             username   => username to mssim
             passwd     => password to mssim
             mssimcell  => mssim cell number
             mssimtrx   => number of trx:s in relevant mssim cell
             newpower   => the desired new powerlevel

OUT : Nothing.


=head2 CompareArrays

 CompareArrays();

SUBROUTINE  : CompareArrays
DESCRIPTION : To compare two Arrays named Expect and Received

IN  : Two arrays
OUT : Returns 0 if data differs, else 1


=head2 DecodeIMSI

 DecodeIMSI();

SUBROUTINE  : DecodeIMSI
DESCRIPTION :

IN  :
OUT :


=head2 DisableConfigEnableBTS

 DisableConfigEnableBTS();

SUBROUTINE  : DisableConfigEnableBTS
DESCRIPTION : To change channel combination for selected TS

IN  :     %Input ->BTS, TG, TRXC, MO, CMB, TS, BS_PA, BS_AG
OUT :     None


=head2 DisableMO

 DisableMO();

FUNCTION : DisableMO
COMMENT  :

Syntax   : DisableMO(MO => 'TS', INST => $TS[0]);



=head2 EmptyBufferMSSIM

 EmptyBufferMSSIM();

SUBROUTINE  : EmptyBufferMSSIM
DESCRIPTION : To empty the receive buffer of the MMSIM.

IN  :     None
OUT :     None


=head2 EnableMO

 EnableMO();

FUNCTION : EnableMO
COMMENT  :

Syntax   : EnableMO(MO => 'TS', INST => $TS[0]);



=head2 FindOctetsInLogFrame

 FindOctetsInLogFrame();

SUBROUTINE  : FindOctetsInLogFrame
DESCRIPTION : Finds pattern matches in log frames

IN  : %InputHash = (
        Expected      => undef,
        ExpectedPos   => undef,
        Optional      => undef,
        OptionalPos   => undef,
        Message       => undef,
                    );
OUT : %Hash with results


=head2 FormatTestcaseName

 FormatTestcaseName();

SUBROUTINE  : FormatTestcaseName
DESCRIPTION : Reformats the PAR hash test case name for printout purposes.
              If the input string is not on the format 'XX_YY', it is
              returned unchanged.
              (Copied from subs_broadcast.pm.)

IN  :     TestcaseName => 'xx_yy'
OUT :     'xx.yy'


=head2 GetActiveCell

 GetActiveCell();

SUBROUTINE  : GetActiveCell
DESCRIPTION :

Syntax   : GetActiveCell();


=head2 GetBCCHTrx

 GetBCCHTrx();

SUBROUTINE  : GetActiveCell
DESCRIPTION :

Syntax   : GetActiveCell();


=head2 ImmAssignExtP2

 ImmAssignExtP2();

SUBROUTINE  : ImmAssignExtP2
DESCRIPTION :

IN  : $TG     -> reference to TG data
      $Indata -> reference to indata
      $Indata{QueueAndSendBatch} :
        If defined, uses the TXQUEUE functionality (but the calling function
        must use the DISPATCH.SendStoredMessages). If undef/not defined:
        Sends immediately.
OUT :


=head2 ImmAssignInfoP2

 ImmAssignInfoP2();

SUBROUTINE  : ImmAssignInfoP2
DESCRIPTION : Sends an Immediate Assign message.
              Update 2010-05-19: Now this function asserts that the message
                                 is sent.
              Update 2010-09-01: Does not wait for
                                 UNACKNOWLEDGED_MESSAGE_SENT if queued

IN  :
OUT :


=head2 ImmAssignInfoP2TwoMsg

 ImmAssignInfoP2TwoMsg();

SUBROUTINE  : ImmAssingInfoP2TwoMsg
DESCRIPTION : Send immediate assign

IN  :      %lResp ->BTS, TG, TRXC, TS, CH_TYPE, PageMode
OUT :      %lResp


=head2 ImmAssignRejectP2

 ImmAssignRejectP2();

SUBROUTINE  : ImmAssignRejectP2
DESCRIPTION :

IN        :
OUT       :


=head2 ImmediateAssignInfoP2

 ImmediateAssignInfoP2();

SUBROUTINE  : ImmediateAssignInfoP2
DESCRIPTION : Send immediate assign

IN  :     %lResp ->BTS, TG, TRXC, TS, CH_TYPE, PageMode
OUT :     %lResp


=head2 ImmediateAssignInfoP2BTS

 ImmediateAssignInfoP2BTS();

SUBROUTINE  : ImmediateAssignInfoP2BTS
DESCRIPTION : Send immediate assign

IN  :     %lResp ->BTS, TG, TRXC, TS, CH_TYPE, PageMode
OUT :     %lResp


=head2 InfoCellBTS

 InfoCellBTS();

SUBROUTINE  : InfoCellBTS
DESCRIPTION : Get Info from choosen BTS Cell

IN  :     %Input ->BTS
OUT :     %Resp see IWD InfoCell


=head2 InitiateTsharkLogging

 InitiateTsharkLogging();

SUBROUTINE  : InitiateTsharkLogging
DESCRIPTION : Initiates Tshark logging based on PAR hash and the log file name.

IN  :     TsharkLogfileName     =>    'Tsharklog.log'
          EnableDebugPrintouts  =>    undef                     # undef or anything else
OUT :     None.


=head2 NotificationCommandBTS

 NotificationCommandBTS();

SUBROUTINE  : NotificationCommandBTS
DESCRIPTION : Send notification command

IN  :     %lResp ->BTS, TG, TRXC, TS, CH_TYPE, ACT_FLAG, CMD_IND, REP_NCH
                   NLN, NLN_STATUS, GC_REF_H, GC_REF_L
OUT :     %lResp


=head2 Paging2BTS

 Paging2BTS();

SUBROUTINE  : Paging2BTS
DESCRIPTION : Send immediate assign

IN  :     %lResp ->BTS, TG, TRXC, TS, CH_TYPE, PageMode
OUT :     %lResp


=head2 PagingBTS

 PagingBTS();

SUBROUTINE  : PagingBTS
DESCRIPTION : Example:
              PagingBTS(MsId => 'IMSI', PGV => 1, EP1_BEH => 0);
IN  :
OUT :


=head2 PagingCommand

 PagingCommand();

SUBROUTINE  : PagingCommand
DESCRIPTION : Example:
              PagingCommand(MsId => 'TMSI', PGV => 3);
IN  :
OUT :


=head2 PagingCommand2

 PagingCommand2();

SUBROUTINE  : PagingCommand2
DESCRIPTION : Example:
              PagingCommand2(PgCmd1 => 1, TS1 => 2, PG => 1);

IN  :
OUT :


=head2 ProcessTsharkLogfileAndCheckMessageType2Values

 ProcessTsharkLogfileAndCheckMessageType2Values();

Note: The following function was explicitly written to process System Information
messages, and copied from subs_broadcast.pm.
But by exchanging some values in the PAR hash, it can be reused for other types
of messages.
This function has been expanded with the PagingGroup functionality, new since 2010-06-02.
SUBROUTINE  : ProcessTsharkLogfileAndCheckMessageType2Values
DESCRIPTION : Opens and processes a raw Tshark log file, checks that all
              MessageType2 values are in the 'allowed list' from the PAR
              hash, and returns several arrays with various information
              based on the logs.

IN  :     LogfileHandle         => 'LogHandle'
          LogfilePath           => 'Tsharklog.log'
          EnableDebugPrintouts  => undef                      # undef or anything else
          EnableSIPrettyPrint   => undef                      # undef or anything else, PrettyPrints all log messages
          RaiseErrorOnWrongMT   => 'Yes'                      # If undef, will not case a HandleError/die if the MessageType2 is incorrect. Anything else (the default) will.
          ExportFullMessages    => undef                      # undef or anything else. If defined, will fill the output vector '@FullMessagelist' with the 'Message' field from the log file entry
OUT :     A hash with several data vectors, based on the Tshark log file.


=head2 ProcessTsharkLogfileAndLookForSpecifiedValues

 ProcessTsharkLogfileAndLookForSpecifiedValues();

SUBROUTINE  : ProcessTsharkLogfileAndLookForSpecifiedValues
DESCRIPTION : Opens and processes a raw Tshark log file.

IN  :     LogfileHandle         => 'LogHandle'
          LogfilePath           => 'Tsharklog.log'
          EnableDebugPrintouts  => undef                      # undef or anything else
          FindInOrder           => undef                      # undef or anything else. If defined will search for messages in input array order.
          ExportFullMessages    => undef                      # undef or anything else. If defined, will fill the output vector '@FullMessagelist' with complete logg information for the matched messages
          RaiseError            => 'Yes'                      # If undef, will not case a HandleError, if not all messages are matched. Anything else (the default) will.
          MessageType           => [x,x,..]                   # The messages types in the order the should be found( value -1 => unspecified, matches everything)
          MessageOccurance      => [x,x,..]                   # The number of expected occurances of the message ( value = 0 => no occurances, throw error if found) ( value = -1 => unspecified, zero or more occurances. The function cannot handle multiple unspecefied in a row, one 'regular'(1+) must be inbetween every (-1))
          PageMode              => [x,x,..]                   # Pagemode, ( value -1 => unspecified, matches everything)
          PagingGroup           => [x,x,..]                   # PagingGroup, ( value -1 => unspecified, matches everything)
          IMSIPresent           => [x,x,..]                   # If a IMSI should be present(1), not(0) or unspecified(-1). (matches non dummy pagings)
          MSIvalues             => [[[x,x,x,x],[x,x,x,x],[x,x,x,x],[x,x,x,x]]..] # Match msi values, -1 => match anything
          ByteX                 => x                          # Matches Byte number x in the message against input value.
OUT :     A hash with:
          Result                => x                          # Found all messages(0), all messages not found or not allowed message found(1).
          FullMessageList                                     #The complete logg information for the matched messages
          MessageDataList                                     #Data information for the matched messages


=head2 RachTabActReqMSSIM

 RachTabActReqMSSIM();

SUBROUTINE  : RachTabActReqMSSIM
DESCRIPTION : Perform an access burst from MSSIM on RACH

Syntax: RachTabActReqMSSIM(Cell   => $Cell,
                           TS     => $TS,
                           NumItr => $NumItr,
                           Tab    => [
                                    (Send  => $Send,
                                     AbBlk => $AbBlk,
                                     TrSeq => $TrSeq,
                                     Ta    => $Ta,
                                     Power => $Power,
                                     Data  => $Data),
                                    ..]


=head2 RadioChReleaseCommand

 RadioChReleaseCommand();

SUBROUTINE  : RadioChReleaseCommand
DESCRIPTION : Cleans all radiochannels connected to TG.
            (Copied from subs_broadcast.pm.)

IN  :     BTS => $BTS
          TG => $::TG
          TRXC => 'Undefined'
OUT :     None


=head2 ReceivePagingRequest

 ReceivePagingRequest();

SUBROUTINE  : ReceivePagingRequest
DESCRIPTION : **** THIS FUNCTION DOES NOT WORK AS INTENDED!!!!!
            The reason is that the paging group value cannot be checked automatically, except if using Tshark,
            and having a Wireshark release date later than May 2010.
            But the bulk of the code is believed to function, so let it remain in the code, to aid future work.

              Example

                ReceivePagingRequest([[4, 'TMSI', 'TMSI', 'IMSI']], 'PR2', 34, 'Yes', 'No');

              NB The first parameter is an array of arrays
              4 is the Paging group value
              PR2 means Paging Request type 2 and is the expected signal that is
              signaled from the CRTC
              34 is an integer that corresponds to the MessageType2 value, as received by the MSSIM
                  (This value is not independent of the paging request type.)
              'Yes' (Consider this an 'ExitAfterUmTransmission' variable) means the function will return -1
                  when the paging request messages have been sent over Um. Otherwise (if _any_ value except 'Yes'),
                  it will continue parsing the CCCH_DATA_IND messages.
                  Use this option if Tshark logging has been enabled by the calling function.
              'No' (Consider this an 'QueueAndSendBatch' variable.) 'Yes' means that the messages should
                  be placed in a queue, and transmitted as rapidly as possible. Anything else means that the
                  individual paging requests will be transmitted as soon as they are constructed, not using
                  the Abisco send queue.

              This function requires that some sort of filtering is active, so that this function
              will not get drowned in spurious MSSIM responses.

IN        : See above.
OUT       : 0: Pass, paging requests were received.
            1 (or any value > 0): Fail, not all paging messages were received.
            -1: The fourth parameter above was equal to 'Yes'.


=head2 ResetTG

 ResetTG();

SUBROUTINE  : ResetTG
DESCRIPTION : Resets the TG to the one stored in Stored TG
              (copied from subs_Broadcast)

IN  :     Cell, TG, MCTR
OUT :     Will die if errors found
Sample:   ResetTG(%StoredTG);


=head2 RestartBTS

 RestartBTS();

Subroutine:   RestartBTS
Purpose:      Restarting the BTS, make sure that the parameters set during restart
              complies with your specific TC
Input:        BTS (Abisco connection parameter)
              TGId
              TRXList (array)
Output:


=head2 SendSysinfoMessages_SI3SpecialConfiguresMSSIM

 SendSysinfoMessages_SI3SpecialConfiguresMSSIM();

SUBROUTINE  : SendSysinfoMessages_SI3SpecialConfiguresMSSIM
DESCRIPTION : Sends system information messages according to input vectors.
              Sysinfo 3 is a special case - Enables all SI messages (without filtering) on the MSSIM,
              and also configures the MSSIM to enable reception of SI messages based on the latest SI3 message.
              (Copied from subs_broadcast.pm.)

IN  :     SITypes               =>    ['3'],                    # Vector (use an array reference when calling, 'SITypes => \@lSITypes')
          MessageStrPrefix      =>    'BCCHInfoP2_',            # Scalar
          BcchMap               =>    'Normal',                 # Scalar, although hard-coded 'Normal' for SI3
          SI3_CCCHConfirmed     =>    1                         # Scalar, only used for SI3
          SI3_BS_AG_BLKS_RES    =>    undef                     # Scalar, only used for SI3
          SI3_BS_PA_MFRMS       =>    undef                     # Scalar, only used for SI3
          EnableDebugPrintouts  =>    undef                     # undef or anything else
OUT :     None.


=head2 Send_SysInfo

 Send_SysInfo();

SUBROUTINE  : Send_SysInfo
DESCRIPTION :

Syntax   : Send_SysInfo(TGId => $TG, TS => 0, TRXC => $TRXC, Info => $Info
                        ChType => 'BCCH', BcchMap => 'Normal', TXInteger => 14,
                        MaxRetrans => 2, RadioLinkTimeout => 1, RXLevMin => 35);
           If [one of] the optional parameters 'SIP2_3_CCCHConfirmed', 'SIP2_3_BS_AG_BLKS_RES'
              or 'SIP2_3_BS_PA_MFRMS' is/are present, it is used
              in the BCCHInfoP2_3 message. Otherwise it is ignored.
              IMPORTANT: The SysInfo3 ControlChannelDescrStruct.BS_PA_MFRMS value is coded as ((real value) - 2)!
                          When supplying the parameter so Send_SysInfo, send the BS_PA parameter as it is
                          entered in the TG setup in Abisco.

           (Copied from subs_broadcast.pm, but modified.)

Change log:   The MessageType2 for BCCHInfoP2_2quater was changed from 25 to 7 (7 is the correct value in the IWD browser).
              2010-06-01: Updated to include BS_AG and BS_PA for SysInfo type 3. (SIP2_3_BS_PA_MFRMS and SIP2_3_BS_AG_BLKS_RES.)
                          Note that the BS_PA value is coded in a very unintuitive way. It is probably
                          best not to use it.


=head2 SetAllSIMSSIM

 SetAllSIMSSIM();

SUBROUTINE  : SetAllSIMSSIM
DESCRIPTION : Activate all System information in the MSSIM (remove filtering).
              Note that this command _also_, automatically, makes the MSSIM
              listen for the system information configuration that is carried
              by System information type 3. (Because the flag CCauto = 1.)
              (Copied from subs_broadcast.pm, but modified to use $CellNr instead of $Cell.)

IN  :     Cell (Optional), EnableDebugPrintouts (Optional)
OUT :     None


=head2 SetIASOnOff

 SetIASOnOff();

SUBROUTINE  : SetIASOnOff
DESCRIPTION :

Syntax   : SetIASOnOff(IAS => 'On');


=head2 SetupAndStartTsharkLoggingOnAbis

 SetupAndStartTsharkLoggingOnAbis();

SUBROUTINE  : SetupAndStartTsharkLoggingOnAbis
DESCRIPTION :

IN  :     LogfileName     =>    'Tsharklog.log'
          Duration     =>    15
OUT :     None.


=head2 StoreTG

 StoreTG();

SUBROUTINE  : StoreTG
DESCRIPTION : Store TG parameters. This subroutin shall be followed by ResetTG
              (copied from subs_Broadcast)

IN  :
OUT :     {Cells}, {TG}, {MCTR};
Sample:   %StoredTG = StoreTG();


=head2 TRXReportCtrl

 TRXReportCtrl();

SUBROUTINE  : TRXReportCtrl
DESCRIPTION :

Syntax : TRXReportCtrl(TRXRepInt1 => 'RI10sec');



=head2 UpdateCCCHList

 UpdateCCCHList();

SUBROUTINE  : UpdateCCCHList
DESCRIPTION : Updates Cell with relevant $CCCHList.

IN  :     $CCCHList
OUT :     Will die if errors found



=cut

=head1 NAME

Subs_Cdf


=head1 DESCRIPTION

Document number: 3/190 55 - CAH 161 1607/1
MODULE      : subs_cdf.pm
DESCRIPTION : Contains common subroutines for Channel Distribution Function
              test programs

COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE       NAME        REVIEW         COMMENT
A     20091026   xrssajo     UABTOH         Approved
B     20091110   xrssajo     eraheik        Added ActivateSpeech and added/removed arguments to ChangePCM().
                                            Added GetMaxKbpsValue
D     20100209   qradgut     XPRRANA        Added RedirectAbiscoLog and RestoreAbiscoLog
                                            Added CheckPCMWithDVT,CallSetUp,DisconnectCall
                                            and FormatTestcaseName.
                                            Modified RestoreDefaultTG
                                            Added InterCellhandoverTCH and SetTG
                                            Added SCQualityReportII, ReceiveAbiscoMessage, DVTMonitorSCQuality, SetTG_SC,
                                            ChannelActPacketChannel, ActivatePGSLData, UpdatePGSLData, UpdateSpeech
                                            Removed Allocate, Deallocate, Index (not used)
                                            Converted to strict
                                            Exported CompareArrays. Added DVTMonitorSCConfig
PE1  20111102    QRADGUT                    Added ClearAllLinks ReallocateConnection GetMCTRRecords CheckTSSStatistics


=head1 REQUIRES

L<Hash::Util> 

L<dbLog> 

L<File::Path> 

L<List::Util> 

L<Win32::Shortcut> 

L<Msg> 

L<DVTFunc> 

L<PerlFunc> 

L<AbiscoFunc2> 

L<User> 

L<Abisco_Connection> 


=head1 METHODS

=head2 ActivatePGSLData

 ActivatePGSLData();

Subroutine: ActivatePGSLData
Purpose:    Activate PGSL data (both allocate link and start sending data)
Input:
OUT         0 (OK) or 1 (Activation of PGSL data failed)



=head2 ActivateSpeech

 ActivateSpeech();

Subroutine: ActivateSpeech
Purpose:    To activate speech in TSS, either "Frames" or "LoopBack"
Input:      Parameter hash
Output:   0=OK, 1=Error


=head2 CallSetUp

 CallSetUp();

 Subroutine:  CallSetUp
Purpose: Setting up a Mobile Terminated call
Input:    $TG, $TRXC, $TS, $TCHSubCH, $SDCCHSubCH
Output:


=head2 CfgDiamuxDefault

 CfgDiamuxDefault();

-COMMENT: Configures DIAmuX with default configuration

Syntax : CfgDiamuxDefault();
IN   : None
Out  : None
-

=head2 ChangePCM

 ChangePCM();

--COMMENT: Changes PCM line

Syntax : ChangePCM($PCMLine => 'On', PCMType => PCM2.0Mbit/s); #(E1)
Syntax : ChangePCM($PCMLine => 'On', PCMType => PCM1.5Mbit/s); #(T1)
IN   : none
OUT    : none
--

=head2 ChannelActPacketChannel

 ChannelActPacketChannel();

Subroutine: ChannelActPacketChannel
Purpose:    Activate PS channel
Input:
OUT         0 (OK) or 1 (Channel activation failed)



=head2 CheckPCMWithDVT

 CheckPCMWithDVT();

=head2 CheckTSSStatistics

 CheckTSSStatistics();

--FUNCTION : CheckTSSStatistics
COMMENT  : Check TSS Statistics. Compare Sent/Received frames.
           Check error counters = 0
IN       : %Stats, $Rate (Rate is not used now -- statistics are for FR)
OUT      : $SpeechIndSent, $SpeechIndRec, $ErrorCounter
--

=head2 CompareArrays

 CompareArrays();

Subroutine: CompareArrays
Purpose:    Compare Array1 to Array2. Note that Array2 can contain more values and
            sub still returns 1. All values in Hash1 must be equal to corresponding
            value in Hash2.
Input:      Array1 => \%Array1
            Array2 => \%Array2
OUT         1 (match) or 0 (mismatch)



=head2 CompareHashes

 CompareHashes();

Subroutine: CompareHashes
Purpose:    Compare Hash1 to Hash2. Note that Hash2 can contain more keys and
            sub still returns 1. All keys in Hash1 must be equal to corresponding
            value in Hash2.
Input:      Hash1 => \%Hash1
            Hash2 => \%Hash2
OUT         1 (match) or 0 (mismatch)



=head2 CompleteStart

 CompleteStart();

-COMMENT: Sends Complete Start command.
         AssosiatedSOInstance, InstanceNo and checks ResetComplete.
Syntax : CompleteStart();
IN   : None
Out  : None
-

=head2 ConfigMCTR

 ConfigMCTR();

--FUNCTION : ConfigMCTR
COMMENT  : Sends MCTRConfigRequest
IN       :
OUT      : None
--

=head2 ConfigReadMO

 ConfigReadMO();

--FUNCTION : ConfigReadMO
COMMENT  : Get current parameters for wanted MO
Syntax   : ConfigReadMO(MO => $MO);
IN       : MO type
OUT      : %Resp
--

=head2 ConfigureCON

 ConfigureCON();

-COMMENT: Configures MO CON according to IS Configuration list given
         in array @CONList

Syntax : ConfigureCON(MO => $MO);
IN   : None
Out  : None
-

=head2 ConfigureIS

 ConfigureIS();

-COMMENT: Configures MO IS according to IS Configuration list given
         in array @ISCL

Syntax : ConfigureIS(ISCL => $ISCL);
IN   : None
Out  : None
-

=head2 ConfigureTS

 ConfigureTS();

-COMMENT: Configures MO TS for SC

Syntax : ConfigureTS();
IN   : None
Out  : None
-

=head2 ConnectMO

 ConnectMO();

--FUNCTION : ConnectMO
COMMENT  : Sends ConnectCommand to MO defined by MOClass, InstanceNo
           and AssosiatedSOInstance and checks ConnectComplete.
IN     : ConnectMO(TRXC => , MO => , MOState => , INST => , ASOInst => );
OUT    : None
--

=head2 ConnectResetStartConfigEnableOpinfo

 ConnectResetStartConfigEnableOpinfo();

--FUNCTION : ConnectResetStartConfigEnableOpinfo
COMMENT  : ConnectResetStartConfigEnableOpinfo
IN           : Optionally one or more of the following
           keys: TRXList, MO
OUT           : None
--

=head2 ConnectTG

 ConnectTG();

--FUNCTION : ConnectTG
COMMENT  :
Syntax   : ConnectTG(TransceiverGroup => 0);
IN       :
OUT           :
--

=head2 DVTMonitorSCConfig

 DVTMonitorSCConfig();

Subroutine: DVTMonitorSCConfig
Purpose:    Enable or disable the Monitor DVTMonitorSCConfig in DVT
Input:      Message
            Timeout
OUT         Result => OK / Timeout
            Msg    => Found message



=head2 DVTMonitorSCQuality

 DVTMonitorSCQuality();

Subroutine: DVTMonitorSCQuality
Purpose:    Enable or disable the Monitor SCQualityReport2 in DVT
Input:      Message
            Timeout
OUT         Result => OK / Timeout
            Msg    => Found message



=head2 DefinePCM_CF

 DefinePCM_CF();

-COMMENT: Defines PCM link for CF on PCM-TS1
         The function can be called without parameters, or by passing two
         variables to it.

Syntax : DefinePCM_CF();                              OR
         DefinePCM_CF($timeSlot, $startBit);          OR
         DefinePCM_CF($timeSlot, $startBit, $TEI);
         DefinePCM_CF($timeSlot, $startBit, $TEI, $PCMSystem);
IN   : $timeSlot - (optional) Scalar containing PCM Timeslot for CF link
       $startBit - (optional) Scalar containing PCM Startbit for CF link
       $TEI - (optional) Scalar containing TEI value for CF link
       $PCMSystem - (optional) Scalar containing the PCM System to use

Out  : None
-

=head2 DiamuxReset

 DiamuxReset();

-COMMENT: Reset DIAmuX

Syntax : DiamuxReset();
IN   : None
Out  : None
-

=head2 DisableMO

 DisableMO();

-COMMENT: Sends DisableRequest to MO defined by MOClass,
         AssosiatedSOInstance, InstanceNo and checks DisableResult.
Syntax : DisableMO(MO => $MO);
IN   : $MO - optional parameter, if different from global $MO
IN   : $TG - optional parameter, if different from global $TG
Out  : None
-

=head2 DisconnectCall

 DisconnectCall();

 Subroutine:  DisconnectCall
Purpose: Disconnecting call
Input:    $LMSID
Output:


=head2 DisconnectTG

 DisconnectTG();

--FUNCTION : DisconnectTG
COMMENT  :
Syntax   : DisconnectTG(TransceiverGroup => 0);
IN       :
OUT           :
--

=head2 EnableMO

 EnableMO();

-COMMENT: Sends EnableRequest to MO defined by MOClass,
         AssosiatedSOInstance, InstanceNo and checks EnableResult.
Syntax : EnableMO(MO => $MO);
IN   : None
Out  : None
-

=head2 EstablishCFLink

 EstablishCFLink();

-COMMENT: Establishes CF Link of TG specified by given value
Syntax : EstablishCFLink();
IN   : optional timeout value in seconds
Out  : None
-

=head2 EstablishLinks

 EstablishLinks();

-COMMENT: Sends EstablishLinks command to MO defined by MOClass,
         AssosiatedSOInstance, InstanceNo and checks EstablishLinksResponse.
Syntax : EstablishLinks();
IN   : None
Out  : None
-

=head2 EstablishResetStart

 EstablishResetStart();

-COMMENT: EstablishResetStart
IN     : None
OUT    : None
-

=head2 FormatTestcaseName

 FormatTestcaseName();

Subroutine: FormatTestcaseName
Purpose:    Reformats the PAR hash test case name for printout purposes.
            If the input string is not on the format "XX_YY", it is returned unchanged.
Input:      TestcaseName => "xx_yy"
Output:     "xx.yy"


=head2 GetGmtTime()

 GetGmtTime()();

-COMMENT: Returns the current time in GMT.
IN:
OUT: A hash with the keys Hour, Minute and Second.
-

=head2 GetLast

 GetLast();

--FUNCTION : GetLast
COMMENT: Returns last value of a list
         (incl. removal of last character !)
IN         : @List - as variable name says
Out         : $_ - scalar containing last value of @List
--

=head2 GetMCTRRecords

 GetMCTRRecords();

--FUNCTION : GetMCTRRecords
COMMENT  : Returns MCTRRecords from Capabilities in CF
IN         -
OUT      : @MCTRRecords
--

=head2 GetMaxKbpsValue

 GetMaxKbpsValue();

-COMMENT: Get the max kbps value from the TrafficCounter log. The log file
is different depending on the given OMT version.
is read depends on the type of OMT.
IN: A hash with the following key/value pairs:
      - omtType: OMT Type, as "OMT", "ROMT" or "ROMTIP".
      - startTime: A hash with keys Hour, Minute and Second.
OUT: Max kbps value or -1 on error
-

=head2 GetOMTTrafficCounterLog

 GetOMTTrafficCounterLog();

-COMMENT: Returns the path to the Traffic Counter log file for the given
variant om OMT.
IN: OMT Type, as "OMT", "ROMT" or "ROMTIP".
OUT: The path to the traffic counter log file.
-

=head2 InitResult

 InitResult();

Subroutine: InitResult
Purpose:    To initiate the Result hash
Syntax :          InitResult();
Output :    None


=head2 InterCellhandoverTCH

 InterCellhandoverTCH();

 Subroutine:  InterCellhandoverTCH
Purpose: Moving call to another Cell up a Mobile Terminated call
Input:    $TG, $TRXC, $TS, $TCHSubCH, $SDCCHSubCH
Output:


=head2 ReallocateConnection

 ReallocateConnection();

--COMMENT: Reallocate PCM links . We play around with the PCM's, but the
CH does not know, and the CH configuration is intact. Clear_All_Links+
AllocateCFLink+AllocateTRXLinks will make the CH resend its settings to the TSSTC.

Syntax : ReallocateConnection();
IN   : none
OUT    : none
--

=head2 ReceiveAbiscoMessage

 ReceiveAbiscoMessage();

Subroutine: ReceiveAbiscoMessage
Purpose:    Receiving Abisco message
Input:      Message
            Timeout
OUT         Result => OK / Timeout
            Msg    => Found message



=head2 RedirectAbiscoLog

 RedirectAbiscoLog();

--FUNCTION : RedirectAbiscoLog
COMMENT  : Redirects the Abisco log to a custom file

IN       : $path, $SPEC, $TC and (optionally) $SUBTC
OUT     :
--

=head2 ReleaseCFLink

 ReleaseCFLink();

-COMMENT: Releases CF Link of TG specified by given value
Syntax : ReleaseCFLink($TG);
IN   : None
Out  : None
-

=head2 ResetMO

 ResetMO();

-COMMENT: Sends Reset command to MO defined by MOClass,
         AssosiatedSOInstance, InstanceNo and checks ResetComplete.
Syntax : ResetMO(MO => $MO);
IN   : None
Out  : None
-

=head2 RestoreAbiscoLog

 RestoreAbiscoLog();

--FUNCTION : RestoreAbiscoLog
COMMENT  : Restores the Abisco log to the file 'Abisco.log' in a
           given directory.

IN       : $path
OUT     :
--

=head2 RestoreDefaultTG

 RestoreDefaultTG();

--COMMENT: Restore default TG. We play around with the PCM's, but the
CH does not know, and the CH configuration is intact. Clear_All_Links+
AllocateCFLink+AllocateTRXLinks will make the CH resend its settings to the TSSTC.

Syntax : RestoreDefaultTG();
IN   : none
OUT    : none
--

=head2 SCQualityReportII

 SCQualityReportII();

Subroutine: SCQualityReportII
Purpose:    Enable or disable SC Quality Report II
Input:      State => Enable or Disable
OUT        : None



=head2 SendCONToBTS

 SendCONToBTS();

-COMMENT: Sends CON configuration to BTS (used after PCM_IS_CON)

Syntax : SendCONToBTS()
IN   : Valid but optional hash keys: TGNr, INST.
Out  : None
-

=head2 SendISToBTS

 SendISToBTS();

-COMMENT: Sends IS configuration to BTS (used after PCM_IS_CON)

Syntax : SendISToBTS()
IN   : Valid but optional hash keys: TGNr, INST.
Out  : None
-

=head2 SetTG

 SetTG();

Subroutine: SetTG
Purpose:    To set TCM configuration. Disconnects, updates and reconnects TG.
            May Restart BTS if AbisMode or TLS settings is changed
Input:      TCH_Configuration
Output:     None


=head2 SetTG_SC

 SetTG_SC();

Subroutine: SetTG_SC
Purpose:    Send CMDHAND.UpdateTG to change TG
Input:      Hash containing parameters to change
OUT         If restart is necessary (1) or not (0)



=head2 SplitString

 SplitString();

--FUNCTION : SplitString
COMMENT  : Returns a list with splitted string (Delimiter: Whitespace)
IN           : $String - as variable name says
Out           : @String - list with splitted string
--

=head2 StartMO

 StartMO();

-COMMENT: Sends Start command to MO defined by MOClass,
         AssosiatedSOInstance, InstanceNo and checks StartResult.
Syntax : StartMO(MO => $MO);
IN   : None
Out  : None
-

=head2 UpdatePGSLData

 UpdatePGSLData();

Subroutine: UpdatePGSLData
Purpose:    Updated PGSL Data with FNAdd and/or Masks
Input:
OUT         0 (OK) or 1 (UpdateGSLData failed)



=head2 UpdateSpeech

 UpdateSpeech();

Subroutine: UpdateSpeech
Purpose:    Updated PGSL Data with FNAdd and/or Masks
Input:
OUT         0 (OK) or 1 (UpdateGSLData failed)



=head2 WaitPCMIsConFinished

 WaitPCMIsConFinished();

-COMMENT: Wait for PCM_IS_CON to establish all links. (Some messages are not in synch)
IN     : $NumTRX - number of TRX:s (as configured in TG)
OUT    : None
-


=cut

=head1 NAME

Subs_ChanMeas


=head1 DESCRIPTION

Document number: 40/190 55-CAH 161 1607/1 Uen
MODULE      : subs_chanmeas.pm
DESCRIPTION : This package contains the subfunctions and variables used
              with the main test case

COPYRIGHT © : ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV DATE      NAME           REVIEW          COMMENT
A   20100921  Syntronic AB/  Syntronic AB/   File created. Approved UABTOH.
              Fredrik Lie    Björn Eriksson
B   20110607  Syntronic AB/  Syntronic AB/   Added functions CheckIfMeasResultOnABIS, CheckIfBSP2InMeasResult
              Mark Bentham   David Melin     Updated BTSChAct with BP2 param, updated header. Added SetBSPowerLevel.
                                             Overall cleanup of exported packages and non-used subfunctions.
C   20120208  XPRRANA        XTOBSEM         Changes in CheckIfBSP2InMeasResult
                                             Updated to comply to script development process
                                             Minor changes in BTSCHAct
                                             Removed PrettyPrint from SendData
D   20120313  XLEIMAR        XTOBSEM         Updated according to PerlCritc, updated
                                             script template and implemented dynamic TG.
              XPRRANA        XNAVNAS         Added CreateSpeechPatternFile and CreateDataPatternFile


=head1 REQUIRES

L<Net::FTP> 

L<Net::Telnet> 

L<Globals> 

L<DBI> 

L<Carp> 

L<English> 

L<mssim_sub> 

L<mssim> 

L<speechfunc> 

L<dbLog> 

L<AbiscoFunc2> 

L<HelpFunc> 

L<PerlFunc> 

L<Abisco_Connection> 

L<SubInit_ChanMeas> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 ActivateCSData

 ActivateCSData();

SUBROUTINE  : ActivateCSData
DESCRIPTION : Activate sending of CS Data in TSS

IN  : TG number
      TRXC number
      TS number
      DataBitRate
      Verification
      DTX
      ICP
OUT : 0=Ok, 1=Error


=head2 CheckIfBSP2InMeasResult

 CheckIfBSP2InMeasResult();

SUBROUTINE  : CheckIfBSP2InMeasResult
DESCRIPTION : Checks if BS Power 2 info is received in
              Measurement Result struct

IN  : Hash containing the following key(s):
        True  - State true/false (1/0)
        MessageTimeout - Timeout value
        TS
        TRXC
        ReturnPwrLevel
OUT : {BSPower2Struct}{PowerLevelSS} if ReturnPwrLevel defined, else 0


=head2 CheckIfMeasResultOnABIS

 CheckIfMeasResultOnABIS();

SUBROUTINE  : CheckIfMeasResultOnABIS
DESCRIPTION : Checks that No Measurement Result is sent on ABIS

IN  : Hash containing the following key(s):
        True  - State true/false (1/0)
        MessageTimeout - Timeout value
OUT : None


=head2 CreateDataPatternFile

 CreateDataPatternFile();

=head2 CreateSpeechParamHash

 CreateSpeechParamHash();

SUBROUTINE  : CreateParamHash
DESCRIPTION : Create parameter hash to be sent to subroutine SendSpeech

IN  : Hash containing the following key:
        SpeechType - Speech Type ('HR' or 'FR'. Default 'FR')
        SubCh - Subchannel for halfrate. ( Default 0)
OUT : Parameter hash


=head2 CreateSpeechPatternFile

 CreateSpeechPatternFile();

Subroutine: CreateSpeechPatternFile

Purpose:    Create a MSSIM pattern file

Input:      Hash containing the following key:
              SpeechFrames - Number of speech frames
              SilentFrames - Number of silent frames
              CMR_TAG      - CMR
              CMI_TAG      - CMI
              Rate         - Speech rate (FR / HR)
              speechfile   - Name of the generated cfg file

Output:     Name of the created pattern file


=head2 DeactivateCSData

 DeactivateCSData();

SUBROUTINE  : DeactivateCSData
DESCRIPTION : Activate sending of CS Data in TSS

IN  : TG number
      TRXC number
      TS number
      Data Rate
      Statistics (On, Off,)
      Result array
OUT : 0=Ok, 1=Error
      Result array updated with statistics


=head2 HandoverAccessMSSIM

 HandoverAccessMSSIM();

SUBROUTINE  : HandoverAccessMSSIM
DESCRIPTION : To send Handover Access to MSSIM and receive HandoverDetection
              from Abisco

IN  : ChType
OUT : None


=head2 InitSG

 InitSG();

SUBROUTINE  : InitSG
DESCRIPTION : Initializes Signal Generator

IN  : Instance    (Instance number)
OUT : None


=head2 MSSIMChAct

 MSSIMChAct();

SUBROUTINE  : MSSIMChAct
DESCRIPTION : To activate a channel in the MSSIM, sets
              the CcId package variable

IN  : $Bypass  (set to '1' to bypass MSSIM automatic LAPDm handling)
OUT : $CcId


=head2 MSSIMChRel

 MSSIMChRel();

SUBROUTINE  : MSSIMChRel
DESCRIPTION : To release a channel in the MSSIM, uses the package variable
              CcId to identify the opened channel

IN  :
OUT :


=head2 MSSIMTransferFile

 MSSIMTransferFile();

SUBROUTINE  : MSSIMTransferFile
DESCRIPTION :

IN  :     User
          Password
          LocalFilename
          RemoteFilename
OUT :     0 - OK
          1 - Error


=head2 MeasurementReporting

 MeasurementReporting();

SUBROUTINE  : MeasurementReporting
DESCRIPTION : Turns on Measurement Reporting

IN  : Hash containing the following key(s):
        State true/false (1/0)
OUT : None


=head2 RadioChRel

 RadioChRel();

SUBROUTINE  : RadioChRel
DESCRIPTION : BSC commands TRS to release all dedicated resources
              within the TRX.

IN  :
OUT :


=head2 ReceiveAbisco

 ReceiveAbisco();

SUBROUTINE  : ReceiveAbisco
DESCRIPTION : Receive a spontanious message from Abisco

IN  : Hash containing the following key(s):
        BTS      - Abisco connection parameter
        Timeout  - Timeout value
        Expect   - Expected message
        Supress  - Indicate if timeout errors should be supressed
                   (HandleError not called).
        L3DATA   - Reference to L3Data array of expected message
OUT : CauseValue


=head2 ReceiveAbiscoMessage

 ReceiveAbiscoMessage();

SUBROUTINE  : ReceiveAbiscoMessage
DESCRIPTION : Receive a spontanious message from Abisco

IN  : $BTS (Abisco connection parameter)
        Timeout value
        Expected message type
        Supress, "SupressError" if HandleError should not be called
OUT : Received Data hash


=head2 ResetTG

 ResetTG();

SUBROUTINE  : ResetTG
DESCRIPTION : Resets the TG to the one stored in Stored TG
IN  :    Cell, TG, MCTR
OUT :    Will die if errors found


=head2 SendData

 SendData();

SUBROUTINE  : SendData
DESCRIPTION : Activate sending of data, either from MSSIM or from TSS

IN  : Param hash including:
        $Param{TG}
        $Param{TRXC}
        $Param{TS}
        $Param{SubCh}         TCH sub channel (0/1)
        $Param{DTX}           DTX Downlink (On/Off)
        $Param{TypeOfCh}      According to Abisco Ch Activation, see IWD Browser
        $Param{AlgOrRate}     According to Abisco Ch Activation, see IWD Browser
        $Param{ChRate}        According to Abisco Ch Activation, see IWD Browser
        $Param{ChannelType}   According to Abisco Ch Activation, see IWD Browser
        $Param{MRVersion}     According to Abisco Ch Activation, see IWD Browser
        $Param{ICMI}          According to Abisco Ch Activation, see IWD Browser
        $Param{StartMode}     According to Abisco Ch Activation, see IWD Browser
        @{$Param{AMR}}        According to Abisco Ch Activation, see IWD Browser
        $Param{TFO}           According to Abisco Ch Activation, see IWD Browser
        $Param{SCS}           According to Abisco Ch Activation, see IWD Browser
        $Param{MACS}          According to Abisco Ch Activation, see IWD Browser
        $Param{SimTypeTSS}    TSS simulation type "Frames" or "LoopBack"
        $Param{StartCodec}    According to Abisco ActivateSpeech OPT1.CodecMode, see IWD Browser
        $Param{SPType1}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
        $Param{SPTime1}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
        $Param{SPType2}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
        $Param{SPTime2}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
        $Param{CodecDL1}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecUL1}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecTime1}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecDL2}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecUL2}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecTime2}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecDL3}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecUL3}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecTime3}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecDL4}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecUL4}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecTime4}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{LoopDelay}     According to Abisco ActivateSpeech OPT3, see IWD Browser
        $Param{SimTypeMSSIM}  "LOOP", "PRBS", "PLAY_CHK" or "PLAY_REC"
        $Param{TxFile}        TxFile for MSSIM, see Prisma GSM base
        $Param{RxFile}        RxFile for MSSIM, see Prisma GSM base
        $Param{RxMax}         Rxmax for MSSIM, see Prisma GSM base
        @{$Param{Codec}}      Used Codecs, MSSIM format example: ["AFS4_75", "AFS5_15", "AFS5_9", "AFS6_7"]
        $Param{TimeToRun}     Time to run (in seconds)
OUT : Error 0=OK, 1=error
      Error Reason
      Result hash including:
        @{$Result{Statistic1}}    MSSIM fixed counters
        @{$Result{Statistic2}}    MSSIM variable counters from Cnt parameter
        @{$Result{Statistic3}})   TSS counters
        @{$Result{CntRow0}})      Optional MSSIM variable counters from Cnt parameter, for GUI presentation
        @{$Result{CntRow1}})      Optional MSSIM variable counters from Cnt parameter, for GUI presentation
        @{$Result{CntRow2}})      Optional MSSIM variable counters from Cnt parameter, for GUI presentation
        @{$Result{CntRow3}})      Optional MSSIM variable counters from Cnt parameter, for GUI presentation
        @{$Result{CntRow4}})      Optional MSSIM variable counters from Cnt parameter, for GUI presentation
        @{$Result{CntRow5}})      Optional MSSIM variable counters from Cnt parameter, for GUI presentation


=head2 SendSpeech

 SendSpeech();

SUBROUTINE  : SendSpeech
DESCRIPTION : To activate sending of speech, either from MSSIM or from TSS

IN  : Param hash including:
        $Param{TG}
        $Param{TRXC}
        $Param{TS}
        $Param{SubCh}         TCH sub channel (0/1)
        $Param{DTX}           DTX Downlink (On/Off)
        $Param{TypeOfCh}      According to Abisco Ch Activation, see IWD Browser
        $Param{AlgOrRate}     According to Abisco Ch Activation, see IWD Browser
        $Param{ChRate}        According to Abisco Ch Activation, see IWD Browser
        $Param{ChannelType}   According to Abisco Ch Activation, see IWD Browser
        $Param{MRVersion}     According to Abisco Ch Activation, see IWD Browser
        $Param{ICMI}          According to Abisco Ch Activation, see IWD Browser
        $Param{StartMode}     According to Abisco Ch Activation, see IWD Browser
        @{$Param{AMR}}        According to Abisco Ch Activation, see IWD Browser
        $Param{TFO}           According to Abisco Ch Activation, see IWD Browser
        $Param{SCS}           According to Abisco Ch Activation, see IWD Browser
        $Param{MACS}          According to Abisco Ch Activation, see IWD Browser
        $Param{SimTypeTSS}    TSS simulation type "Frames" or "LoopBack"
        $Param{StartCodec}    According to Abisco ActivateSpeech OPT1.CodecMode, see IWD Browser
        $Param{SPType1}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
        $Param{SPTime1}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
        $Param{SPType2}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
        $Param{SPTime2}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
        $Param{CodecDL1}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecUL1}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecTime1}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecDL2}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecUL2}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecTime2}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecDL3}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecUL3}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecTime3}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecDL4}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecUL4}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{CodecTime4}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
        $Param{LoopDelay}     According to Abisco ActivateSpeech OPT3, see IWD Browser
        $Param{SimTypeMSSIM}  "LOOP", "PRBS", "PLAY_CHK" or "PLAY_REC"
        $Param{TxFile}        TxFile for MSSIM, see Prisma GSM base
        $Param{RxFile}        RxFile for MSSIM, see Prisma GSM base
        $Param{RxMax}         Rxmax for MSSIM, see Prisma GSM base
        @{$Param{Codec}}      Used Codecs, MSSIM format example: ["AFS4_75", "AFS5_15", "AFS5_9", "AFS6_7"]
        $Param{TimeToRun}     Time to run (in seconds)
OUT : Error 0=OK, 1=error
      Error Reason
      Result hash including:
        @{$Result{Statistic1}}    MSSIM fixed counters
        @{$Result{Statistic2}}    MSSIM variable counters from Cnt parameter
        @{$Result{Statistic3}})   TSS counters
        @{$Result{CntRow0}})      Optional MSSIM variable counters from Cnt parameter, for GUI presentation
        @{$Result{CntRow1}})      Optional MSSIM variable counters from Cnt parameter, for GUI presentation
        @{$Result{CntRow2}})      Optional MSSIM variable counters from Cnt parameter, for GUI presentation
        @{$Result{CntRow3}})      Optional MSSIM variable counters from Cnt parameter, for GUI presentation
        @{$Result{CntRow4}})      Optional MSSIM variable counters from Cnt parameter, for GUI presentation
        @{$Result{CntRow5}})      Optional MSSIM variable counters from Cnt parameter, for GUI presentation


=head2 SetBCCHType

 SetBCCHType();

SUBROUTINE  : SetBCCHType
DESCRIPTION : Sets BCCHType with UpdateCell. Note that this routine doesn't
              perform a complete start of the BTS.

IN  : Hash containing the following keys:
        BTS      - Abisco connection parameter (default $BTS)
        BCCHType - COMB or NCOMB (default $CombType)
OUT : Returns 1 if cell was updated, otherwise 0


=head2 SetBSPowerLevel

 SetBSPowerLevel();

SUBROUTINE  : SetBSPowerLevel
DESCRIPTION : Set BSPowerControl

IN  :
OUT : None


=head2 StartMeasRep

 StartMeasRep();

SUBROUTINE  : StartMeasRep
DESCRIPTION : Start measurment reporting

IN  : MsId. Needed when using with multiple mssim channel activations
OUT : None


=head2 StartRepChReq

 StartRepChReq();

SUBROUTINE  : StartRepChReq
DESCRIPTION : Start sending Repeated Channel Request

IN  :
OUT : None


=head2 StartTestData

 StartTestData();

SUBROUTINE  : StartTestData
DESCRIPTION : Starts testing of sending and recieving data frames

IN  :
OUT : None


=head2 StartTestSpeech

 StartTestSpeech();

SUBROUTINE  : StartTestSpeech
DESCRIPTION : Starts testing of sending and recieving speech frames

IN  : SubCh - Subchannel for halfrate. ( Default 0)
OUT : None


=head2 StopMeasRep

 StopMeasRep();

SUBROUTINE  : StopMeasRep
DESCRIPTION : Stop measurment reports

IN  : MsId. Needed when using with multiple mssim channel activations
OUT : None


=head2 StopRepChReq

 StopRepChReq();

SUBROUTINE  : StopRepChReq
DESCRIPTION : Stop sending Repeated Channel Request

IN  : None
OUT : None


=head2 StoreTG

 StoreTG();

SUBROUTINE  : StoreTG
DESCRIPTION : Store TG parameters. This subroutin shall be followed by ResetTG
IN  :    {Cell}, {TG}, {MCTR};
OUT :


=head2 TSConfigReq

 TSConfigReq();

SUBROUTINE  : TSConfigReq
DESCRIPTION : Configure a TS

IN  :
OUT :


=head2 TSDisableReq

 TSDisableReq();

SUBROUTINE  : TSDisableReq
DESCRIPTION : Disable a TS

IN  :
OUT :


=head2 TSEnableReq

 TSEnableReq();

SUBROUTINE  : TSEnableReq
DESCRIPTION : Enable a TS

IN  :
OUT :


=head2 checkSDCCHMeasurementResultsScheduling

 checkSDCCHMeasurementResultsScheduling();

SUBROUTINE  : checkSDCCHMeasurementResultsScheduling
DESCRIPTION : To check that the scheduling of measurement results on Abis
              are correct for SDCCH channels

IN  : File name, allowed deviation from correct frame numbers
OUT : success (number of correct messages), error (0)


=head2 transformRequestReferenceToPosssibleFrameNumbers

 transformRequestReferenceToPosssibleFrameNumbers();

SUBROUTINE  : transformRequestReferenceToPosssibleFrameNumbers
DESCRIPTION : To transform the two last bytes of request reference to an
              array of possible frame number values

IN  : First byte(hex) second byte(hex)
OUT : Array of possible frame numbers (64 numbers)



=cut

=head1 NAME

subs_combcell


=head1 DESCRIPTION

Document number: 229/190 55-CAH 161 1607/1 Uen
MODULE      : subs_combcell
DESCRIPTION : This module contains subroutines for Combined Cell traffic
              tests.

COPYRIGHT © : ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV DATE      NAME      REVIEW    COMMENT


=head1 REQUIRES

L<Hash::Util> 

L<dbLog> 

L<mssim_sub> 

L<mssim> 

L<mssim_def> 

L<Abisco_Connection> 

L<subinit_combcell> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 ActivateCSData

 ActivateCSData();

SUBROUTINE  : ActivateCSData
DESCRIPTION : Activate CS data

IN  : Parameter Hash
OUT : None


=head2 BSPowerControl

 BSPowerControl();

SUBROUTINE  : BSPowerControl
DESCRIPTION : Sends a BSPowerControl command

IN  : ChType
OUT : cfg file given in string


=head2 ChActBTS

 ChActBTS();

SUBROUTINE  : ChActBTS
DESCRIPTION : To activate a channel in the BTS

IN  : Hash containing the following key(s):
              AMRCodec    -   AMR Codec
              ChRate      -   Channel rate
              TG          -   TG number
              TRXC        -   TRXC
              TS          -   Timeslot number
              ChType      -   Channel Type
              ActType     -   Activation type
              TypeOfCh    -   Type of Channel
              AlgOrRate   -   GSM algorithm or Rate
              ChAct       -   Channel Activation type
              RFB         -
              AlgId       -   Algorithm ID
              AckType     -   Acknowledgement type (Ack/NAck)
              StartMode   -
              ICP         -
              CI          -
              MRver       -
              MultiRateConfig - Multirate configuration
              lIgnoreBSPower - set to true to disble BSPower
              lIgnoreChannelMode - set to true to disble ChannelMode struct
OUT : Result hash from BTS channel activation


=head2 ChRelBTS

 ChRelBTS();

SUBROUTINE  : ChRelBTS
DESCRIPTION : To release a channel in the BTS

IN  : Hash containing the following key(s):
              ChType    - Channel type
              TG        - TG number
              TRXC      - TRXC
              TS        - Timeslot number
              EP1_BEH   - EP1 Behaviour
OUT : None


=head2 ChannelTypeTxFile

 ChannelTypeTxFile();

SUBROUTINE  : ChannelTypeTxFile
DESCRIPTION : Returns .cfg file needed for each type of channel type

IN  : ChType
OUT : cfg file given in string


=head2 CheckCauseValue

 CheckCauseValue();

SUBROUTINE  : CheckCauseValue
DESCRIPTION : Compares the causevalue in response if a required value

IN  : $RespCauseValue          Response from eg. "ChannelActivation..."
OUT : 0 or 1


=head2 DeactivateCSData

 DeactivateCSData();

SUBROUTINE  : DeactivateCSData
DESCRIPTION : Dectivate CS data

IN  : Parameter Hash
OUT : None


=head2 GetTSCparameters

 GetTSCparameters();

SUBROUTINE  : GetTSCparameters
DESCRIPTION : To get the appropriate TSC_SET and TSC depending
              of wanted ChType when using VAMOS
              TSC on MSSIM is a combination of TSC_SET and TSC

IN  : ChType- Valid parameters: Bm
                                Bm_1
                                Lm/0
                                Lm/1
                                Lm/0_1
                                Lm/1_1
OUT : Hash containing TSC_SET
                      TSC
                      MixingOrder
                      MSCapability
                      MSSIM_TSC
                      SubTs


=head2 StartLoopMSSIM

 StartLoopMSSIM();

SUBROUTINE  : StartLoopMSSIM
DESCRIPTION : To start the loop function in MSSIM

IN  : Parameter Hash
OUT : 0=OK



=cut

=head1 NAME

Subs_CSData


=head1 DESCRIPTION


      Copyright (C) 2006 by 
      ERICSSON AB 
      S-164 80 STOCKHOLM 
      Phone +46 8 719 0000     
      Company Registration number: 556056-6258 
      The program may be used and/or copied only with the written 
      permission from Ericsson AB, or in accordance with 
      the terms and conditions stipulated in the agreement/contract 
      under which the program has been supplied. 
      All rights reserved

			Module: 
			 csdata.abi

      Author: 
       Stefan Mohlin

      Description: 
 				Test program for sending Circuit Switched Data from TSS and
        loop i back from a mobile simulator (CRTC or Prisma MSSIM)

        Also the csdatafunc.pm program is needed. This program
        sends the commands to TSS and the mobile simulator.

        The program works for all Data rates and all Abis Modes.

        For more information, see document:
        	User Guide Payload testing with Abisco
          2/198 17-FCD 201 33 Uen 
          (The document comes with the Abisco installation) 
         
      File Revision: 
		P1A 090820 ERATZIS Based on csdata.pl
  	P1B 100611 ESTEMOH Updated for loop of CS data
  	P1C 100705 ESTEMOH Updated to use hash in SendCSData call




=head1 REQUIRES

L<Tk::HList> 

L<Tk::LabFrame> 

L<Tk> 

L<csdatafunc(SendCSData)> 

L<Exporter> 


=head1 METHODS

=head2 ButtonNext

 ButtonNext();

Subroutine: ButtonNext
Purpose:    To dispaly "nex" statistics
Input:	  	Previous button
            Next button
Output:     None


=head2 ButtonPrev

 ButtonPrev();

Subroutine: ButtonPrev
Purpose:    To dispaly "previous" statistics
Input:	  	Previous button
            Next button
Output:     None


=head2 ChangePatternFile

 ChangePatternFile();

Subroutine: ChangePatternFile
Purpose:    To change path and filename for pattern file
            Update codec settings for AMR
Input:	  	Index to actual speech type
Output:     None


=head2 ClearStatistics

 ClearStatistics();

Subroutine: ClearStatistics
Purpose:    To clear statistics. This routine is called when the "Clear Statistics"
            butten is slected.
Input:	  	Previous button
            Next button
Output:     None


=head2 CreateGUI

 CreateGUI();

Subroutine: CreateGUI
Purpose:    To create the GUI for CS Data

Input:	  	None
Output:     None


=head2 DisplayStatistics

 DisplayStatistics();

Subroutine: DisplayStatistics
Purpose:    To dispaly statistics on the GUI
Input:	  	Result number
Output:     None


=head2 GetStatistics

 GetStatistics();

Subroutine: GetStatistics
Purpose:    To save statistics received from csdatafunc.pm in a hash
Input:	  	Result text
		  			Result array
Output:     Succes rate
            Global hash %ResultHash updated


=head2 PopUp

 PopUp();

Subroutine: PopUp
Purpose:    To present a pop-up window with OK and Cancel buttons
Input:	  	Text to display
            Button (OK or OKCancel)
Output:     Selected button (OK or Cancel)


=head2 ReadPatternConfigFile

 ReadPatternConfigFile();

Subroutine: ReadPatternConfigFile
Purpose:    To read the configuration file for pattern files
Input:	  	None
Output:     None


=head2 SaveStatistics

 SaveStatistics();

Subroutine: SaveStatistics
Purpose:    To save statistics. This routine is called when the "Save Statistics"
            butten is slected.
            Loop through %ResultHash and call "SaveStatisticsToFile"
Input:	  	None
Output:     None


=head2 SaveStatisticsLog

 SaveStatisticsLog();

Subroutine: SaveStatistics
Purpose:    To save statistics. This routine is called when no GUI is used

            Loop through %ResultHash and call "SaveStatisticsToFileNoGUI"
Input:	  	None
Output:     None


=head2 SaveStatisticsToFile

 SaveStatisticsToFile();

Subroutine: SaveStatisticsToFile
Purpose:    To save statistics to file
Input:	  	Result number in Result hash
Output:     None


=head2 StartTest

 StartTest();

Subroutine: StartTest
Purpose:    This routine is called when the "Start Test" button is pressed.
            - It checks the input parameter
            - Calls subroutine SendCSData in csdatafunc.pm to run the test
            - Show results from test
Input:	  	"Previous" button
		  			"Next" button
Output:     None



=cut

=head1 NAME

Subs_CSServices


=head1 DESCRIPTION

Document number: 143/190 55-CAH 161 1607/1 Uen
MODULE      : Subs_CSServices.pm
DESCRIPTION : This program contains subroutines for Circuit Switch Services

COPYRIGHT © : ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV DATE      NAME      REVIEW            COMMENT
A   20100921  ERAKOSI   Syntronic AB/     File created. Approved UABTOH.
                        Martin Wikström
B   20110520  XNICOST   XTOBSEM           Added CorruptDLFrames_CSData and CorruptDLFrames_CSpeech
C   20120629  XMAREDV   XAMMELY           Changed FindMsgInLog to seperate DL/UL messages
                                           Added ActivateTLSI
                                           Updated ActivateTLSI
                                           Updated script to import $TG, $TRXC, $Cell and $TRXList
                                           from subinit, Added strict, warnings, diagnostics and Perl
                                           Critic(HP14558).
                                           Updated script template, added functions
                                           FindEmptyDLInfoInLog and FindRIFInLog
                                           Updated script according to HP55536, HP70500 and HP70529.
PD1 20131121  XAMMELY   XSALNIC           Changed ScanLog to support IP configuration,
                                           Added "TypeOfCh" in Subroutine "ChannelActAsyncHandover".


=head1 REQUIRES

L<English> 

L<Carp> 

L<Hash::Util> 

L<PerlFunc> 

L<SubInit_CSServices> 

L<mssim_sub> 

L<mssim> 

L<AbiscoFunc2> 

L<dbLog> 

L<Abisco_Connection> 

L<DBI> 

L<csdatafunc> 

L<PerlFunc> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 ActivateFERMeasurement

 ActivateFERMeasurement();

SUBROUTINE  : ActivateFERMeasurement
DESCRIPTION : Activate FER measurement

IN  : Parameter hash
OUT : 0=OK, 1=Error


=head2 ActivateHandoverPendingChannel

 ActivateHandoverPendingChannel();

SUBROUTINE  : ActivateHandoverPendingChannel
DESCRIPTION : To update speech in TSS

IN  : Parameter hash
OUT : 0=OK, 1=Error


=head2 ActivateTLSI

 ActivateTLSI();

SUBROUTINE  : ActivateTLSI
DESCRIPTION :

IN  : TG, TLSI
OUT : None


=head2 ChannelActAsyncHandover

 ChannelActAsyncHandover();

SUBROUTINE  : ChannelActAsyncHandover
DESCRIPTION : To activate a channel in the BTS

IN  : $TG, $TRXC, $TS, $DTX, $ChannelRate, $AlgOrRate
OUT : None


=head2 ConnectToMSSIM

 ConnectToMSSIM();

SUBROUTINE  : ConnectToMSSIM
DESCRIPTION :

IN  : Parameter hash
OUT : Parameter hash, Error


=head2 CorruptDLFrames_CSData

 CorruptDLFrames_CSData();

SUBROUTINE  : CorruptDLFrames_CSData
DESCRIPTION : Start or stop corrupting DL CSData frames with bit errors

IN  : Mode      => 'ON' or 'OFF'
      TimeToRun => Time to run in seconds. Will resend Update Command
                   every fourth second so that corrupted frames are sent
                   for at least this specified time
                   '1' (or undefined) will send command once
OUT : Error        1 if Error
                         0 if no Error


=head2 CorruptDLFrames_Speech

 CorruptDLFrames_Speech();

SUBROUTINE  : CorruptDLFrames_Speech
DESCRIPTION : Start or stop corrupting DL speech frames with bit errors

IN  : Mode      => 'ON' or 'OFF'
      TimeToRun => Time to run in seconds. Will resend Update Command
                   every fourth second so that corrupted frames are sent
                   for at least this specified time
                   '1' (or undefined) will send command once
OUT : Error        1 if Error
                         0 if no Error


=head2 CreateParamHash

 CreateParamHash();

SUBROUTINE  : CreateParamHash
DESCRIPTION : To create parameter hash to be sent to subroutine SendSpeech
            in module speechfunc.pm.
            See speechfunc.pm for parameter layout

IN  : Speech Type
OUT : Parameter hash


=head2 DeactivateFERMeasurement

 DeactivateFERMeasurement();

SUBROUTINE  : DeactivateFERMeasurement
DESCRIPTION : Deactivate FER measurement

IN  : None
OUT : 0=OK, 1=Error


=head2 FindBFIInfoInLog

 FindBFIInfoInLog();

SUBROUTINE  : FindBFIInfoInLog
DESCRIPTION : To find BFI values in log

IN  : None
OUT : Array


=head2 FindEmptyDLInfoInLog

 FindEmptyDLInfoInLog();

SUBROUTINE  : FindEmptyDLInfoInLog
DESCRIPTION : To find empty downlink in log

IN  : None
OUT : Array


=head2 FindFrameClassificationInfoInLog

 FindFrameClassificationInfoInLog();

SUBROUTINE  : FindFrameClassificationInfoInLog
DESCRIPTION : To find frame classification in log

IN  : None
OUT : Array


=head2 FindMsgInLog

 FindMsgInLog();

SUBROUTINE  : FindMsgInLog
DESCRIPTION : To find a message in log

IN  : LogFile
OUT : Array


=head2 FindRIFInLog

 FindRIFInLog();

SUBROUTINE  : FindRIFInLog
DESCRIPTION : To find RIF values in log

IN  : None
OUT : Array


=head2 FindSIDInfoInLog

 FindSIDInfoInLog();

SUBROUTINE  : FindSIDInfoInLog
DESCRIPTION : To find SID Info in log

IN  : None
OUT : Array


=head2 FindUmPatternInLog

 FindUmPatternInLog();

SUBROUTINE  : FindUmPatternInLog
DESCRIPTION : To find Um Pattern in log

IN  : None
OUT : Array


=head2 GetAMRParam

 GetAMRParam();

SUBROUTINE  : GetAMRParam
DESCRIPTION : To prepare AMR parameters for BTS Channel Activation

IN  : Action, Param
OUT : Param


=head2 GetAbsFreqSG

 GetAbsFreqSG();

SUBROUTINE  : GetAbsFreqSG
DESCRIPTION : To get the absolute frequencies of DL and UL on BTS

IN  : Arfcn
            FreqBand
OUT : FrequencyHash => Uplink, Downlink


=head2 GetCodec

 GetCodec();

SUBROUTINE  : GetCodec
DESCRIPTION : Get get select codecs for AMRFR, AMRWB OR AMRHR

IN  : Speech Type
OUT : Global hash %SpeechHash updated with updated with codec bitmap


=head2 HexToBinary

 HexToBinary();

SUBROUTINE  : HexToBinary
DESCRIPTION : To Convert a Hex value to Bin

IN  : HEX
OUT : Bin


=head2 InitSG

 InitSG();

SUBROUTINE  : SetSSQIUinDVT
DESCRIPTION : Initializes Signal Generator

IN  : Instance
OUT : None


=head2 ReadPatternConfigFile

 ReadPatternConfigFile();

SUBROUTINE  : ReadPatternConfigFile
DESCRIPTION : To read the configuration file for pattern files

IN  : None
OUT : None


=head2 ReadPatternFile

 ReadPatternFile();

SUBROUTINE  : ReadPatternFile
DESCRIPTION : To update the codec settings based on the pattern file

IN  : Index to actual speech type
            AMR Type
            Reference to Codec array
OUT : None


=head2 ScanLog

 ScanLog();

SUBROUTINE  : ScanLog
DESCRIPTION : Scans lsu text file for a specific TRAU message

IN  : Parameter hash:
      LogFile, Type, Direction, Txt, CountMinimum
OUT : None


=head2 ScanLogNot

 ScanLogNot();

SUBROUTINE  : ScanLogNot
DESCRIPTION : Scans lsu text file for a specific TRAU message

IN  : Parameter hash:
      LogFile, Type, Direction, Txt, CountMinimum
OUT : None


=head2 SendTSConfigRequest

 SendTSConfigRequest();

SUBROUTINE  : SendTSConfigRequest
DESCRIPTION : To Enable a Time Slot

IN  : None
OUT : None


=head2 SendTSDisableRequest

 SendTSDisableRequest();

SUBROUTINE  : SendTSDisableRequest
DESCRIPTION : To Disable a Time Slot

IN  : None
OUT : None


=head2 SendTSEnableRequest

 SendTSEnableRequest();

SUBROUTINE  : SendTSConfigRequest
DESCRIPTION : To Enable a Time Slot

IN  : None
OUT : None


=head2 SetAmpSG

 SetAmpSG();

SUBROUTINE  : SetAmpSG
DESCRIPTION : Sets the amplitude value of the signal generator.
            When no AbsAmp input exists, the RelAmp Sets the amplitude value
            as it should be on the RX input of the BTS.
            To calculate the amplitude to set on the signal generator, the
            SG TTA will add this value to the attenuation set with the
            'SaveSGAttenuation' command.

IN  : Instance    (Instance number)
            RelAmp      (Relative Amplitude of noise)
            AbsAmp      (Absolute Amplitude of noise)
OUT : None


=head2 SetFreqSG

 SetFreqSG();

SUBROUTINE  : SetFreqSG
DESCRIPTION : Sets the output frequency of the signal generator.

IN  : Instance    (Instance number)
            AbsFreq     (Absolute frequency, if DL is used)
OUT : None


=head2 SetMSSIMPowerControl

 SetMSSIMPowerControl();

SUBROUTINE  : SetMSSIMPowerControl
DESCRIPTION : Set MSSIM Power Control to input value

IN  : %Param
OUT : None


=head2 SetOutputSG

 SetOutputSG();

SUBROUTINE  : SetOutputSG
DESCRIPTION : Turn On or Off the Signal geenrator

IN  : Instance    (Instance number)
            Output      ('On' / 'Off')
OUT : None


=head2 SetSSQIUinDVT

 SetSSQIUinDVT();

SUBROUTINE  : SetSSQIUinDVT
DESCRIPTION : Set SSQIU parameter in DVT

IN  : HW   - HW to execute command on
                Mode   - 'on', 'off'
                TS     - Timeslot
OUT : 0=OK, 1=Error


=head2 SetTLS

 SetTLS();

SUBROUTINE  : SetTLS
DESCRIPTION : To modify TLS
example:    SetTLS(TLSA=>'yes', TLSI =>'no');
IN  : TLSA, TLSI
OUT : None


=head2 UpdateCSData

 UpdateCSData();

SUBROUTINE  : UpdateCSData
DESCRIPTION : To update (and insert faults) in CS Data in TSS

IN  : Parameter hash
OUT : 0=OK, 1=Error


=head2 UpdateSpeech

 UpdateSpeech();

SUBROUTINE  : UpdateSpeech
DESCRIPTION : To update speech in TSS, either "Frames" or "LoopBack"

IN  : Parameter hash
OUT : 0=OK, 1=Error


=head2 UpdateSpeechAND

 UpdateSpeechAND();

SUBROUTINE  : UpdateSpeechAND
DESCRIPTION : To update speech in TSS, either "Frames" or "LoopBack"

IN  : Parameter hash
OUT : 0=OK, 1=Error


=head2 UpdateSpeechORMask

 UpdateSpeechORMask();

SUBROUTINE  : UpdateSpeechORMask
DESCRIPTION : To update speech in TSS, either "Frames" or "LoopBack"

IN  : Parameter hash
OUT : 0=OK, 1=Error


=head2 UpdateSpeechXOR

 UpdateSpeechXOR();

SUBROUTINE  : UpdateSpeechXOR
DESCRIPTION : To update speech in TSS, either "Frames" or "LoopBack"

IN  : Parameter hash
OUT : 0=OK, 1=Error



=cut

=head1 NAME

Subs_divsuper


=head1 DESCRIPTION

Document number: 161/190 55-CAH 161 1607/1
MODULE      : Subs_divsuper
DESCRIPTION : Contains subroutines for Diversity Supervision tests

COPYRIGHT ©: ERICSSON AB S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE       NAME     REVIEW      COMMENT
A     20101005   QRADGUT  XRSSAJO     File created. Approved UABTOH.


=head1 REQUIRES

L<Exporter> 

L<Carp> needed for 'croak' function

L<HelpFunc(ConvertTrueFalse)> 

L<PerlFunc(PrettyPrint,> 

L<DVTFunc(DVTCommand)> 

L<AbiscoFunc2(GetSeveral)> 

L<lib> 

L<DBI> 

L<Msg(Strip)> 

L<User(Print)> 

L<Abisco_Connection(Do,> 

L<Switch> 


=head1 METHODS

=head2 AbisLoggingBTS

 AbisLoggingBTS();

Subroutine: AbisLoggingBTS
Purpose:    Turn Abis logging off or on
Input:			State => 'OFF',
Output:


=head2 CallSetUp

 CallSetUp();

 Subroutine:  CallSetUp
Purpose: Setting up a Mobile Terminated call
Input:		$TG, $TRXC, $TS, $TCHSubCH, $SDCCHSubCH
Output:


=head2 ChannelActNormal

 ChannelActNormal();

ChannelActNormal
SYNTAX: ChannelActNormal('TimeSlot' => $T);
IN:
OUT:


=head2 ChannelRelease

 ChannelRelease();

ChannelRelease
SYNTAX: ChannelRelease('TimeSlot' => $T);
IN:
OUT:


=head2 CheckDiverSupImbalance

 CheckDiverSupImbalance();

CheckDiverSupImbalance via DVT
IN:  $TRXC
OUT: Imbalance between antennas (A-B,B-D..etc)


=head2 CheckRDiv

 CheckRDiv();

CheckRDiv via DVT
IN:  $TRXC
OUT: $CurrRDiv


=head2 ClearLogFile

 ClearLogFile();

--FUNCTION : ClearLogFile
COMMENT  :

IN       :
OUT	   :
--

=head2 CompleteStart

 CompleteStart();

--FUNCTION : CompleteStart
COMMENT  :
Syntax   : CompleteStart(TypeOfstart => 'DXU');
IN       :
OUT	   :
--

=head2 CompleteStartWithParamters

 CompleteStartWithParamters();

Subroutine: CompleteStartWithParamters
Purpose:    To do a complete start on choosen TG
Input:			%Input ->TG,
Output:     %return (Hash reference);


=head2 ConfigMO

 ConfigMO();

--FUNCTION : ConfigMO
COMMENT  : Configures MOs TX, RX and TS
Syntax   : ConfigMO({TRXC => $TRXC, MO => $MO, RXDiv => $RXDiv, etc.});
IN	   : Optionally  one or more of the following
           keys: TRXC, FreqSpec, Power, NoFreqSpec, FM, BCC, AIP, MO
OUT	   :
--

=head2 ConfigMORX

 ConfigMORX();

Subroutine: ConfigMORX
Purpose:    To send a RX_CONFIGURATION_REQUEST and read the received
            frames on abis instead from abisco.
Input:			%Input ->BTS, TG, TRXC, MO
Output:     %return (Hash reference);


=head2 ConfigRUT

 ConfigRUT();

Subroutine: ConfigRUT
Purpose:
Input:
Output:


=head2 ConfigRxDiversity

 ConfigRxDiversity();

--FUNCTION : ConfigRxDiversity
COMMENT  : Configuration of RX Diversity on TRXC:
           TRXCMaster & TRXCSlave
IN	   :
OUT	   : None
--

=head2 ConfigTS

 ConfigTS();

=head2 ConnectMO

 ConnectMO();

--FUNCTION : ConnectMO
COMMENT  : Sends ConnectCommand to MO defined by MOClass, InstanceNo
           and AssosiatedSOInstance and checks ConnectComplete.
IN	   : Optionally one or more of the following
           keys: TRXC, MO, MOState, INST, ASOInst
OUT	   : None
--

=head2 ConnectResetStart

 ConnectResetStart();

--FUNCTION : ConnectResetStart
COMMENT  : ConnectResetStart
IN	   : Optionally one or more of the following
           keys: TRXList, MO
OUT	   : None
--

=head2 ConnectTG

 ConnectTG();

--FUNCTION : ConnectTG
COMMENT  :
Syntax   : ConnectTG(TransceiverGroup => 0);
IN       :
OUT	   :
--

=head2 ConvertToFloat

 ConvertToFloat();

--FUNCTION : ConvertToFloat
COMMENT  : Converts numbers in string format ("-15.12") to Floating
           Point values (-15.12)
IN	   : \@RawStrings - Reference to Array containing numbers in
                          string format (e.g. "15.12", "12.65")
OUT	   : \@Floats - Reference to Array containing Floating Point
                      values (e.g. 15.12, 12.65)
--

=head2 DbCheckTable

 DbCheckTable();

Subroutine: CheckTable
Purpose:    To check if table is in used database
Input:			filename
						tablename
Output:     1 for true, 0 for false


=head2 DbReport

 DbReport();

Subroutine: DbReport
Purpose:    To send log text from the Result hash to file.
Input:	  	None
Syntax:     DbReport(DbName => 'data');
Output:     None


=head2 DealocateLAPD

 DealocateLAPD();

Subroutine: DealocateLAPD
Purpose:    Defines cell in choosen TG
Input:			%Input ->TGId,PC_Handle, PC_TEI
Output:     %return (Hash reference);


=head2 DecodeAttribute

 DecodeAttribute();

Subroutine: DecodeAttribute
Purpose:    To decode an attributed record in Capabilities Result
Input:      Attribute Recorded
Output:     None, Output will be written in the file


=head2 DefineCellBTS

 DefineCellBTS();

Subroutine: DefineCellBTS
Purpose:    Defines cell in choosen TG
Input:			%Input ->TG,CellNr
Output:     %return (Hash reference);


=head2 DeleteTGBTS

 DeleteTGBTS();

Subroutine: DeleteTGBTS
Purpose:    Deletes choosen TG
Input:			%Input ->TG,CellNr
Output:     %return (Hash reference);


=head2 DisableAllTS

 DisableAllTS();

--FUNCTION : DisableAllTS
COMMENT  : Disable all TS for a given TRX
IN	   : Optionally the keys TRXC, ASOInst
OUT	   :
--

=head2 DisableMO

 DisableMO();

--FUNCTION : DisableMO
COMMENT  : Sends DisableRequest to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks DisableResult.
IN	   : Optionally a reference to a Hash
           containing one or more of the following
           keys: TRXC, MO, MOState, ASOInst, ReasonCode, ResultCode
           ASOInst, INST
Out	   : None
--

=head2 DisconnectCall

 DisconnectCall();

 Subroutine:  DisconnectCall
Purpose: Disconnecting call
Input:		$LMSID
Output:


=head2 DisconnectMO

 DisconnectMO();

--FUNCTION : DisconnectMO
COMMENT  : Sends DisconnectCommand to MO defined by MOClass, InstanceNo
           and AssosiatedSOInstance and checks DisconnectComplete.
IN	   : Optionally one or more of the following
           keys: TRXC, MO, MOState, INST, ASOInst
OUT	   : None
--

=head2 DisconnectTG

 DisconnectTG();

--FUNCTION : DisconnectTG
COMMENT  :
Syntax   : DisconnectTG(TransceiverGroup => 0);
IN       :
OUT	   :
--

=head2 EnableAllTS

 EnableAllTS();

--FUNCTION : EnableAllTS
COMMENT  : Enable all TS For a given TRX
IN	   : Optionally the key TRXC
OUT	   :
--

=head2 EnableMO

 EnableMO();

--FUNCTION : EnableMO
COMMENT  : Sends EnableRequest to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks EnableResult.
IN	     : Optionally a reference to a Hash containing
           one or more of the following
           keys: TRXC, MO, MOState, ASOInst
OUT	     : None
--

=head2 EstablishLAPD

 EstablishLAPD();

--FUNCTION : EstablishLAPD
COMMENT  : Establish LAPD (L2) link
IN	   : Optionally one or more of the following
           keys: TRXC, MO, LinkType
OUT	 :
--

=head2 EstablishResetStart

 EstablishResetStart();

-COMMENT: EstablishResetStart
IN     : None
OUT    : None
-

=head2 FetchAttribute

 FetchAttribute();

Subroutine: FetchAttribute
Purpose:    Pick up one Attribute (Id, Length and Info) from the %Resp buffer
Input:      %Resp (global)
Output:     @Att (Attribute buffer)


=head2 FormatTestcaseName

 FormatTestcaseName();

Subroutine: FormatTestcaseName
Purpose:    Reformats the PAR hash test case name for printout purposes.
            If the input string is not on the format "XX_YY", it is returned unchanged.
Input:      TestcaseName => "xx_yy"
Output:     "xx.yy"


=head2 GetDateTime

 GetDateTime();

Subroutine: GetDateTime
Purpose:    Formats date and time
Input:	  	None
Output:     Formatted string with date and time


=head2 GetDateTimeForFileName

 GetDateTimeForFileName();

Subroutine: GetDateTimeForFileName
Purpose:    Formats date and time
Input:	  	None
Output:     Formatted string with date and time YYYYMMDD_HHMMSS


=head2 GetLast

 GetLast();

--FUNCTION : GetLast
COMMENT: Returns last value of a list
         (incl. removal of last character !)
IN	 : @List - as variable name says
Out	 : $_ - scalar containing last value of @List
--

=head2 GetMOStatus

 GetMOStatus();

-COMMENT: GetMOStatus
IN     : Optionally one or more of the following
         keys: TRXC, MO, INST, TFMode, MOState
OUT    : None
-

=head2 GetResult

 GetResult();

Subroutine: GetResult
Purpose:    Returns the TC result value
Input:	  	None
Output:     TC result value


=head2 GetTrxArray

 GetTrxArray();

--Subroutine: GetTrxArray
Purpose: 		Returns a TRX array
Input: 			None
Output: 		@TrxArray
--

=head2 HandleError

 HandleError();

Subroutine: HandleError
Purpose:    Performs necessary shutdowns and kills the program when an
						error occurs. It also log the errors and sets the TC result.
Input:	  	ErrMsg		(Contains information of the error cause)
Syntax:     HandleError(ErrMsg => 'error message');
Output:     None


=head2 HandleLogg

 HandleLogg();

Subroutine: HandleLogg
Purpose:    Saves logg message string to further saving in database by DbReport
Input:	  	LoggMsg		(Contains information of test case senario)
Syntax:     HandleLogg(LoggMsg => 'message');
Output:     None


=head2 InfoCellBTS

 InfoCellBTS();

Subroutine: InfoCellBTS
Purpose:    To get cell information about active cell
Input:			Cell => 0
Output:


=head2 InfoTGBTS

 InfoTGBTS();

Subroutine: InfoTGBTS
Purpose:    To get tg information about active tg
Input:			None
Output:


=head2 InitResult

 InitResult();

Subroutine: InitResult
Purpose:    To initiate the Result hash
Syntax :	  InitResult();
Output :    None


=head2 MakeBin

 MakeBin();

Subroutine: MakeBin
Purpose:    To convert an 8 bit integer to a binary string
Input:      Integer
Output:     Binary as string


=head2 NewTGBTS

 NewTGBTS();

Subroutine: NewTGBTS
Purpose:    Creates new TG
Input:			%Input -> TGId, Model, TGBand, Cabinet, AbisVersion,
                      SatelliteAbis, NumberOfTRX, TRXTypeList, Encryption,
                      AbisMode
Output:     %return (Hash reference);


=head2 Octets

 Octets();

=COMMENT: Split an integer into octets
IN:  $1 - An integer (max 32 bits)
     $2 - No. of octets (1..4) (hi bits lost if too few), default is 2.
OUT: @1 - Octet list, low bits at the left


=head2 ReceiveAbiscoMsg

 ReceiveAbiscoMsg();

ReceiveAbiscoMsg
SYNTAX: Expect {Message}
IN:
OUT:


=head2 ReleaseLAPD

 ReleaseLAPD();

--FUNCTION: ReleaseLAPD
COMMENT: ReleaseLAPD (L2) link
Syntax : ReleaseLAPD(TRXC => $TRXC, MO => $MO, LinkType => $inkType);
IN	 : Optionally one or more of the following keys:
         MO, TRXC, LinkType
OUT	 :
--

=head2 ResetMO

 ResetMO();

--FUNCTION : ResetMO
COMMENT  : Sends ResetCommand to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks ResetComplete.
IN	   : Optionally one or more of the following
           keys: TRXC, MO, MOState, INST, ASOInst, BACKCOMP
OUT	   : None
--

=head2 SplitString

 SplitString();

--FUNCTION : SplitString
COMMENT  : Returns a list with splitted string (Delimiter: Whitespace)
IN	   : $String - as variable name says
Out	   : @String - list with splitted string
--

=head2 StartConfigEnable

 StartConfigEnable();

--FUNCTION : StartConfigEnable
COMMENT  : Sends StartRequest to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks StartResult.
           Calling support function DisableConfigEnable.
IN	   : Optionally one or more of the following
           keys: TRXC, MO, MOState, INST, ASOInst
OUT	   : None
--

=head2 StartMO

 StartMO();

--FUNCTION : StartMO
COMMENT  : Sends StartRequest to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks StartResult.
IN	   : Optionally one or more of the following
           keys: TRXC, MO, INST, ASOInst
OUT	   :
--

=head2 StartStopLoggingDVT

 StartStopLoggingDVT();

Subroutine: StartStopLoggingDVT
Purpose:    Creates  a file with DVT log
Input:			%Input ->TG,
Output:     %return (Hash reference);


=head2 UndefineCellBTS

 UndefineCellBTS();

Subroutine: UndefineCellBTS
Purpose:    Undefines a cell
Input:			%Input ->TG,CellNr
Output:     %return (Hash reference);


=head2 UpdateCell

 UpdateCell();

--FUNCTION : UpdateCell
COMMENT  :
Syntax   : UpdateCell(CellNr => $CellNr, BCCHno => $BCCHno, BSPWRB => $BSPWRB,
                      BSPWRT => $BSPWRT, BS_AG_BLKS_RES => $BS_AG_BLKS_RES,
                      BS_PA_MFRMS => $BS_PA_MFRMS, PLMN => $PLMN, BCC => $BCC);
IN       :
OUT	     :
--

=head2 UpdateTG

 UpdateTG();

--FUNCTION : UpdateTG$TransceiverGroup
COMMENT  : Abis mode TDM or SC. For other modes the script shall be updated
Syntax   : UpdateTG(AbisMode => $AbisMode);
IN       :
OUT	     :
--


=cut

=head1 NAME

Subs_DTX


=head1 DESCRIPTION

Document number : 131/190 55-CAH 161 1607/1 Uen
MODULE          : Subs_DTX
DESCRIPTION     : Contains subroutines that will be used in DTX tests

COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258

The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE       NAME             REVIEW          COMMENT
A     20080215   ERAHEIK                          Derived from old dtx.abi
B     20101001   Syntronic AB/    Syntronic AB/   Added support for TC 12.01. Converted to strict. Added dbLog Support.
                 Martin Wikström  Fredrik Lie     Approved UABTOH
C     20110428   XDAVMEL          XTOBSEM          Updated VerifyDownlinkSpeech to measure TRX power OFFs using MSSIM
                                                  Added sub GetTRXValuesMSSIM
                                                  Updated SetTG and VerifyTRAU to support SC and made small
                                                    stability changes to VerifyDownlinkSpeech .
                                                    Removed exporting of unexisting subs
                                                  More minor changes to VerifyDownlinkSpeech to improve stability
                                                  Fixed bug i SetTG (TR HN63575)
                                                  Updated VerifyTRAU with correct position of SID Codeword
                                                  Removed unused inclusions
                                                  Added GetNoOfMSSIMTRX and removed TXConfigRequest
                                                  Added ChActAsynchHO, StartPRBS_data, ChActMSSIM
                                                  Added possibility to create DATA 14.4NT pattern files in CreateSpeechPatternFile
                                                   Added possibility to use a reference Power in VerifyDownlinkSpeech
                                                  Commented out InfoTool command in InitSG since it might be a problem with
                                                    return strings being longer than 100 signs
D     20120629   EERICSV          XSOFFRO         Added UpdateCSData, VerifyDownlinkCSData, ChActSecChannelMulti,
                                                   GenerateSpeechAndAbisLogNoTXPower, HandoverAccessMSSIM, CheckFillingOption
                                                  Fixed bug in ChActMSSIM (global $AMR not used anymore)
                                                  Updated UpdateSpeech to take sub ch parameter
                                                  Changed SetSSQIUinDVT to take TRXC instead of hardcoded TRXC0
                                                  Added GenerateSpeechAndAbisLogNoTXPower, HandoverAccessMSSIM
                                                  Uppdated according perlcritic and implemented TSS logging
                                                  Implemented dynamic TG.
PE1   20121115   EDAMELI          ENASNAV         Bug fix in SetFreqSG (use of correct TRXC), HQ63918
PE2   20121120   EDAMELI          QYVOOPP         Minor bug fix (TRCX => TRXC)
PE3   20121130   EDAMELI          XANSBEM         Rewrote VerifyDownlinkSpeech
                                                   Added CheckSIDCodeWord
PE4   20121203   EDAMELI          XANSBEM         Modified VerifyDownlinkSpeech and CheckSIDCodeWord for Half rate
                                                   Added IsInSIDPosition
PE5   20121206   EDAMELI          ENASNAV         Updated VerifyDownlinkSpeech to accept a few (2 per 5 seconds)
                                                    TX Power On frames due to TSS TR 15920
PE6   20130314   XHENRMA          XANSBEM         Added subroutine VerifyDownlinkSID, updated SimulateSilenceAndVerifyFrames
                                                   and FindMessagesInLog
PE7   20131202   XPATHIL          XHENRMA         Merging findMessagesInLog from Packet Data subs labeled HR74564_VF01 (new IP-logging).
                                                   FindMessagesInLog now supports TFP-packets. Added sub BPSplit [v0.5] from same subs
                                                   version (HR74564_VF01). Added subs GetValuesFromLogMessage and TFPModify for new
                                                   IP-logging. Modified SetAbisAndTCHMode, SimulateSilenceAndVerifyFrames and


=head1 REQUIRES

L<English> 

L<Hash::Util> 

L<Carp> 

L<Time::HiRes> 

L<psdatafunc> 

L<dbLog> 

L<mssim_def> 

L<mssim_sub> 

L<mssim> 

L<speechfunc> 

L<wireshark> 

L<lsuConfig> 

L<Storable> 

L<Net::FTP> 

L<PerlFunc> 

L<AbiscoFunc2> 

L<SubInit_DTX> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 ActivateCh

 ActivateCh();

SUBROUTINE  : ActivateCH
DESCRIPTION :

IN  : Parameter hash containing the following keys:
              AOR
              ChType
              ChRate
              TS
              TFO
              TRXC
              TypeOfCh
              S_Multi
              BSPower
              DTXd
              DTXu
              AMR
OUT :  None


=head2 BPSplit

 BPSplit();

SUBROUTINE  : BPSplit                                         [v0.5]
DESCRIPTION : Splits IP packets into BPFrames returning one frame for every call
              made to the function.
              Returns the input if no BP extraction needed, with flag set to else
              than 'REDO'.
COMMENT     : Checks the input
USAGE:      :
              # INSIDE FOR LOOP
              if ($RedoFlag ne 'REDO') {
                # Read new line from WLog
                my %RESP = $ABISlog -> TSSReadWLog();
                if(defined $RESP{Message}){
                @MsgContainer = unpack('H*', $RESP{Message}); # if 'C*' use HexOrDec = 'Dec'
              }
              # Always perform the BPSplit (returns the input if no BP extraction needed)
              @Message = BPSplit(MessageRef => \@MsgContainer, S_CSAPI=>'TRUE', BPFlagRef => \$RedoFlag);
              # THE DO STUFF PART!
              # IN THE END OF FOR LOOP
              redo,if($RedoFlag eq 'REDO');
              # END

IN  : %lInput = (
        MessageRef    => undef,
        S_CSAPI       => 'FALSE' if older IP-SIU (before Y13),
        BPFlagRef     => undef,
        HexOrDec      => default 'Hex', put to 'Dec' when analysing
                          frames in Dec format
                    );
OUT : BPFrame in array or scalar depending on input type MessageRef


=head2 ChActAsynchHO

 ChActAsynchHO();

FUNCTION : ChActAsynchHO
COMMENT  :

IN  : Parameter hash containing the following keys:
              AOR
              ChType
              ChRate
              TS
              TG
              TRXC
              TypeOfCh
              DTXd
              DTXu
OUT :  None


=head2 ChActMSSIM

 ChActMSSIM();

SUBROUTINE  : ChActMSSIM
DESCRIPTION : To activate a channel in the MSSIM

IN  : Parameter Hash
      EnableDummyBurstDetection - if defined, Dummy Burst Detection is enabled in MSSIM
OUT : CcId


=head2 ChActSecChannelMulti

 ChActSecChannelMulti();

SUBROUTINE  : ChActSecChannelMulti
DESCRIPTION :

IN  : Parameter hash containing the following keys:
              AOR
              ChType
              ChRate
              TS
              TG
              TRXC
              TypeOfCh
              DTXd
              DTXu
OUT : None


=head2 CheckFillingOption

 CheckFillingOption();

SUBROUTINE  : CheckFillingOption
DESCRIPTION : Checks the filling option and modifies it if necessary.

IN  : lRestoreTo, OldFM, NewFM
OUT : OldFM


=head2 CheckL3Data

 CheckL3Data();

SUBROUTINE  : CheckL3Data
DESCRIPTION : To compare received L3Data to expected L3Data

IN  : Hash containing the following key(s):
             Expect    - Expected L3Data
             Received  - Received L3Data
OUT : Returns 1 if data is equal, else 0


=head2 CheckL3Data2

 CheckL3Data2();

SUBROUTINE  : CheckL3Data
DESCRIPTION : To compare received L3Data to expected L3Data

IN  : Hash containing the following key(s):
             Expect    - Expected L3Data
             Received  - Received L3Data
OUT : Returns 1 if data differs, else 0


=head2 CheckSIDCodeWord

 CheckSIDCodeWord();

SUBROUTINE  : CheckSIDCodeWord
DESCRIPTION : Check SID Codeword and Comfort Noise on downlink Um frame

IN  : Hash containing the following key(s):
             Message    - Packed traffic frame, as $RESP{Message} recieved from lsuReadWLog
             SpType     - FR, EFR or HR

OUT : 1 if SID Frame      (SID Codeword and Comfort Noise OK)
      0 if NOT SID Frame


=head2 CloseCCCHMSSIM

 CloseCCCHMSSIM();

SUBROUTINE  : CloseCCCHMSSIM
DESCRIPTION : Send a CCCH close request

IN  : Hash containing the following key(s):
              Timeout - MSSIM command timeout
              Cell    - MSSIM Cell number
OUT : None


=head2 CompleteStartRBS

 CompleteStartRBS();

SUBROUTINE  : CompleteStartRBS
DESCRIPTION : Runs a complete startup of the RBS.

IN  : Hash containing complete start specific data
            - Receive   -> 'YES' || 'NO'
                      If the answer of the complete start is required
            - TLSI    ->'OFF' || 'ON'
                      TLS on Idle channel
            - TLSA    ->'OFF' || 'ON'
                      TLS on Active channel
            - TLSFilteringTime    -> 10 .. 100
                      The range for TLS filtering time is 1 to 10 seconds
OUT      : $Ret    -> 1 || 0
                      Indicates the succession of the complete startup


=head2 CountOnes

 CountOnes();

SUBROUTINE  : CountOnes
DESCRIPTION : Count the number of 1's in the binary representation of a numeric value

IN  : Hash containing the following key(s):
             InputVal    - Value
             Bits        - number of bits in value to use (default 8)
OUT : Returns 1 if data is equal, else 0


=head2 CreateSpeechParamHash

 CreateSpeechParamHash();

SUBROUTINE  : CreateParamHash
DESCRIPTION : To create parameter hash to be sent to subroutine SendSpeech

IN  : Hash containing the following key:
              SpeechType - Speech Type ('HR' or 'FR'. Default 'FR')
              SubCh - Subchannel for halfrate. ( Default 0)
OUT : Parameter hash


=head2 CreateSpeechPatternFile

 CreateSpeechPatternFile();

SUBROUTINE  : CreateSpeechPatternFile
DESCRIPTION : Create a MSSIM pattern file

IN  : Hash containing the following key:
              SpeechFrames - Number of speech frames
              SilentFrames - Number of silent frames
              CMR_TAG      - CMR
              CMI_TAG      - CMI
              Rate         - Speech rate (FR / HR)
              SPConfigFile - Name of the generated cfg file

OUT : Name of the created pattern file


=head2 DeleteErrorAgent

 DeleteErrorAgent();

SUBROUTINE  : DeleteErrorAgent
DESCRIPTION : Delete a set Error Agent according to its ID

IN  : Hash containing the following key:
              ErrorAgentID  - Error Agent ID

OUT : None


=head2 EstablishReqMSSIM

 EstablishReqMSSIM();

SUBROUTINE  : EstablishReqMSSIM
DESCRIPTION : To send Establish Request to MSSIM and receive EstablishIndication
              from Abisco

IN  : Hash containing the following key(s):
             BTS     - Abisco connection parameter
             SAPI    - Sapi value
             CHAN    - Channel state
             L3DATA  - Reference to L3Data array

OUT : None


=head2 FindMessagesInLog

 FindMessagesInLog();

SUBROUTINE  : FindMessagesInLog
DESCRIPTION : Subroutine to search a log file for a specific type of messages.

IN  :    Hash containing the following key:

         LogFile     - File name of the log file to search
         MessageType - A text prefix at the beginning of each line of the
                       log-file defining the message type.
                       Example: 'DL:' or 'UL:'  are valid message types for
                       an  ABIS log.

         MessageStructure - Reference to a hash containing the message structure.
                            This sturcture is used as a template for returned messages.
                            The hash should be built of smaller hashes of the form:

                            'KeyName' => { 'Offset' => 0,
                                           'Size'   => 8,
                                           'Value'  => undef,
                                           'Type'   => 'Numeric' },

                            where the Offset and Size key values define the location
                            in bits of the data corresponding to the parameter.
                            If Value is set to undef, it will be filled with the values
                            of a correpsonding parameter value of a message in the log.
                            If on the other hand a value is set for Value, that is used
                            as a filter to select only matching messages form the log.
                            Type is used to indicate if Value is a numeric value ('Numeric')
                            or and array (set as 'Array').

         PrefixRemoved - Defines the number of prefix strings each line in the log has
                         before the start of the hex-data. ( Currently it is 1 for Abis logs
                         and 4 for MSSIM logs if the logs are formatted using the substr
                         createMessageLogFromWLog and createMSSIMMessageLogFromWLog.
                         (Set to 1 by default).

OUT :    An array of messages matching the given criterias.
         Each array is a clone of the MessageStructure hash given as a parameter.
COMMENT: Observe that a (supported) CSAPI value should be specified for new
         ip-logging to work!
     !!! TFP seems to be used in SC as well. Still it won't use CSAPI so there
         can be problems when calling this function and you want to take care of
         TFP-packed data.


=head2 GenerateSpeechAndABISLogNoTXPower

 GenerateSpeechAndABISLogNoTXPower();

SUBROUTINE  : GenerateSpeechAndABISLogNoTXPower
DESCRIPTION : Generate speech from MSSIM or TSS.
            If speech is geenrated from MSSIM, a cfg file is dynamically created
            and is transfered to the MSSIM using FTP.

IN  : Hash containing the following key:
              Duration     - Speech duration (in sec)
              InterfaceLSU - Cfg file describing the LSU interface
              WLogFileLSU  - Name of the generated ABIS log file
              SpeechFrames - Number of speech frames
              SilentFrames - Number of silent frames
              CMR_TAG      - CMR
              CMI_TAG      - CMI
              Rate         - Speech rate (FR / HR)
              CcId         - MSSIM channel comb. ID
              SimTypeTSS   - TSS speech simulation mode (Frames / LoopBack)
              SimTypeMSSIM - MSSIM speech simulation mode (LoopBack / PLAY / PRBS)
              DTX          - DTX setting (uplink)

OUT : Hash containing the following key:
              Error        - 0 = No Error, 1 = Error
              Reason       - Reason for error. Exists only if Error != 0
              ResultFile   - File name of the geenrated ABIS log file. Exists only if Error = 0


=head2 GetChannelTypeTDMAOffset

 GetChannelTypeTDMAOffset();

SUBROUTINE  : GetChannelTypeTDMAOffset
DESCRIPTION : Sets a global variable

IN  : None
OUT : None


=head2 GetMSSIMSNR

 GetMSSIMSNR();

SUBROUTINE  : GetMSSIMSNR
DESCRIPTION : Set Measurement Reporting

IN  :
Output:     None


=head2 GetMeasurementReports

 GetMeasurementReports();

SUBROUTINE  : GetSomeMeasurements
DESCRIPTION : GetMSMeasurements receives measurements from TRXC/TS
IN  : Hash containing the following key(s):
      TG              - TG number
      TRXC            - TRXC nr
      TS              - Timeslot
      ChType          - Channel Type
OUT : Array of measurement reports


=head2 GetValuesFromLogMessage

 GetValuesFromLogMessage();

SUBROUTINE  : GetValuesFromLogMessage
DESCRIPTION : Help function to FindMessagesInLog. Specifically used for header
              value extractions before return array of FindMessagesInLog is
              generated!
              (Note: Based on FindMessagesInLog)

IN  : $msgref - Reference to current log-message (BPSplit in case of new ip-logging)
      $messageAccepted - Dummy value
      %tempMessage - Any type of template for different values to be found in $msgref
OUT : Modified %tempMessage


=head2 HandoverAccessMSSIM

 HandoverAccessMSSIM();

SUBROUTINE  : HandoverAccessMSSIM
DESCRIPTION : To send Handover Access to MSSIM and receive HandoverDetection
              from Abisco

IN  : ChType
OUT : None


=head2 IPTemplateModify

 IPTemplateModify();

SUBROUTINE  : IPTemplateModify
DESCRIPTION : Modify Message_TEMPLATE to comply with IP

IN  :      TemplateRef => \%PGSL_STATUS_IND_Result, # copy of template
           CSAPI       => { S_CSAPI => 'FALSE',
                            Value   => undef,},
                  CSAPI VALUES (3 bits):
                    C/R = 0|1
                          0|1 RSL
                          2|  Speech
                          3|  Circuit Switched
                          4|  GPRS
                          5|6 OML
           IPOffset    => 12*8,
OUT :     None


=head2 InitSG

 InitSG();

Signal Generator subroutines
SUBROUTINE  : InitSG
DESCRIPTION : Initializes Signal Generator

IN  : Instance    (Instance number)
OUT : None


=head2 IsInSIDPosition

 IsInSIDPosition();

SUBROUTINE  : IsInSIDPosition
DESCRIPTION : Check if FrameNumber is in SID posistion

IN  : Hash containing the following key(s):
             FN         - Frame number
             SpType     - FR, EFR or HR

OUT : 1 if SID Position
      0 if NOT SID Position


=head2 JoinArrays

 JoinArrays();

SUBROUTINE  : JoinArrays
DESCRIPTION : Join two message arrays

IN  : Hash containing the following key:
             Array1    - Abis Message array 1
             Array2    - Abis Message array 2

OUT :       An joined array


=head2 MSSIMTransferFile

 MSSIMTransferFile();

SUBROUTINE  : MSSIMTransferFile
DESCRIPTION : Transfer a file to the connected MSSIM
IN  : User      - MSSIM login username
            Password  - MSSIM login password
            Filename  - The file to transfer
OUT :       0 - OK
            1 - Error


=head2 MinFrameNumberDifference

 MinFrameNumberDifference();

SUBROUTINE  : MinFrameNumberDifference

DESCRIPTION : Iterate through the first message array and check if the messages
              in the array are placed next to each other.

IN  : Hash containing the following keys:
              FirstMessageArrayRef  - Reference to the first array of messages
              NextMessageArrayRef   - Reference to the next array of messages
              FrameNumberDifference - Minimum number of frames to consider the messages next to each other

OUT : 0     - OK
      Other - Error


=head2 ReceiveAbisco

 ReceiveAbisco();

SUBROUTINE  : ReceiveAbisco
DESCRIPTION : To receive a spontanious message from Abisco

IN  : Hash containing the following key(s):
             BTS      - Abisco connection parameter
             Timeout  - Timeout value
             Expect   - Expected message
             Supress  - Indicate if timeout errors should be supressed
                        (HandleError not called).
             L3DATA   - Reference to L3Data array of expected message
OUT : CauseValue


=head2 RelReqMSSIM

 RelReqMSSIM();

SUBROUTINE  : RelReqMSSIM
DESCRIPTION : To send Release Request to MSSIM and receive ReleaseIndication
            from Abisco

IN  : Hash containing the following key(s):
             BTS     - Abisco connection parameter
             SAPI    - Sapi value
             CHAN    - Channel state
             MODE    - Release mode
OUT : None


=head2 ReleaseAllOpenChannels

 ReleaseAllOpenChannels();

SUBROUTINE  : ReleaseAllOpenChannels
DESCRIPTION : Release All Open Payload Channels in TSS

IN  :
Output:     None


=head2 ReleaseCh

 ReleaseCh();

SUBROUTINE  : ReleaseCh
DESCRIPTION : <Template example row, please remove if not applicable>

IN  : Parameter hash containing the following keys:
              TRXC
              TS
              ChType
OUT : None


=head2 SendDataReqReleaseMessages

 SendDataReqReleaseMessages();

SUBROUTINE  : SendDataReqReleaseMessages
DESCRIPTION : Repeats sending a release message a number of
              times (supplied).

IN  : Parameter hash containing the following keys:
              Messages
OUT : None


=head2 SendModeModify

 SendModeModify();

OUT : None


=head2 SendSpeech

 SendSpeech();

SUBROUTINE  : SendSpeech
DESCRIPTION : To activate sending of speech, either from MSSIM or from TSS

IN  : Param hash including:
             $Param{TG}
             $Param{TRXC}
             $Param{TS}
             $Param{SubCh}         TCH subchannel (0/1)
             $Param{DTX}           DTX Downlink (On/Off)
             $Param{TypeOfCh}      According to Abisco Ch Activation, see IWD Browser
             $Param{AlgOrRate}     According to Abisco Ch Activation, see IWD Browser
             $Param{ChRate}        According to Abisco Ch Activation, see IWD Browser
             $Param{ChannelType}   According to Abisco Ch Activation, see IWD Browser
             $Param{MRVersion}     According to Abisco Ch Activation, see IWD Browser
             $Param{ICMI}          According to Abisco Ch Activation, see IWD Browser
             $Param{StartMode}     According to Abisco Ch Activation, see IWD Browser
             @{$Param{AMR}}        According to Abisco Ch Activation, see IWD Browser
             $Param{TFO}           According to Abisco Ch Activation, see IWD Browser
             $Param{SCS}           According to Abisco Ch Activation, see IWD Browser
             $Param{MACS}          According to Abisco Ch Activation, see IWD Browser
             $Param{SimTypeTSS}    TSS simulation type "Frames" or "LoopBack"
             $Param{StartCodec}    According to Abisco ActivateSpeech OPT1.CodecMode, see IWD Browser
             $Param{SPType1}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
             $Param{SPTime1}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
             $Param{SPType2}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
             $Param{SPTime2}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
             $Param{CodecDL1}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecUL1}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecTime1}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecDL2}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecUL2}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecTime2}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecDL3}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecUL3}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecTime3}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecDL4}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecUL4}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecTime4}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{LoopDelay}     According to Abisco ActivateSpeech OPT3, see IWD Browser
             $Param{SimTypeMSSIM}  "LOOP", "PRBS", "PLAY_CHK" or "PLAY_REC"
             $Param{TxFile}        TxFile for MSSIM, see Prisma GSM base
             $Param{RxFile}        RxFile for MSSIM, see Prisma GSM base
             $Param{RxMax}         Rxmax for MSSIM, see Prisma GSM base
             @{$Param{Codec}}      Used Codecs, MSSIM format example: ["AFS4_75", "AFS5_15", "AFS5_9", "AFS6_7"]
             $Param{TimeToRun}     Time to run (in seconds)
OUT : Error 0=OK, 1=error
      Error Reason
      Result hash including:
               @{$Result{Statistic1}}   MSSIM fixed counters
               @{$Result{Statistic2}}   MSSIM variable counters from Cnt parameter
               @{$Result{Statistic3}})  TSS counters
               @{$Result{CntRow0}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation
               @{$Result{CntRow1}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation
               @{$Result{CntRow2}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation
               @{$Result{CntRow3}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation
               @{$Result{CntRow4}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation
               @{$Result{CntRow5}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation


=head2 SendSysInfo3

 SendSysInfo3();

SUBROUTINE  : SendSysInfo3
DESCRIPTION : Seand a System Information Type 3 message from Abisco

IN  : Hash containing the following key(s):
              TG              - TG number
              TRXC            - TRXC nr
              TS              - Timeslot
              ChType          - Channel Type
              DTXIndicator    - Set the uplink DTX On or Off
OUT :       0 - OK
            1 - Error


=head2 SetAbisAndTCHMode

 SetAbisAndTCHMode();

SUBROUTINE  : SetAbisAndTCHMode
DESCRIPTION : Set the Abis and TCH mode

IN  : TCHMode   - Wanted TCH mode: Static16kbps,  Static64kbps,
                                         Dynamic16kbps, Dynamic64kbps
            AbisMode  - Abis mode: TDM, SC
OUT : None


=head2 SetAmpSG

 SetAmpSG();

SUBROUTINE  : SetAmpSG
DESCRIPTION : Sets the amplitude value of the signal generator.
              When no AbsAmp input exists, the RelAmp Sets the amplitude value
              as it should be on the RX input of the BTS.
              To calculate the amplitude to set on the signal generator, the
              SG TTA will add this value to the attenuation set with the
              'SaveSGAttenuation' command.

IN  : Instance    (Instance number)
      RelAmp      (Relative Amplitude of noise)
      AbsAmp      (Absolute Amplitude of noise)
OUT : None


=head2 SetFreqSG

 SetFreqSG();

SUBROUTINE  : SetFreqSG
DESCRIPTION : Sets the output frequency of the signal generator.

IN  : Instance    (Instance number)
      AbsFreq     (Absolute frequency, if DL is used)
OUT : None


=head2 SetMeasurementReporting

 SetMeasurementReporting();

SUBROUTINE  : SetMeasurementReporting
DESCRIPTION : Set Measurement Reporting

IN  : Hash containing the following key(s):
              TG                   - TG number
              TRXC                 - TRXC
              TS                   - Timeslot
              ChType               - Channel Type
              MeasurementReporting - 'On' / 'Off'
OUT : None


=head2 SetOutputSG

 SetOutputSG();

SUBROUTINE  : SetOutputSG
DESCRIPTION : Turn On or Off the Signal geenrator

IN  : Instance    (Instance number)
      Output      ('On' / 'Off')
OUT : None


=head2 SetSSQIUinDVT

 SetSSQIUinDVT();

SUBROUTINE  : SetSSQIUinDVT
DESCRIPTION : Set SSQIU parameter in DVT

IN  : Params
      Mode   - 'on', 'off'
      TS     - Timeslot
      TRXC   - TRX, $TRXC default
OUT : 0=OK, 1=Error


=head2 SetTG

 SetTG();

SUBROUTINE  : SetTG
DESCRIPTION : To set TCM configuration, updates, disconnects and reconnects.

IN  : TCH_Configuration
OUT : None


=head2 SimulateSilenceAndVerifyFrames

 SimulateSilenceAndVerifyFrames();

SUBROUTINE  : SimulateSilenceAndVerifyFrames

DESCRIPTION : This subroutine activates speech, MSSIM and LSU logs and send a
              UpdateSpeech command. The resulting LSU and MSSIM logs are checked
              against list of expected frames.

IN  : Hash containing the following keys:
              TG              - TG
              TRXC            - TRXC
              TS              - Timeslot
              FrameCount      - Frames affected by the UpdateSpeech
              CodecMode       - Set the downlink codec mode to the specified value if AMR is used.
              TRAUFrames      - Array reference containing expected TRAU frames
              InterfaceLSU    - LSU interface file
              WLogFileLSU     - LSU log file name (without the file ending)
              DurationLSU     - LSU log duration

OUT : 0     - OK
      Other - Error


=head2 StartLoopMSSIM

 StartLoopMSSIM();

SUBROUTINE  : StartLoopMSSIM
DESCRIPTION : To start the loop function in MSSIM

IN  : Timeout
            $CcId    (MSSIM downlink channel id)
             $LoopCcId    (MSSIM uplink channel id)
OUT : 0=OK


=head2 StartPRBS_data

 StartPRBS_data();

SUBROUTINE  : StartPRBS_data
DESCRIPTION : To start the PRBS function in MSSIM

IN  : Parameter Hash
OUT : 0=OK


=head2 StartTestSpeech

 StartTestSpeech();

SUBROUTINE  : StartTestSpeech
DESCRIPTION : Starts testing of sending and recieving speech framse

IN  : SubCh - Subchannel for halfrate. ( Default 0)
OUT : None


=head2 StopLoopMSSIM

 StopLoopMSSIM();

SUBROUTINE  : StopLoopMSSIM
DESCRIPTION : To stop the loop function in MSSIM
Input:      CcId    (MSSIM downlink channel id)
            Timeout
OUT : Status    (0=Ok, 1=Error)


=head2 StopSpeech

 StopSpeech();

SUBROUTINE  : StopSpeech
DESCRIPTION : To deactivate sending of speech, either from MSSIM or from TSS
              Sister function to SendSpeech

IN  : Param hash including:
             $Param{TG}
             $Param{TRXC}
             $Param{TS}
             $Param{SubCh}         TCH subchannel (0/1)
             $Param{DTX}           DTX Downlink (On/Off)
             $Param{TypeOfCh}      According to Abisco Ch Activation, see IWD Browser
             $Param{AlgOrRate}     According to Abisco Ch Activation, see IWD Browser
             $Param{ChRate}        According to Abisco Ch Activation, see IWD Browser
             $Param{ChannelType}   According to Abisco Ch Activation, see IWD Browser
             $Param{MRVersion}     According to Abisco Ch Activation, see IWD Browser
             $Param{ICMI}          According to Abisco Ch Activation, see IWD Browser
             $Param{StartMode}     According to Abisco Ch Activation, see IWD Browser
             @{$Param{AMR}}        According to Abisco Ch Activation, see IWD Browser
             $Param{TFO}           According to Abisco Ch Activation, see IWD Browser
             $Param{SCS}           According to Abisco Ch Activation, see IWD Browser
             $Param{MACS}          According to Abisco Ch Activation, see IWD Browser
             $Param{SimTypeTSS}    TSS simulation type "Frames" or "LoopBack"
             $Param{StartCodec}    According to Abisco ActivateSpeech OPT1.CodecMode, see IWD Browser
             $Param{SPType1}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
             $Param{SPTime1}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
             $Param{SPType2}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
             $Param{SPTime2}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
             $Param{CodecDL1}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecUL1}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecTime1}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecDL2}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecUL2}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecTime2}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecDL3}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecUL3}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecTime3}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecDL4}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecUL4}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecTime4}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{LoopDelay}     According to Abisco ActivateSpeech OPT3, see IWD Browser
             $Param{SimTypeMSSIM}  "LOOP", "PRBS", "PLAY_CHK" or "PLAY_REC"
             $Param{TxFile}        TxFile for MSSIM, see Prisma GSM base
             $Param{RxFile}        RxFile for MSSIM, see Prisma GSM base
             $Param{RxMax}         Rxmax for MSSIM, see Prisma GSM base
             @{$Param{Codec}}      Used Codecs, MSSIM format example: ["AFS4_75", "AFS5_15", "AFS5_9", "AFS6_7"]
             $Param{TimeToRun}     Time to run (in seconds)
OUT : Error 0=OK, 1=error
      Error Reason
      Result hash including:
               @{$Result{Statistic1}}   MSSIM fixed counters
               @{$Result{Statistic2}}   MSSIM variable counters from Cnt parameter
               @{$Result{Statistic3}})  TSS counters
               @{$Result{CntRow0}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation
               @{$Result{CntRow1}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation
               @{$Result{CntRow2}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation
               @{$Result{CntRow3}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation
               @{$Result{CntRow4}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation
               @{$Result{CntRow5}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation


=head2 TFPModify

 TFPModify();

SUBROUTINE  : TFPModify
DESCRIPTION : Modify Message_TEMPLATE's to comply with IP
              Header Templates as well as Payload Templates are supported

IN  :      TemplateRef      => Copy of template
           HeaderExtention  => The header extention size in bits
           BPHeaderSize     => BP Header Size in bits
           Header           => default 'FALSE', if Template is header set to TRUE
OUT :     None


=head2 UpdateCSData

 UpdateCSData();

SUBROUTINE  : UpdateCSData
DESCRIPTION : To update CSData in TSS

IN  : Parameter hash containing the following keys:
              TG              - TG
              TRXC            - TRXC
              TS              - Timeslot
              MsgCount        - Frames affected by the update
              ANDMask         - AND bitmask
              ORMask          - OR bitmask
              XORMask         - XOR bitmask
OUT : 0=OK, 1=Error


=head2 UpdateSpeech

 UpdateSpeech();

SUBROUTINE  : UpdateSpeech
DESCRIPTION : To update speech in TSS, override ActivateSpeech params

IN  : Parameter hash containing the following keys:
              TG              - TG
              TRXC            - TRXC
              TS              - Timeslot
              MsgCount        - Frames affected by the update
              SilentMode      - Mode ('Speech' / 'Silent'
              CodecMode       - Set the downlink codec mode to the specified value if AMR is used.
              RecalculateCRC  - Recalulate CRC after applying bitmasks
              ANDMask         - AND bitmask
              ORMask          - OR bitmask
              XORMask         - XOR bitmask
              SubCh           - SubChannel (half rate)
OUT : 0=OK, 1=Error


=head2 VerifyABISFrames

 VerifyABISFrames();

SUBROUTINE  : VerifyABISFrames
DESCRIPTION : Searches the ABIS log for a specified sequence of ABIS frames

IN  : Hash containing the following key:
      ABISFrameListRef - Reference to ABIS frame list
      WLogFileLSU      - ABIS log file

OUT : Error  ( 0 = No Error, 1 = Error)
      Result ( The number of times the sequence was found )



=head2 VerifyDownlinkCSData

 VerifyDownlinkCSData();

SUBROUTINE  : VerifyDownlinkCSData
DESCRIPTION : Verify downlink data

IN  : Hash containing the following key(s):
              MSSIMLog             - MSSIM wireshark log file
              AlgOrRate            - NT12kbits/s or NT14.5kbits/s

OUT : Hash contatining the follwing keys:
              FillBursts           - Number of L2 Fill Bursts
              ValidDataBursts      - Number of valid data bursts
              PowerOffBursts       - Number of Bursts with TX power off


=head2 VerifyDownlinkSID

 VerifyDownlinkSID();

SUBROUTINE  : VerifyDownlinkSID
DESCRIPTION : Verifies the presence of SID_Update frames on UM downlink.
              The mere precense of these, indicates a comfort noise shall be generated

IN  : Hash containing the following key(s):
             MSSIMLog   - MSSIM log file (.lsu)
             TS         - Timeslot used.
             OrderImportant     - 1 if The order of the SID frames is important
             TXPowerOn          - TX power Off during silence
             TXPowerFrames      - Number of frames to be verified
             FrameTypeRefSize   - Reference frame type
             FrameTypeRefValue  - Reference frame type value
             FrameTypeRefName   - Reference frame type name
OUT : no. of SID-frames of specified type found in logfile


=head2 VerifyDownlinkSpeech

 VerifyDownlinkSpeech();

SUBROUTINE  : VerifyDownlinkSpeech
DESCRIPTION : Verify frames sent downlink on Um

IN  : Hash containing the following key(s):
             MSSIMLog   - MSSIM log file (.lsu)
             SpType     - FR, EFR or HR
             TXPower    - Expected TXPower, 'On' or 'Off'
             SIDFrames  - Expected presens of SID frames, 'Present' or 'Not_Present'
             DummyBur   - Expecte Dummy bursts? True or not defined

OUT : 0 if OK, Error text if error found


=head2 VerifyTRAU

 VerifyTRAU();

SUBROUTINE  : VerifyTRAU
DESCRIPTION : Verify the existence of correct TRAU frames in a LSU ABIS log

IN  : Hash containing the following key(s):
              ABISLog            : ABIS lsu log file
              SIDMinZeros        : Minimum allowed number of 0's in each SID codeword
              SIDMaxZeros        : Maximum allowed number of 0's in each SID codeword
              SIDMinOnes         : Minimum allowed number of 1's in each SID codeword
              SIDMaxOnes         : Maximum allowed number of 1's in each SID codeword
              ExpectComfortNoise : Indicate if there should be comfort noise
                                   speech frames present uplink in the ABIS log
                                   ('TRUE' / 'FALSE')
OUT : 0 - OK
      1 - The log messages did not fulfill the set requirements



=cut

=head1 NAME

subs_encr


=head1 DESCRIPTION

Document number : 76/190 55-CAH 161 1607/1 Uen
MODULE          : subs_encr.pm
DESCRIPTION     : This program provides defines and subfunctions for Encryption
                  tests described in TS 322/102 64-HRB 105 15 Uen

COPYRIGHT © : ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV DATE      NAME      REVIEW    COMMENT
A   20100920  XWIKMAR   ETORWIL   File created. Approved UABTOH
B   20100801  ETORWIL   XWIKMAR   Removed local db fuctions and implemented use of dbLog
                                   Approved UABTOH
C   20110525  XDAVMEL   XMABENT   DeactivateCSData to match changes in Abisco R34x
                                   Added CIPHERING_MODE_COMMAND_A5_1 and
                                   CIPHERING_MODE_COMMAND_A5_3 varibles
                                   Merge with latest G10B update from the main branch,
                                   including correction of revision history.
                                   Rewrote SetTSConfig
                                   Removed unused inclusions
D   20110907  XGUSTPE   XOSKRON   Changed SendSpeech: support for cc viii
                                   Changed SetTSConfig to Assert all responses and send BCCHInfo
                                   Added use warnings and fixed issues found
                                   Added subroutine waitForCellSync, ChActMSSIM uses it
                                   Changed printig behaviour in waitForCellSync
                                   Added error handling to waitForCellSync
E   20111227  XTOBSEM   XSOFFRO   Subroutine waitforcellsync now called from mssim_sub
                                   Changed the script to import $TG $TRXC $Cell from subinit (HP27724)
                                   Added HexToBinary, FindSpeechInd and FindSpeechMSSIM (HP27692)
F   20120921  EERICSV   XNAVNAS    Added SetEncryptionBTSBitstream, VerifyActiveEncryption
                                   Removed StartTestDataDL, CheckAbiscoConfigCOMB, SetBCCHType, CloseCCCHMSSIM
                                    SendDLRelReq, QueueDLMsg, RestartBTS, CheckTable, CheckEncryptionBTS
                                    EvaluateCSData, FindCSDataArray, CompareCSData, SendModeModify, GetImmAssType
                                   Updated SetEncryptionBTS, StartTestSpeech, SetTSConfig, FindSpeechInd
                                   Clean up within TR HP86811.
                                    Syntax and formatting corrections for readibility improvements.
                                    Removed unnecessary imports and variables.
                                    Added Init (moved from subinit_encr.pm) and its required variables.
                                    Added lock_keys to SetTSConfig, ChActBTS, ChRelBTS and ChActMSSIM and decreased usage of globals.


=head1 REQUIRES

L<English> 

L<Hash::Util> 

L<Carp> 

L<mssim_def> 

L<dbLog> 

L<mssim_sub> 

L<mssim_def> 

L<mssim> 

L<wireshark> 

L<csdatafunc> 

L<speechfunc> 

L<PerlFunc> 

L<AbiscoFunc2> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 ChActBTS

 ChActBTS();

Subroutine: ChActBTS
Purpose:    To activate a channel in the BTS
Input:      Hash containing the following keys:
              BTS - Abisco connection parameter (optional),
              RespMessage - To assert for NACK (optional),
              Cause - If NACK, wanted CauseValue (optional),
              ChType - Another channel type than the one in PAR-hash (mandatory),
              TGId, TRXC, TS, ChAct, ActType, TypeOfCh, ChRate, AlgOrRate (mandatory),
              Encr, EncrKey (optional)
Output:     None


Change:DATE        NAME              REVIEW      COMMENT
       20100315    SYNTRONIC/KRRO                 Added inputs RespMessage, Cause, ChType


=head2 ChActMSSIM

 ChActMSSIM();

Subroutine: ChActMSSIM
Purpose:    To activate a channel in the MSSIM
Input:      Hash containing the following keys:
            TGId, TRXC, TS, Cell, MsId, ChAct, ChType, ChRate, TypeOfCh, AlgOrRate, AMRCodec (mandatory)
              Bypass - (set to '1' to bypass MSSIM automatic LAPDm handling) (optional)
Output:     $CcId


=head2 ChRelBTS

 ChRelBTS();

Subroutine: ChRelBTS
Purpose:    To release a channel in the BTS
Input:      Hash containing the following keys:
              BTS - Abisco connection parameter (optional),
              TGId, TRXC, TS, ChType (mandatory)
Output:     None

Change:DATE        NAME              REVIEW      COMMENT
       20100318    SYNTRONIC/KRRO                 Added inputs ChType


=head2 ChRelMSSIM

 ChRelMSSIM();

Subroutine: ChRelMSSIM
Purpose:    To release a channel in the MSSIM
Input:      Hash containing the following key:
              CcId - Channel combination identifier provided by ChActMSSIM
Output:     None


=head2 CheckL3Data

 CheckL3Data();

Subroutine: CheckL3Data
Purpose:    To compare received L3Data to expected L3Data
Input:      Hash containing the following key(s):
             Expect    - Expected L3Data
             Received  - Received L3Data
Output:     Returns 1 if data differs, else 0


=head2 CreateSpeechParamHash

 CreateSpeechParamHash();

Subroutine: CreateParamHash
Purpose:    To create parameter hash to be sent to subroutine SendSpeech
Input:      Hash containing the following key:
              SpeechType - Speech Type ('HR' or 'FR'. Default 'FR')
              SubCh - Subchannel for halfrate. ( Default 0)
              TRXC (opt.)
Output:     Parameter hash


=head2 EstablishReqMSSIM

 EstablishReqMSSIM();

Subroutine: EstablishReqMSSIM
Purpose:    To send Establish Request to MSSIM and receive EstablishIndication
            from Abisco
Input:      Hash containing the following key(s):
             BTS     - Abisco connection parameter
             SAPI    - Sapi value
             CHAN    - Channel state
             L3DATA  - Reference to L3Data array

Output:     None


=head2 FindSpeechInd

 FindSpeechInd();

Subroutine:  FindSpeechInd
Purpose:     To find RTH-SPEECH-IND or TFP-FRIND in case of SC mode, in logfile
Input:       Direction UL/DL
Output:      Number of found messages in log


=head2 FindSpeechIndMSSIM

 FindSpeechIndMSSIM();

Subroutine:  FindSpeechIndMSSIM
Purpose:     To find RTH-SPEECH-IND in logfile
Input:       Direction UL/DL
Output:      Number of found messages in log


=head2 HexToBinary

 HexToBinary();

Subroutine: HexToBinary
Purpose:    To Convert a Hex value to Bin
Input:      Hex
Output:     Bin
example:    $binary =  HexToBinary($byte);


=head2 Init

 Init();

Subroutine: Init
Purpose:    Creates the Abisco connection and gets the active TG
Input:      None
Output:     None


=head2 LAPDmSend

 LAPDmSend();

Subroutine:  LAPDmSend
Purpose:      To send a LAPDm frame
Input:         $Chan      (SDCCH, SACCH or FACCH)
               $MsPower  (Only applicable for SACCH)
               $TA        (Timing advance, only applicable for SACCH)
              $Cmd       (Command = "I", "RR", RNR", "REJ", "SABM", "DM", "UI", "DISC" or "UA"
               N(R)       (Receive Sequence Number)
               N(S)      (Send Sequence Number)
               P/F       (Poll/Final bit)
               SAPI      (Service Access Point)
               C/R        (Command/Response)
               M          (More bit)
               EL        (Length Extension bit)
               EA        (Address Extension Bit)
               refData      (Information Field)
              CcId      => $gCcId
Output:       None


=head2 ReadPatternConfigFile

 ReadPatternConfigFile();

Subroutine: ReadPatternConfigFile
Purpose:    To read the configuration file for pattern files
Input:      None
Output:     None


=head2 ReceiveAbisco

 ReceiveAbisco();

Subroutine: ReceiveAbisco
Purpose:    To receive a spontanious message from Abisco
Input:      Hash containing the following key(s):
             BTS      - Abisco connection parameter
             Timeout  - Timeout value
             Expect   - Expected message
             Supress  - Indicate if timeout errors should be supressed
                        (HandleError not called).
             L3DATA   - Reference to L3Data array of expected message
Output:     CauseValue


=head2 ReceiveAbiscoData

 ReceiveAbiscoData();

Subroutine: ReceiveAbiscoData
Purpose:    To receive a spontanious message from Abisco
Input:      Hash containing the following key(s):
             BTS     - Abisco connection parameter
             Timeout - Timeout value
             Expect  - Expected message
             Supress - "SupressError" if HandleError should not be called
Output:     Data


=head2 ReceiveAbiscoMessage

 ReceiveAbiscoMessage();

Subroutine: ReceiveAbiscoMessage
Purpose:     To receive a spontanious message from Abisco
Input:      BTS (Abisco connection parameter)
             Timeout    => undef,
            Expect    => undef,
            Supress    => "SupressError",
Output:     Received Data hash


=head2 ReceiveMSSIM

 ReceiveMSSIM();

Subroutine: ReceiveMSSIM
Purpose:    To receive a spontaneous message from MSSIM
Input:      Hash containing the following key(s):
             Timeout   - Timeout value
             ExpMsg    - Expected Message
             Expect - Reference to array of expected message
Output:     None


=head2 ReceiveMSSIMData

 ReceiveMSSIMData();

Subroutine: ReceiveMSSIMData
Purpose:    To receive a spontanious message from MSSIM and return the Resp->Data array
Input:      Timeout
             ExpMsg
Output:     An array from RESP->Data


=head2 RelReqMSSIM

 RelReqMSSIM();

Subroutine: RelReqMSSIM
Purpose:    To send Release Request to MSSIM and receive ReleaseIndication
            from Abisco
Input:      Hash containing the following key(s):
             BTS     - Abisco connection parameter
             SAPI    - Sapi value
             CHAN    - Channel state
             MODE    - Release mode
Output:     None


=head2 SendCSData

 SendCSData();

Subroutine: SendCSdata
Purpose:    To send CS Data
Input:      Hash containing one or more of the following keys:
             TG    - TG to use  (default $TGId)
             TRXC  - TRX to use (default $TRXC)
             TS    - Timeslot   (default $TS)
             Rate  - Channel rate,  "T4.8kbits/s", "T9.6kbits/s", "T14.4kbits/s",
                     "NT12kbits/s" or "NT14.5kbits/s" (default $AlgorRate)
             Time  - Time to run (default $Timeout)
             DTX   - On or Off (default Off)
             CcId  - MSSIM CcId (default global CcId)
Output:     Error 0=OK, 1=error
            Error Reason
            Result   (Array including statistics from TSS and MSSIM)


=head2 SendDataMSSIM

 SendDataMSSIM();

Subroutine: SendData MSSIM
Purpose:   To send Data Indication to MSSIM and receive DataInd from Abisco.
Input:      Hash containing the following key(s):
             BTS     - Abisco connection parameter
             SAPI    - Sapi value
             CHAN    - Channel state
             L3DATA  - Reference to L3Data array

Output:     receiveAbisco Message


=head2 SendHandoverAccess

 SendHandoverAccess();

Subroutine:   SendHandoverAccess
Purpose:      Send a handover acesss
Input:        None
Output:       None


=head2 SendModeModifyEncr

 SendModeModifyEncr();

Subroutine: SendModeModifyEncr
Purpose:   To send a Mode Modify command from Abisco with encryption information
Input:     Hash containing the following key(s):
             BTS            - Abisco_Connection object reference
             AlgorithmId    - 'No', 'A5/1', 'A5/2', 'A5/3'
             EncryptionKey  - Encryption key to use
             SyntaxCheck    - Syntax check On or Off
             ExpectedResult - Expected result from Abisco: ModeModifyAck, ModeModifyNegAck
             CauseValue     - Expected CauseValue (int) for ModeModifyNegAck response.
Output:    None


=head2 SendMultiPurposeReq

 SendMultiPurposeReq();

Subroutine: SendMultiPurposeReq
Purpose:    To send a downlink message.
Input:      Hash containing the following key(s):
             BTS      - Abisco connection parameter
             SAPI     - Sapi value
             L3DATA   - Reference to L3Data array of expected message
Output:     None


=head2 SendSpeech

 SendSpeech();

Subroutine: SendSpeech
Purpose:    To activate sending of speech, either from MSSIM or from TSS
Input:    Param hash including:
             $Param{TG}
             $Param{TRXC}
             $Param{TS}
             $Param{SubCh}         TCH sub channel (0/1)
             $Param{DTX}           DTX Downlink (On/Off)
             $Param{TypeOfCh}      According to Abisco Ch Activation, see IWD Browser
             $Param{AlgOrRate}     According to Abisco Ch Activation, see IWD Browser
             $Param{ChRate}        According to Abisco Ch Activation, see IWD Browser
             $Param{ChannelType}   According to Abisco Ch Activation, see IWD Browser
             $Param{MRVersion}     According to Abisco Ch Activation, see IWD Browser
             $Param{ICMI}          According to Abisco Ch Activation, see IWD Browser
             $Param{StartMode}     According to Abisco Ch Activation, see IWD Browser
             @{$Param{AMR}}        According to Abisco Ch Activation, see IWD Browser
             $Param{TFO}           According to Abisco Ch Activation, see IWD Browser
             $Param{SCS}           According to Abisco Ch Activation, see IWD Browser
             $Param{MACS}          According to Abisco Ch Activation, see IWD Browser
             $Param{SimTypeTSS}    TSS simulation type "Frames" or "LoopBack"
             $Param{StartCodec}    According to Abisco ActivateSpeech OPT1.CodecMode, see IWD Browser
             $Param{SPType1}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
             $Param{SPTime1}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
             $Param{SPType2}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
             $Param{SPTime2}       According to Abisco ActivateSpeech SpeechPatternStruct, see IWD Browser
             $Param{CodecDL1}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecUL1}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecTime1}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecDL2}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecUL2}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecTime2}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecDL3}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecUL3}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecTime3}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecDL4}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecUL4}      According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{CodecTime4}    According to Abisco ActivateSpeech CodecModePatternStruct, see IWD Browser
             $Param{LoopDelay}     According to Abisco ActivateSpeech OPT3, see IWD Browser
             $Param{SimTypeMSSIM}  "LOOP", "PRBS", "PLAY_CHK" or "PLAY_REC"
             $Param{TxFile}        TxFile for MSSIM, see Prisma GSM base
             $Param{RxFile}        RxFile for MSSIM, see Prisma GSM base
             $Param{RxMax}         Rxmax for MSSIM, see Prisma GSM base
             @{$Param{Codec}}      Used Codecs, MSSIM format example: ["AFS4_75", "AFS5_15", "AFS5_9", "AFS6_7"]
             $Param{TimeToRun}     Time to run (in seconds)
Output:     Error 0=OK, 1=error
            Error Reason
            Result hash including:
               @{$Result{Statistic1}}   MSSIM fixed counters
               @{$Result{Statistic2}}   MSSIM variable counters from Cnt parameter
               @{$Result{Statistic3}})  TSS counters
               @{$Result{CntRow0}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation
               @{$Result{CntRow1}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation
               @{$Result{CntRow2}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation
               @{$Result{CntRow3}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation
               @{$Result{CntRow4}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation
               @{$Result{CntRow5}})     Optional MSSIM variable counters from Cnt parameter, for GUI presentation


=head2 SetEncryptionBTS

 SetEncryptionBTS();

Subroutine:  SetEncryptionKeyBTS
Purpose:    Setting the encryption key in  BTS
Input:      Hash containing one or more of the following keys:
             BTS       -  Abisco connection parameter       (default $BTS)
             Encr      -  No (1) A5/1 (2) A5/2 (3) A5/3 (4) (default 'No')
             StartEncr - 'No', 'Start'                      (default 'No')
Output:    None


=head2 SetEncryptionBTSBitstream

 SetEncryptionBTSBitstream();

Subroutine: SetEncryptionBTSBitstream
Purpose:    Set Encryption with Bitsream Command with Faulty length Indicator
Input:      None
Output:     None


=head2 SetEncryptionMSSIM

 SetEncryptionMSSIM();

Subroutine:  SetEncryptionKeyMSSIM{
Purpose:    Sets the encryption in the MSSIM
Input:      Hash containing the following key(s):
             EncryptionAlg -   CIPH_NONE, CIPH_A5_1, CIPH_A5_2,
                               CIPH_A5_3, CIPH_A5_4, CIPH_A5_5,
                               CIPH_A5_6, CIPH_A5_7
             EncryptionKey  - Reference to 8 byte encryption key array
Output:


=head2 SetTSConfig

 SetTSConfig();

Subroutine: SetTSConfig
Purpose:    Set the channel combination and the encryption of a timeslot
            using TS Config Request. The encryption is changed for all tch
            timeslots due to a BTS requirement.
Input:      TGId, TRXC, TS, Encr, ChComb, AbisMode
Output:     Encr     - Original encryption
            BCCHType - BCCH Ch. Comb (COMB/NCOMB)
            ChComb   - TS channel combination


=head2 StartTestData

 StartTestData();

Subroutine: StartTestData
Purpose:    Starts testing of sending and recieving data frames
Input:      TRXC (opt.)
Output:     None


=head2 StartTestSpeech

 StartTestSpeech();

Subroutine: StartTestSpeech
Purpose:    Starts testing of sending and recieving speech framse
Input:      SubCh - Subchannel for halfrate. ( Default 0 )
            SpeechType
            TRXC (opt.)
Output:     None


=head2 VerifyActiveEncryption

 VerifyActiveEncryption();

Subroutine: VerifyActiveEncryption
Purpose:    Verify if encryption is still active by deactivating
            encryption in the MS and control the success rate of transfered
            speech
Input:      EncrKey       - Reference to Encryption Key
            EncrALgoritm  - Used Encryption Algorithm
            Subch         - Used SubChannel (For HF Channel)
            SpeechType    - Used SpeechType
Output:     None



=cut

=head1 NAME

subs_extrange


=head1 DESCRIPTION

Document number : 135/190 55-CAH 161 1607/1 Uen
MODULE          : subs_extrange.pm
DESCRIPTION     : This package contains the subfunctions and variables used
                  with the main test case

COPYRIGHT ©:
ERICSSON AB,
S-164 80 STOCKHOLM

Company Registration number: 556056-6258

The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE        NAME              REVIEW      COMMENT
PA1   20091120    SAB/BJER                      document created
PA2   20100316    SAB/FRLI          SAB/BJER    Added functions: 
                                                ReceiveAbiscoMessage 
                                                SendHandoverAccess SetArfcn 
                                                RestartBTS LAPDmSend
PA3   20100323    SAB/BJER          SAB/FRLI    Added functions:
                                                CreateParameterHash
                                                SetCellTGSettings
                                                SendAccessBurstsMSSIM_ext
                                                ChActMSSIM_PTCCH
PA4   20100712    SAB/DAME          SAB/MAWI    Added possibility to return response from ChActBTS
                                                Added functions:
                                                GetTAFromMSSim
                                                SetTSSProcesses
                                                GetMeasurementResult

PA5   20110404    XMABENT           XDAVMEL     Added parameters to CreateParameterHash
                                                Added TimingAdvance to ChActBTS
                                                Added SendNormalBurstsMSSIM, SetAttrMSSIM, 
                                                 GetTAValue, GetTAValueMSSIM_PTCCH, ClearMSSIMbuffer
                                                 SetTSExtendedRange, findMessagesInLog, PrintMessageArray
                                                 CheckL3Data
PA6   20110518    XMABENT                       Updated SetArfcn
                                                Added GetTAValueMSSIM, ConvertTAValue, GetMeasurementReport


=head1 REQUIRES

L<Carp> 

L<Storable> 

L<dbLog> 

L<mssim_sub> 

L<mssim> 

L<mssim_def> 

L<PerlFunc> 

L<lib> 

L<DBI> 

L<AbiscoFunc2> 

L<Abisco_Connection> 


=head1 METHODS

=head2 ChActBTS

 ChActBTS();

Subroutine: ChActBTS
Purpose:    To activate a channel in the BTS, uses par hash variables
Input:      BTS     => $BTS,
            ChAct   => $ChAct,
            TG   => $TGId,
            TRXC => $TRXC,
            TS => $TS,
            ChType => $ChType,
            ActType => $ActType,
            Rbit => 'Activate',
            DTXUplink   => 'Off',
            DTXDownlink => 'Off',
            TypeOfCh    => $TypeOfCh,
            ChannelRate => $ChRate,
            AlgOrRate   => $AlgOrRate
            ReturnResp - 1/0, Returns %lResp if 1
Output:     None if ReturnResp = 0, %lResp if ReturnResp = 1

Changes:    100706  DAME   Added possibility to Return response from
                           BTS->Do with input ReturnResp


=head2 ChActMSSIM

 ChActMSSIM();

Subroutine: ChActMSSIM
Purpose:    To activate a channel in the MSSIM, returns the CcId package variable
Input:      Bypass      => 0,
            RxAcchOn    => 1,
            AllSacchSI  => 0,
            RToutOff    => 0,
            RxTrfcOn    => 0,
            UndecFrm    => 0,
            TrxNum      => 0,
            L2hdr       => 2,
            Data        => [@gMeas],
            TG          => $TGId,
            TRXC        => $TRXC,
            TS          => $TS,
            PDCHMode    => "",
            ChannelType => $ChType,
            ChRate      => $ChRate,
            TypeOfCh    => $TypeOfCh,
            AlgOrRate   => $AlgOrRate,
            AMRCodec    => $AMRCodec
            Cell        => $Cell
            MsId        => $gMsId,
Output:     $CcId

Changes:     2091210 BJER added condition when MSId = -1 to not send
                          gsmbSrvMS_SET_MEAS_CMD.
                          Removed global gCcId. Keep gCcId in abi file


=head2 ChActMSSIM_PTCCH

 ChActMSSIM_PTCCH();

Subroutine: ChActMSSIM_PTCCH
Purpose:    To activate a PTCCH channel in the MSSIM
Input:      $Ref      (MSSIM Channel reference)
            $Cell     (MSSIM Cell)
            $TG
            $TRXC
            $TS
            $SecTS    (Secondary timeslot, only applicable for RTTI)
            $Mode     (BTTI/RTTI)
            $UCM      (Uplink Channel Mode)
            $SendAB   (Send Access Burts, 0=No, 1=Yes)
            $TypeOfAB (Type of Access Burst, 0=Single AB, 1=Four AB)
            $RxTrfcOn (1 or 0)
Output:     Error     (0=OK, 1= Error)
            CcId      (MSSIM channel id)


=head2 ChRelBTS

 ChRelBTS();

Subroutine: ChRelBTS
Purpose:    To release radio traffic channels or control channels in the BTS
Input:      BTS           => $BTS,
            TG            => $TGId,
            TRXC          => $TRXC,
            TS            => $TS,
            ChannelType   => $ChType,
            SupressError - 1/0 continue even if error is received On/Off
Output:     None


=head2 ChRelMSSIM

 ChRelMSSIM();

Subroutine: ChRelMSSIM
Purpose:    To release a channel in the MSSIM, uses the package variable CcId to
            identify the opened channel
Input:      CcId         - CcId of channel to close
            SupressError - 1/0 continue even if error is received On/Off
Output:     None

Changes:    20091210 BJER Removed global gCcId. Keep gCcId in abi file
            20091221 BJER Added SupressError


=head2 ChannelRequestTA

 ChannelRequestTA();

Subroutine: ChannelRequestTA
Purpose:    request TA-value,  Observe that 3 processes must be turned of on the TSS, rr_Main_tpr...
Input:      None
Output:     TA-value


=head2 CheckL3Data

 CheckL3Data();

=head2 ClearMSSIMbuffer

 ClearMSSIMbuffer();

Subroutine: ClearMSSIMbuffer
Purpose:		Clears the MSSIM message buffer
Input:			None
Output: 		Number of cleared messages


=head2 CompareArrays

 CompareArrays();

==Subroutine: CompareArrays
Purpose:    To compare two Arrays
Input:      $lArray1    ONE dimensional array
            $lArray2    ONE dimensional array
            Debug       Enables debug trace 1 = On, 0 = Off

Output:     0 - tables DOES NOT match
            1 - tables match
==

=head2 CompareHash

 CompareHash();

Subroutine: CompareHash
Purpose:    Compares two hashes by using recursion
Input:      Expected    Expected hash table
            Received    Hash table to compare Expected to
            Debug       Set to 1 to get debug printouts

Output:     0 - tables DOESNT match
            1 - tables match


=head2 ConvertTAValue

 ConvertTAValue();

Subroutine: ConvertTAValue
Purpose:    To convert TA values from/to decimal to MSSIM format
Input:      Value (Value to be converted),
Output:     Converted value

Comments:   We support setting the TaAb and TaNb fields with 1/8th of a symbol.
            The TaAb and TaNb fields are unsigned shorts (16 bits) where the upper byte contains
            the high-precision part (1/8th of a symbol) and the lower byte is the low-precision part
            in steps of symbols.
            Thus, to set a ta of 1/8 you would write 1 << 8 = 256, to set it to 2/8 you write 2<<8 = 512 etc.
            To set it to 1 symbol + 2/8 you write: 2<<8 + 1 = 513 etc.


=head2 CreateParameterHash

 CreateParameterHash();

CreateParameterHash
SYNTAX: CreateParameterHash(Data => \@PacketData);
IN:  %Param
OUT: %Param


=head2 GetAccessDelayFromABISMessage

 GetAccessDelayFromABISMessage();

Subroutine: GetAccessDelayFromABISMessage
Purpose:    To return Access Delay value from ABIS log message
Input:      Message, message got from ABIS log
Output:     Access Delay value in dec.


=head2 GetMeasurementReport

 GetMeasurementReport();

Subroutine: GetMeasurementResult
Purpose:  Receive MeasurmentResult on Abis and return timing advance number


Input:    Timout              Timeout, Default is 1 second
          Expect              Part of MeasurementResult wanted
          Tries               Number of messages to search through

Output:   MeasurementResult   Message sent on Abis
                              -1 is Returned if no MeasurementResult was found



=head2 GetMeasurementResult

 GetMeasurementResult();

Subroutine: GetMeasurementResult
Purpose:  Receive MeasurmentResult on Abis and return timing advance number


Input:    Timout              Timeout, Default is 1 second
          Expect              Part of MeasurementResult wanted
          Tries               Number of messages to search through

Output:   MeasurementResult   Message sent on Abis
                              -1 is Returned if no MeasurementResult was found



=head2 GetTAFromMSSim

 GetTAFromMSSim();

Subroutine: GetTAFromMSSim
Purpose:  Receive TA (Timing Advance) from 'RR Physical Information' message on air interface

Input:    Timeout         (Timeout for each message reading)
          Tries           (Number of messages to search through)

Output:   TA              (Timing Advance, -1 if not found)



=head2 GetTAValue

 GetTAValue();

Subroutine: GetTAValue
Purpose: Get TA value from MeasurementResults in Abisco
Input:
Output:


=head2 GetTAValueMSSIM

 GetTAValueMSSIM();

Get current TA Value from the MSSIM


=head2 GetTAValueMSSIM_PTCCH

 GetTAValueMSSIM_PTCCH();

Purpose: Get current TA Value from the MSSIM, using packet data channel
Input:
Output: TA Value from PTCCH


=head2 LAPDmSend

 LAPDmSend();

Subroutine:  LAPDmSend
Purpose:      To send a LAPDm frame
Input:         $Chan      (SDCCH, SACCH or FACCH)
               $MsPower  (Only applicable for SACCH)
               $TA        (Timing advance, only applicable for SACCH)
              $Cmd       (Command = "I", "RR", RNR", "REJ", "SABM", "DM", "UI", "DISC" or "UA"
               N(R)       (Receive Sequence Number)
               N(S)      (Send Sequence Number)
               P/F       (Poll/Final bit)
               SAPI      (Service Access Point)
               C/R        (Command/Response)
               M          (More bit)
               EL        (Length Extension bit)
               EA        (Address Extension Bit)
               refData      (Information Field)
              CcId      => $gCcId
Output:       None


=head2 PrintDebug

 PrintDebug();

==Subroutine: PrintDebug
Purpose:    Prints Debug printouts if global variable Debug is set to 1
Input:      DebugMsg => "Debug msg\n"
Output:     None
==

=head2 PrintMessageArray

 PrintMessageArray();

Subroutine: PrintMessageArray
Purpose:    Subroutine to print all message hashes located in an array of
            hash references.

Input:      Hash containing the following key:

            MessageArrayRef - An array of hash references

Output:     None


=head2 ReceiveABISMessage

 ReceiveABISMessage();

Subroutine: ReceiveABISMessage
Purpose:     To receive a spontanious message from ABIS
Input:      $BTS (Abisco connection parameter)
             Timeout value
             Expected message type
Output:     Received Data hash


=head2 ReceiveAbiscoMessage

 ReceiveAbiscoMessage();

Subroutine: ReceiveAbiscoMessage
Purpose:     To receive a spontanious message from Abisco
Input:      $BTS (Abisco connection parameter)
             Timeout value
             Expected message type
             Supress, "SupressError" if HandleError should not be called
Output:     Received Data hash


=head2 ReceiveAbiscoMsg

 ReceiveAbiscoMsg();

Subroutine: ReceiveAbiscoMsg
Purpose:    Receive msgs on Abisco until one is found that matches the
            in Expected hash or timeout occurs

Input:      BTS           - Abisco connection parameter
            Timeout       - 0.., time to look for msg in seconds
            SupressError  - 1/0, supress croak On/Off
            ErrorMsg      - if this string is defined it will be printed if an
                            error occurs
            Expected      - Hash containing keys to look for in received msg

Output:     0 - Message matching Expected's keys NOT found
            1 - Message matching Expected's keys found


=head2 ReceiveMSSimMsg

 ReceiveMSSimMsg();

Subroutine: ReceiveMSSimMsg
Purpose:    Receive msgs on the MSSim until one is found that matches the
            in Expected hash or timeout occurs

Input:      Timeout       - 0.., time to look for msg in seconds
            SupressError  - 1/0, supress croak On/Off
            ErrorMsg      - if this string is defined it will be printed if an
                            error occurs
            Expected      - Hash containing keys to look for in received msg

Output:     0 - Message matching Expected's keys NOT found
            1 - Message matching Expected's keys found


=head2 RestartBTS

 RestartBTS();

Subroutine: RestartBTS
Purpose:    Restarting the BTS, make sure that the parameters set during restart
            complies with your specific TC
Input:      BTS           => $BTS,
            TGId          => $TGId,
            TRXList       => [0, 1],
            SiList        => [ 'SI1', 'SI2', 'SI3', 'SI4', 'SI5', 'SI6', 'MI' ],
            Responses     => 'Int',
            StartingMode  => 'TDM',
Output:


=head2 SendAccessBurstsMSSIM_ext

 SendAccessBurstsMSSIM_ext();

Subroutine: SendAccessBurstsMSSIM_ext
Purpose:  This is an extended version of SendAccessBurstsMSSIM in packetfunc.pm
Input:    MsId        (MSSIM mobile Id)
          CcId        (MSSIM channel id)
          BitsInAB    (0 = 8 bits, 1 = 11 bits)
          TS_AB       (Training sequence for AB 0, 1 or 2)
          TypeOfAB    (0 = single AB, 1 = four ABs)
          RepeatAB    (0 = No, 1 = Yes)
          ULEncoding  (Ulink encoding)
          Chan        (PDTCH or PTCCH)
          AB          (Access burst contents, 8 bits one octet, 11 bits two octets)
Output:   0 = OK
          $Burst      (Type of burst)


=head2 SendHandoverAccess

 SendHandoverAccess();

Subroutine:  SendHandoverAccess
Purpose:      Send a handover acesss
Input:        None
Output:       None


=head2 SendNormalBurstsMSSIM

 SendNormalBurstsMSSIM();

Subroutine: SendNormalBurstsMSSIM
Purpose:  To send normal bursts with the MSSIM
Input:    MsId        (MSSIM mobile Id)
          CcId        (MSSIM channel id)
          ULEncoding  (Ulink encoding)
          Chan        (PDTCH or PTCCH)
          Data        (Data to be sent uplink 23 octets)
Output:


=head2 SetArfcn

 SetArfcn();

Subroutine: SetArfcn
Purpose:    To set the correct ARFCN according to TS
Input:      $BTS
Output:     $TestBand The current BTS under test
            'No error' or 'error'
            'No restart' or 'Restart'   sent back if a restart is necessary to make changes effective


=head2 SetAttrMSSIM

 SetAttrMSSIM();

Subroutine: SetAttrMSSIM
Purpose:
Input:
Output:


=head2 SetCellTGSettings

 SetCellTGSettings();

Subroutine: SetCellTGSettings
Purpose:    If the 'ExpectedCell/TG' input hash doesnt match the current cell/TG settings
            from InfoCell/TG then update cell/TG with 'Expected's keys and restart BTS.
            The 'ExpectedCell' input hash is merged with a default settings hash if
            'UseCellDefaults' is set to 1. The default settings hash has
            the settings a cell has when New TG is used in Abisco.
            NOTE: the cell/TG must be configured once before this function is used
            since it doesnt update HW specific settings in UpdateCell/TG (such as
            ARFCN number).

Input:      BTS             => $BTS,
            TG              => $TGId,
            Cell            => 0,
            UseCellDefaults => 0,
            ForceRestart    => 0,
            ExpectedCell    => {
              BCCHType        => $::BCCHType,
              SDCCHList       => [$::TRXC, $::TS],
              BS_AG_BLKS_RES  => $::BSAG,
              CBCHIndicator   => $::CBCH_Ind,
              ..(above are just examples, all parameters in iwd updatecell valid)},
            ExpectedTG   => {
              ..
            }
Output:     None


=head2 SetTSExtendedRange

 SetTSExtendedRange();

Set TS to Extended Range
Purpose: To enable or disable extended range on a TS
Input: Hash containing
        TS - Timeslot to be changed
        ERI - Extended range 'On' or 'Off'
Output : None


=head2 SetTSSProcesses

 SetTSSProcesses();

Subroutine: SetTSSProcesses
Purpose:  Turn three processes in the TSS ON or OFF
          rr_sign_tpr, rr_conn_tpr, rr_main_tpr

Input:    State           Turn ON or OFF

Output:   None

Note:     Absico crasches when this sub is used!



=head2 findMessagesInLog

 findMessagesInLog();

Subroutine: findMessagesInLog
Purpose:    Subroutine to search a log file for a specific type of messages.

Input:      Hash containing the following key:

             LogFile     - File name of the log file to search

             MessageType - A text prefix at the beginning of each line of the
                           log-file defining the message type.
                           Example: 'DL:' or 'UL:'  are valid message types for
                           an  ABIS log.

            MessageStructure - Reference to a hash containing the message structure.
                           This sturcture is used as a template for returned messages.
                           The hash should be built of smaller hashes of the form:

                          'KeyName' => { 'Offset' => 0,
                                         'Size'   => 8,
                                         'Value'  => undef,
                                         'Type'   => 'Numeric' },

                          where the Offset and Size key values define the location
                          in bits of the data corresponding to the parameter.
                          If Value is set to undef, it will be filled with the values
                          of a correpsonding parameter value of a message in the log.
                          If on the other hand a value is set for Value, that is used
                          as a filter to select only matching messages form the log.
                          Type is used to indicate if Value is a numeric value ('Numeric')
                          or and array (set as 'Array').

            PrefixRemoved - Defines the number of prefix strings each line in the log has
                          before the start of the hex-data. ( Currently it is 1 for Abis logs
                          and 4 for MSSIM logs if the logs are formatted using the substr
                          createMessageLogFromWLog and createMSSIMMessageLogFromWLog.
                          (Set to 1 by default).

Output:    An array of messages matching the given criterias.
           Each array is a clone of the MessageStructure hash given as a parameter.



=cut

=head1 NAME

subs_FC


=head1 DESCRIPTION

--Document number : 128/190 55-CAH 161 1607/1
MODULE      : subs_FC.pm

COPYRIGHT © : ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE      NAME     REVIEW     COMMENT
A   20110202  ERAKOSI   UABJAES   First relese. Approved UABTOH.
B   20110512  ESIOGRA   UABJAES   doGetPlatform modified to show HWInfoResult on failure
                                   Added AbisVersion parameter to abRequestLoadfiles. Was using a global before which we're trying to discourage
                                   Changed TDMCN_TRA corruption command "file write" to "flash write"
                                   Added ReturnType parameter to most abisco functions to allow coder to request a particular result to be returned
                                   sub Debug wasn't logging to file even with DEBUGLEVEL turned off. it should always log to file.
                                   added Project => $Project for doLoadSoftware. this fails with Abisco R35C but wasn't a problem before.
                                   Added parameters for LoadOneSoftwareFile call for R35D.
                                   Added rbs 2000 micro support in sub doGetPlatform.
                                   Added U3 keys for CPR and RUS
                                   Added Proj1 to export list.
                                   getCorruptionMatrix and getCompatibilityMatrix corrected.
                                   Added code to doCheckBTSSoftware to output tests sorted as the FTS shows them
                                   Changed code that sets OML/RSL maps and added "die" statement to force an error if the key isn't present.
                                   Fixed isArrayMatch call in doStartRequestExtra and added doGetNegotiationRecord function and added functions doGetBTSRev, doGetBTSGen and doGetNegotiationRecord
                                   Added sub abEstablishLinks that was removed due to a confusion with ClearCase back in PA9
                                   File was checked into ClearCase with debug output in a function. Checking in new version to remove this.
                                   Found more code missing due to ClearCase mixup. This time with abCompleteStart parameters and clearing message buffer in doHardWareReset
                                   Substantial changes to doStartRequestExtra for improved speed, plus changes for %SoftwareRelease hash to support software split
                                   Code changes to allow DVTCommands to be resent when no response is received
                                   Added function doGetFileSize
                                   Fixed problem with doGetFileSize function!
C   20110513  ESIOGRA  UABJAES    Fixed bug in isDVTConnected function to correctly return false when DVT is not connected
D   20120207  XMAROHM  XPRRANA    Updated for G12A
E   20120102  XMAROHM  XPRRANA    Updated to G12B.
F   20121030  XMAROHM             Updated for G13A. Added getRBSHWUsed, doLFValidCheck, getDestInFileInfo, doLoadDeltaSoftware, doGenerateFRR,doGetIWD and doDeltaFRR.
                                   Updated doSetupLoadFiles, isBTSInitiatedRequest. Clean up of code, removed unused functions.
                                   Updated doGetPlatform to detect RBS6000_DUG_RUS_Macro_DUGCR1, better detection of mixPPC and purePPC.
                                   Updated for Perl 5.14.
--

=head1 REQUIRES

L<Data::Dumper> 

L<SwitchBox> 

L<User> 

L<Time::HiRes> 

L<POSIX> 

L<AbiscoFunc3> 

L<AbiscoFunc2> 

L<AbiscoFunc1> 

L<PerlFunc> 

L<BTSFunc> 

L<Complex> 

L<Abisco_Connection> 

L<DVTFunc> 

L<XML::Simple> 

L<Exporter> 

L<diagnostics> 


=head1 METHODS

=head2 Debug

 Debug();


ekentma 2010-04-09
ekentma 2010-05-01 A touch of colour
function Debug

Standard output function to format a debug string. The string will not be displayed
if the debug value is less than the global $DEBUGLEVEL

Level can be: 0: Critical, 1: Warning, 2: Info, 3: Debug1, 4: Debug2, 5: Debug3

Example: Debug(2, "My debug message.");
Returns: 1 result on success, 0 on failure



=head2 FileSizeToList

 FileSizeToList();


unknown 1979-01-01
function FileSizeToList

Convert a file size in bytes to a list for Abisco

Example: FileSizeToList(5242880);
Returns: list of integers



=head2 List2Str

 List2Str();


esiogra 2010-07-16
function List2Str

Convert an array of ASCII numbers to a string

Example: List2Str(90,70,74,65,48,65,90);
Returns: string



=head2 ParseDVTResponse

 ParseDVTResponse();


ekentma 2010-05-01
function ParseDVTResponse

Format the date and time for use with debugging output

Example: ParseDVTResponse('rev ram');
Returns: A cleaned up response



=head2 RaiseError

 RaiseError();

===Subroutine: RaiseError
COMMENT  : To set Result=Not_Applicable with error text(reason)
Syntax : RaiseError("Error found!");
In: Text to print
---

=head2 Run

 Run();


esiogra 2010-10-16
function Run

Sets up globals and initialises.

Example: n/a
Returns: n/a



=head2 Str2List

 Str2List();


esiogra 2010-10-16
function Str2List (previously called StrToList)

Convert a string to a corresponding array of ASCII numbers.

Example: Str2List('ZFJA0AZ');
Returns: list of integers



=head2 TimeStamp

 TimeStamp();


esiogra 2010-07-09
function TimeStamp

Format the date and time for use with debugging output

Example: TimeStamp();
Returns: Formatted time stamp



=head2 abCompleteStart

 abCompleteStart();


esiogra 2010-06-29
function abCompleteStart

Performs a CompleteStart.

Example: abCompleteStart(BTS => $BTS, TG => 0, ApplicationDownload => 'CONDITIONAL', Project => 'avanti_g10b', SoftwareVersion => 'P7BZ');
Returns: 1 on success, 0 on failure



=head2 abConnectResetStartConfigEnableOpinfo

 abConnectResetStartConfigEnableOpinfo();


function abConnectResetStartConfigEnableOpinfo

description

Example:
Returns:



=head2 abEstablishLinks

 abEstablishLinks();


esiogra 2011-03-23
function abEstablishLinks

Establish CF link. Code copied from Kostas' own implementation.

Example: abEstablishLinks(BTS => $BTS, TG => $TG);
Returns: 1 on success, 0 on failure



=head2 abFilePackageEndCommand

 abFilePackageEndCommand();


esiogra 2010-12-10
function abFilePackageEndCommand

Send a FilePackageEndCommand to the BTS.

Example: $result = abFilePackageEndCommand(BTS => $BTS, TG => $TG, MOClass => 'CF', ReturnType => 'FilePackageStateIndic.FPSI');
Returns: Can return single scalar from Abisco hash, entire hash or Boolean



=head2 abFileRelationRequest

 abFileRelationRequest();


esiogra 2010-06-29
function abFileRelationRequest

Returns a file relation request and returns entire abisco response.

Example: abFileRelationRequest(BTS => $BTS, TG => $TG, File => \%ZFJ_U1);
Returns: Abisco response hash.



=head2 abHWInfoRequest

 abHWInfoRequest();


esiogra 2010-06-29
function abHWInfoRequest

Example: abHWInfoRequest(BTS => $BTS);
Returns: Abisco hash from the HWInfoRequest command



=head2 abListLoadfileNames

 abListLoadfileNames();


esiogra 2010-06-29
function abListLoadfileNames

List the load file names for a software version.

Example: abListLoadfileNames(BTS => $BTS, Project => 'avanti_g10b', SoftwareVersion => 'P7BZ');
Returns: Array containing all load file names.



=head2 abLoadDataEnd

 abLoadDataEnd();


esiogra 2010-06-29
function abLoadDataEnd

Performs a LoadDataEnd.

Example: abLoadDataEnd(BTS => $BTS);
Returns: 1 on success, 0 on failure



=head2 abLoadDataInit

 abLoadDataInit();


esiogra 2010-10-14
function abLoadDataInit

Run an Abisco LoadDataInit call.

Example: abLoadDataInit(BTS => $BTS, TG => $TG, TRXC => $TRXC, MOClass => 'CF', File => $File);
Returns the Abisco response or you can define the parameter Simple => 'YES' to just get a boolean pass or fail



=head2 abLoadOneSoftwareFile

 abLoadOneSoftwareFile();


esiogra 2010-06-29
function abLoadOneSoftwareFile

Loads a single software file.

Example: abLoadOneSoftwareFile(BTS => $BTS, Project => 'avanti_g10b', Filename => 'ZFJP7BZ', SoftwareVersion => 'P7BZ');
Example: abLoadOneSoftwareFile(BTS => $BTS, Project => 'avanti_g10b', Filename => 'ZFJP7BZ', SoftwareVersion => 'P7BZ', FilePackageEnd => 'NO');
Returns: 1 on success, 0 on failure



=head2 abLoadSoftware

 abLoadSoftware();


esiogra 2010-07-08
function abLoadSoftware

Run an Abisco LoadSoftware call.

Example: abLoadSoftware(BTS => $BTS, TG => $TG, Project => $Project, SoftwareVersion => $U1, ApplicationDownload => 'CONDITIONAL');
Returns: 1 on success, 0 on failure



=head2 abRequestLoadfiles

 abRequestLoadfiles();


esiogra 2010-06-30
function abRequestLoadfiles

makes a request to ProgProg to load all files

Example: abRequestLoadfiles(BTS => $BTS, Project => 'avanti_g11b', SoftwareVersion => 'P1BV');
Returns: true on success, false on failure



=head2 abResetCommand

 abResetCommand();


esiogra 2010-08-11
function abResetCommand

Send a reset command to the BTS

Example: abResetCommand(BTS => $BTS, TG => $TG, TRXC => $TRXC, MOClass => 'CF');
Returns: 1 on success, 0 on failure



=head2 abStartRequest

 abStartRequest();


esiogra 2010-07-01
function abStartRequest

Send a start request to the BTS.

Example: abStartRequest(BTS => $BTS, TG => $TG, TRXC => $TRXC, MOClass => 'CF', ReturnType => 'MOClass.MOClass');
Returns: 1 on success, 0 on failure



=head2 doAbisLog

 doAbisLog();


esiogra 2010-07-09
function doAbisLog

Turn Abis logging on and off.

Example: doAbisLog(BTS => $BTS, TG => $TG, State => 'OFF');
Returns: 1 on success, 0 on failure



=head2 doCRCCheck

 doCRCCheck();


function doCRCCheck

description:
Example:
Returns:



=head2 doCheckBTSSoftware

 doCheckBTSSoftware();


function doCheckBTSSoftware

To see if the software in the RBS is correct, either by file revision or CRC.

Example: (BTS => $BTS, DXUPlatform => $DXUPlatform, Software => $Software)
Returns: 1 if the loaded software matches, 0 if not.



=head2 doChecksumErrorOnFile

 doChecksumErrorOnFile();


esiogra 2011-06-28
function doChecksumErrorOnFile

Creates a checksum error on a software file.

Example: doChecksumErrorOnFile(BTS => $BTS, Project => 'avanti_g11bg5', Filename => 'DXPP1CTZ');
Returns: 1 on success, 0 on failure



=head2 doConnectDVT

 doConnectDVT();


esiogra 2010-07-07
function doConnectDVT

Tries to connect to DVT.

Example: doConnectDVT($BTS);
Returns: 1 result on success, 0 on failure



=head2 doConnectTTR

 doConnectTTR();


esiogra 2010-07-07
function doConnectTTR

Tries to connect to TTR. This function exists, although I'm not sure it is
possible to remotely connect the TTR. I'll leave the function here in case it
is possible in the future.

Example: doConnectTTR($BTS);
Returns: 1 result on success, 0 on failure



=head2 doCorruptFile

 doCorruptFile();


ekentma 2010-08-01
function doCorruptFile

doCorruptFile

Example: doCorruptFile('CMCN_DXP_B', 'CMCN_TRP_U');
Returns: n/a



=head2 doCorruption

 doCorruption();


function doCorruption

Corrupts files and receives a BG.Fault verifing the corruption.

Example: doCorruption(Software => $Software, HardwareReset = 'NO');
Returns: 1 result on success, 0 on failure



=head2 doFormatNegRecIIList

 doFormatNegRecIIList();


esiogra 2010-10-27
function doFormatNegRecIIList

returns a string equivalent of the NegRecII List by decoding it

Example: $string = doFormatNegRecIIList(@NegRecIIList);
Returns: a string representation of the NegRecIIList



=head2 doFormatNegRecIList

 doFormatNegRecIList();


esiogra 2010-10-27
function doFormatNegRecIList

returns a string equivalent of the NegRecI List by decoding it

Example: $string = doFormatNegRecIList(@NegRecIList);
Returns: a string representation of the NegRecIList



=head2 doGenerateFRR

 doGenerateFRR();


function doGenerateFRR

Description: Generate a FileRelationList for all load files
Example: doGenerateFRList(FRROn=> 'U2', Default => 'AN', Delta => ('DXP','TRP'),
         ZFJ => 'NN', Indicator => 'YES')
         FRROn: The software you are doing the FRR on.
         Default: The default state for all the loadfiles.
         ZFJ: The state of the ZFJ load file.
         Delta: Changes the default state AA->AN, AN->AA, NN->AN for the load files.
         Indicator: Specifies that
         SwitchDelta: When default is NN, delta is AA.
         CheckForCPA: If CPA do not exist in the load files, CPR will get the default value.
Returns: Array of FileRelationIndications: AA,AN,AN...
         Array containing the FileRelationList: '1','3','2','3','2','3'...



=head2 doGetBTSGen

 doGetBTSGen();


esiogra 2011-03-17
function doGetBTSGen

Return the negrec value that matches the given Software Release

Example: doGetNBTSGen('G11B');
Returns: scalar



=head2 doGetBTSRev

 doGetBTSRev();


esiogra 2011-03-17
function doGetBTSRev

Return the negrec value that matches the given Software Release

Example: doGetBTSRev('G11B');
Returns: array



=head2 doGetFaultReport

 doGetFaultReport();


function doGetFaultReport

description: Checks that the Fault in FaultMapClass exists in the FaultReports
             gathered during the specified timeout (default 30 seconds).

Example: $result = doGetFaultReport(BTS => $BTS,
                                    FaultMapClass => 'IntFaultMapClass1A',
                                    Fault => 21);
Returns: 1 if the fault exists and 0 if the fault does not.



=head2 doGetFileSize

 doGetFileSize();


esiogra 2011-04-20
function doGetFileSize

Return the filesize in bytes for a given load file

Example: doGetNBTSGen(BTS => $BTS, Project => 'avanti_g11bg5', Filename => 'DXPP1CTZ');
Returns: scalar



=head2 doGetFirstTRXCLocation

 doGetFirstTRXCLocation();


erakosi 2010-10-05
function doGetFirstTRXCLocation

Get the first location of a TRXCType

Example: doGetFirstTRXCLocation (TRXCType => 'cTRU');
Returns: Integer with first TRXCType location



=head2 doGetIWD

 doGetIWD();


function doGetIWD

Return the latest or oldest IWD

Example: doGetIWD(Version => 'NEW');
Returns: scalar



=head2 doGetNegotiationRecord

 doGetNegotiationRecord();


esiogra 2011-03-17
function doGetNegotiationRecord

Return the negrec value that matches the given Software Release

Example: doGetNegotiationRecord('G11B');
Returns: scalar



=head2 doGetOMLMaps

 doGetOMLMaps();


esiogra 2010-11-01
function doGetOMLMaps

Return the OML maps that match the given Software Release

Example: doGetOMLMaps('G11B');
Returns: two element array ($OML1, $OML2)



=head2 doGetOMLRSL

 doGetOMLRSL();


esiogra 2010-11-01
function doGetOMLRSL

Return the OML and RSL that match the given IWD

Example: doGetOMLRSL('G11B');
Returns: two element array ($oml, $rsl)



=head2 doGetPlatform

 doGetPlatform();


function doGetPlatform

Get the platform hardware type by detecting specific hardware in the RBS

Example: doGetPlatform(BTS => $BTS, TG => $TG);
Returns: string indicating platform type or empty string on failure



=head2 doGetRSLMaps

 doGetRSLMaps();


esiogra 2010-11-01
function doGetRSLMaps

Return the RSL maps that match the given Software Release

Example: doGetRSLMaps('G11B');
Returns: two element array ($RSL1, $RSL2)



=head2 doGetRusVersion

 doGetRusVersion();


Written by esiogra, added by xmarohm 2011-08-10
function doGetRusVersion

Retrieves the RUS software version.

Example: doGetRusVersion(BTS => $BTS, Project => $Project, Filename => 'RUS' . uc($U1) . 'Z');
Returns: the version of the RUS software



=head2 doGetSoftwareVersion

 doGetSoftwareVersion();


esiogra 2010-10-20
function doGetSoftwareVersion

Return the software version for one software location on the BTS

Example: $software =
Returns: Software version running on BTS, eg "P1AA"



=head2 doHardwareReset

 doHardwareReset();


esiogra 2010-09-23
function doHardwareReset

Wait for a given number of seconds

Example: doHardwareReset();
Example: doHardwareReset(1);
Returns: n/a



=head2 doLFValidCheck

 doLFValidCheck();


function doLFValidCheck

description: Check if the load file is valid on the hardware
Example: doLFValidCheck(LoadFile => $Array('DTR', '$PDXU'), USoftware => 'U1')
Returns: 1 if the load file is allowed, 0 otherwise



=head2 doLoadDeltaSoftware

 doLoadDeltaSoftware();


function doLoadDeltaSoftware

Does a delta upgrade on the RBS software, upgrading only the files
that is new.

Example: doLoadDeltaSoftware(BTS => $BTS, Project => $Project,
                        SoftwareVersion => $U1);
Returns: Array containing the software that was loaded, 0 on error.



=head2 doLoadSoftware

 doLoadSoftware();


esiogra 2010-06-29
function doLoadSoftware

This function will load whatever software is necessary to get the BTS to be
on the specified version. Already loaded software is not loaded unless the
parameter $ApplicationDownload = 'YES' is passed. Once completed, a FilePackageEndCommand
is sent and a restart performed if requested by the BTS.
This function only differs from "LoadSoftware" since with this function you can
specify where a StartRequest is sent at the end of the process.

Example: doLoadSoftware(BTS => $BTS, TG => $TG, Project => $Project, SoftwareVersion => $U1, StartRequest => 'NO');
Returns: 1 on success, 0 on failure



=head2 doPowerOffRBS

 doPowerOffRBS();


function doPowerOffRBS

description

Example:
Returns:



=head2 doPowerOnRBS

 doPowerOnRBS();


function doPowerOnRBS

description

Example:
Returns:



=head2 doSetAbisIWD

 doSetAbisIWD();


unknown 2010-09-09
function doSetAbisIWD

Set ABIS IWD version

Example: doSetAbisIWD(BTS => $BTS, Version => 'OLD');
Returns: true on success, false on failure



=head2 doSetupAbisIWDVersion

 doSetupAbisIWDVersion();


unknown 1979-01-01
function doSetupAbisIWDVersion

Set ABIS IWD version

Example: doSetupAbisIWDVersion();
Returns: n/a



=head2 doSetupFunctionMaps

 doSetupFunctionMaps();


unknown 1979-01-01
function doSetupFunctionMaps

Populates the function maps in our global %SR. This function should probably
be reviewed to remove usage of globals that are not required.

Example: doSetupFunctionMaps(AbisVersion => $AbisVersion);
Returns: n/a



=head2 doSetupLoadFiles

 doSetupLoadFiles();


esiogra 2010-07-14
function doSetupLoadFiles

Create values for each of the Abisco keys such as %DXP_U1, %RUS_U2, etc.

Example: doSetupLoadFiles(BTS => $BTS, Project => $Project, U1 => $U1, U2 => $U2, U3 => $U3, U4 => $U4);
Returns: n/a



=head2 doSoftwareAnalyse

 doSoftwareAnalyse();


function doSoftwareAnalyse

description: Analyse the difference between two software
Example: doSoftwareAnalyse();
Returns: Array containing the files that will be upgraded.



=head2 doStartRequestExtra

 doStartRequestExtra();


esiogra 2010-07-19
function doStartRequestExtra

Send a start request to the BTS and perform the following optional tasks for
242.06:301 action 7 (and maybe others):

  - check StartRequestAccept is received
  - check BTS peforms a Reset
  - check NegRec
  - check BTS comes back up as Started
  - check NegRecAck values
  - check BRR
  - check BFR
  - check BMR
  - check BTSRev
  - check BTSGen

Example: doStartRequestExtra(BTS => $BTS, TG => $TG, TRXC => $TRXC, MOClass => 'CF');
Returns: Abisco result on success, 0 on failure



=head2 doWait

 doWait();


ekentma 2010-08-01
function Wait

Wait for a given number of seconds

Example: Wait(30);
Returns: n/a



=head2 extractAbiscoKeys

 extractAbiscoKeys();


esiogra 2010-12-10
function extractAbiscoKeys

Returns a hash of the keys extracted from the Abisco hash.

Example: extractAbiscoKeys(\%Resp, 'FilePackageStateIndic.FPSI');
Returns: A new hash with key=value in the case that multiple keys are defined,
         otherwise just a scalar value.



=head2 getCRCMatrix

 getCRCMatrix();

=head2 getCompatibilityMatrix

 getCompatibilityMatrix();

=head2 getCorruptList

 getCorruptList();

===Subroutine: getCorruptList
COMMENT  : Get the list of files to corrupt based on table content
Syntax : getCorruptList($Software);
In: Table (hash) containing list of files
---

=head2 getCorruptionMatrix

 getCorruptionMatrix();

=head2 getDestInFileInfo

 getDestInFileInfo();


function getDestInFileInfo

description: Get data from the FILE INFO file for a specific software.
Example: getDestInFileInfo(BTS => $BTS, Project => $rproject, SoftwareVersion => $value,
                     LoadFile => $file, TSSPath => $TSSPath);
Returns: Array containing the Dest values.



=head2 getRBSHWUsed

 getRBSHWUsed();


function getRBSHWUsed

description: Get the valid hardware for the current running platform.
Example:
Returns: Array of valid hardware keys



=head2 getSymbInFileInfo

 getSymbInFileInfo();


function getSymbInFileInfo

Description: Get the SYMB data from the FILE INFO file and put it in the
             the global variable
Example: getSymbInFileInfo(BTS => $BTS, Project => $rproject,
         SoftwareVersion => $value, USoftware => $key, TSSPath => $TSSPath);
Returns: N/A



=head2 isArrayMatch

 isArrayMatch();


esiogra 2010-06-29
function isArrayMatch

Compare two arrays and return true if the arrays are the same, false otherwise.

Example: isArrayMatch(\@array1, \@array2);
Returns: true if the two arrays are the same, false otherwise



=head2 isBTSInitiatedRequest

 isBTSInitiatedRequest();


esiogra 2010-06-30
function isBTSInitiatedRequest

checks to see if we received a BTSInitiatedRequest as the result of sending
a filepackageEnd command

IMPORTANT: you should not call this function to see a negative result, eg:
$var = !isBTSInitiatedRequest(BTS=> $BTS);
since checking for the absence of a BTS Initiated Request must be performed
in a different manner. See the isNotBTSInitiatedRequest function below.

Example: isBTSInitiatedRequest(BTS => $BTS);
Returns: 1 if BRR is received, 0 otherwise



=head2 isCorrupted

 isCorrupted();


function isCorrupted

description:
Example:
Returns:



=head2 isDVTConnected

 isDVTConnected();


esiogra 2010-07-07
function isDVTConnected

Checks if we can establish a connection to DVT.

Example: isDVTConnected($BTS);
Returns: 1 result on success, 0 on failure



=head2 isNoBTSInitiatedRequest

 isNoBTSInitiatedRequest();


esiogra 2010-06-30
function isNoBTSInitiatedRequest

checks to see if we received a BTSInitiatedRequest as the result of sending
a FilePackageEndCommand.

Example: isNotBTSInitiatedRequest(BTS => $BTS);
Returns: 0 if BRR is received, 1 otherwise



=head2 isReset

 isReset();


esiogra 2010-08-11
function isReseet

Checks to see if the status of MOClass is Reset

Example: isReset(BTS => $BTS, MOClass => 'CF');
Returns: 1 on success, 0 on failure



=head2 isStarted

 isStarted();


esiogra 2010-07-09
function isStarted

Checks to see if the status of MOClass is Started

Example: isstarted(BTS => $BTS, MOClass => 'CF');
Returns: 1 on success, 0 on failure



=head2 isSwitchBoxOn

 isSwitchBoxOn();


function isSwitchBoxOn

description

Example:
Returns:



=head2 isTTRConnected

 isTTRConnected();


esiogra 2010-07-07
function isTTRConnected

Checks if we can establish a connection to TTR

Example: isTTRConnected($BTS);
Returns: 1 result on success, 0 on failure




=cut

=head1 NAME

Subs_FreqHopp


=head1 DESCRIPTION

Document number: 170/190 55-CAH 161 1607/1
MODULE      : SubsFreqHopp
DESCRIPTION : Contains subroutins from old test program freqhopp.abi
              that will be used in 15_01.abi.

COPYRIGHT © : ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE       NAME      REVIEW    COMMENT
A     20100913   QRADGUT   XRSSAJO   File created and added all test cases for this function
B     20110513   QRADGUT   XTOBSEM   Add ClearWrite before MaxHold is called.
                                     Fix in HoppingCheck/BCCHFreqOnly due to TR HO13388
C     20121108   XANSBEM   XLEIMAR   Implemented ActiveTG, Ran Perl Critic and updated
                                      script to latest script template


=head1 REQUIRES

L<Carp> needed for 'croak' function

L<Hash::Util> 

L<English> 

L<Globals> 

L<dbLog> 

L<PerlFunc> 

L<InstrFunc> 

L<AbiscoFunc2> 

L<Msg> 

L<SubInit_FreqHopp> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 AddInstr

 AddInstr();

SUBROUTINE  : AddInstr
DESCRIPTION : Attach external instrument in list
IN  :  1. @InstrList
OUT :  -


=head2 BCCHFreqOnly

 BCCHFreqOnly();

SUBROUTINE  : BCCHFreqOnly
DESCRIPTION : Checks with the Spectrum Analyzer if the transmission only
              occurs on BCCH after the release of all calls.
              The BCCH must be the first channel in the list.
IN  : 1. $ARFCNList
OUT :


=head2 CheckInterferenceLevel

 CheckInterferenceLevel();

SUBROUTINE  : CheckInterferenceLevel
DESCRIPTION :
IN  : $N    -> expected amounts oc RF resource indications
OUT : $Band -> interference band


=head2 FetchCDUType

 FetchCDUType();

SUBROUTINE  : FetchCDUType
DESCRIPTION : Fetch CDUType from HWData
IN  : %HWData (return from GetHWInfoResult)
OUT : CDUType


=head2 FormatTestcaseName

 FormatTestcaseName();

SUBROUTINE  : FormatTestcaseName
DESCRIPTION : Reformats the PAR hash test case name for printout purposes.
              If the input string is not on the format "XX_YY", it is returned unchanged.
IN  : TestcaseName => "xx_yy"
OUT : "xx.yy"


=head2 GetHWInfoResult

 GetHWInfoResult();

SUBROUTINE  : GetHWInfoResult
DESCRIPTION : Get a HwInfoResult
IN  : -
OUT : HwInfoResult


=head2 HoppingCheck

 HoppingCheck();

SUBROUTINE  : HoppingCheck
DESCRIPTION : Checks with the Spectrum Analyzer if hopping is performed.
IN  : 1. $ARFCNList -> The ARFCN's to check for hopping
OUT :


=head2 NoiseOn

 NoiseOn();

SUBROUTINE  : NoiseOn
DESCRIPTION : Creates noise with the Signal Generator
IN  : $N    -> expected amounts oc RF resource indications
OUT : $Band -> interference band


=head2 ReceiveAbiscoMsg

 ReceiveAbiscoMsg();

SUBROUTINE  : ReceiveAbiscoMsg
DESCRIPTION : Recieve Abisco Message
IN  : -
OUT : {Message}


=head2 ResetTG

 ResetTG();

SUBROUTINE  : ResetTG
DESCRIPTION : Resets the TG to the one stored in Stored TG

IN  :     Cell, TG, MCTR
OUT :     Will die if errors found
Sample:   ResetTG(%StoredTG);


=head2 SetErrorFreqHopp

 SetErrorFreqHopp();

SUBROUTINE  : SetErrorFreqHopp
DESCRIPTION : Changes the cell configuration to an errorness frequency
              hopping. MAIO will be the same for different TRXCs.
              SDCCH is not hopping.
              A complete startup will be performed.
IN  : $HSN, $ARFCN_BBHopp, $TS
OUT :


=head2 SetHoppingMode

 SetHoppingMode();

SUBROUTINE  : SetHoppingMode
DESCRIPTION : Changes the cell configuration to a hopping type.
              SDCCH is NOT hopping.
              A complete startup will be performed.
IN  : 1. $HopMode -> 'BASEBAND' || 'SYNTH' || 'SYNTH_SDCCH' || 'OFF'
      2. $HSN
      3. $ARFCNList
OUT :


=head2 SetICM

 SetICM();

SUBROUTINE  : SetICM
DESCRIPTION : Changes ICM in TS configuration.
IN  : 1. $ICM
      2. $ICMAP
      3. $ICMCR
      4. $ICMPar -> reference to array ICMPar
      5. $TRXC
      6. $TS
OUT :


=head2 StoreTG

 StoreTG();

SUBROUTINE  : StoreTG
DESCRIPTION : Store TG parameters. This subroutin shall be followed by ResetTG

IN  :
OUT :     {Cell}, {TG}, {MCTR};
Sample:   %StoredTG = StoreTG();


=head2 TSFreqSpec

 TSFreqSpec();

SUBROUTINE  : TSFreqSpec
DESCRIPTION : Calculate the Frequency Specifier for TS
IN  : 1. $TX_RXInst
      2. $TN
OUT : 1. \@TSFreqSpec



=cut

=head1 NAME

Subs_FuncAdm


=head1 DESCRIPTION

Document number: 73/190 55-CAH 161 1607/1
MODULE      : Subs_FuncAdm
DESCRIPTION : Contains subroutines for Functionality Administration tests

COPYRIGHT ©:: ERICSSON AB S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV DATE      NAME        REVIEW          COMMENT
A   20100913 QRADGUT      Syntronic AB/   Approved UABTOH. First approved revision.
                          Martin Wikström

B   20100927 QRADGUT                      Fix bug in HWInfoReqRepeatedBTS, affects only TC 19.05:008.
                                          Approved UABTOH

C   20101018 QRADGUT                      Merged from REV_B.
                                          Modified range of var FinalTime in WaitForTimeSlotPowerSavingsReport.
                                          Added XtraSec var in CheckSwichedOffTimeValuesInTSPSReport
                                          Approved UABTOH

D   20101101 QRADQUT                      Added variable WithoutCMB (used by 242:07).
                                          Added OnOff variable in ConfigMO (used by TFConfigRequest)
                                          Approved UABTOH.

E   20110408 Synronic AB/ Syntronic AB/   Fix bug in CheckDiffARFCNOnDVT.
             Mark Bentham David Melin     Added ConfigReadMO, TSConfig, SetCell, CompleteStartBTS, DefineCell, SetTG, SendStatusRequest.
                                          Updated CompleteStart, UpdateCell. Fix bug in CheckTSPSCapabilitiesOfAllTRXC (TR HN10617).
                                          Updated SetTG for 2 TRXC. Approved UABTOH.

F   20110511 QRADGUT      XTOBSEM         Added functions AnalyzeInfo and SaveCapabilitiesInFile (to fix TR HN28457 and HN32741)
                                          Modified CheckDiffARFCNOnDVT.
                                          Modified subroutines for MCTR MO.
                                          Modified ConfigMO for TSConfigRequest (TR HN65128) and SetTG (CH hangs)
                                          Added PowerBackOffControl sub and replace FindPowerMaxValue by FindPowerMinMaxValue
                                          (TR HN70449/HN75057 affected TC in 19.16 script)
                                          Modified ConfigMO for TXConfigRequest (TR HN81360 )
                                          Added GetMCTRRecords,MonitorTrxcMctrTablesOnDVT,ReceiveMessage
                                          and SetMCTRReporting. Exported CompleteStartBTS.
                                          Modified some subroutines to handle MCTR MO.
G   20110513 QRADGUT      XMABENT         Updated ValidateCurrentFreqList/ModifyFreqList
H   20110526 QRADGUT      XTOBSEM         Added SyntaxCheck flag in ConfigMO.
J   20110331 XSOFFRO      XPRRANA         Added GetStartcause to support TC 19.21:090.
                                           Fixed HO65203- Always used TTR.NewTool when comunicating with DVT.
                                           Fixed HO67686- Update Abis message construct for MCTRConfigRequest according to latest IWD
                                           Perlcritic, removed unneccesary functions and variables, added quality related packages.
                                           Moved GetInvalidPower(), GetPnMax(), FoundHwType() to exec directly in init
                                           Updated script template. (TR HP14550)
                                           Added globtype AttributeId so script 19.11 would be compatible.
                                           Added StoreTG, RestoreTG, ChangeTG and GetActiveCell
                                           Updated SetTG, DefineCell, StartMO, ConfigMO, ReadPCM
                                           Added DisconnectConnectTG

PK1 20120926 XSOFFRO      XNAVNAS         Introduced changes needed to implement active TG in script 19.16.
PK2 20121001 XSOFFRO      XMAREDV         Exported function SendStatusRequest for script 19.18.
PK3 20121001 XNAVNAS      XAMMELY         Changed input for CapabilitiesRequest in GetAvailableTFSyncSources
                                           Added input for ConfigMO and changed call to TFConfig
PK4 20121005 XMAREDV      EERICSV         Implemented IP support for SetRightBI_Q1 and SetWrongBI_Q1
PK5 20121005 XYNSTAN      XSOFFRO         Added subroutines GetPlatform and GetAttributes, fixed typo for attributeitems
                                           in sub DecodeTGRecord.
PK6 20121009 XANSBEM      XSOFFRO         Added subroutineGetLEDStatus. Updated subroutines ConfigMOAndExpectAlarm,
                                           CheckPower, ConvertToFloat, ResetMOAndExpectAlarm, ButtonLocal, HardwareReset, CheckMOStateOnDVT
PK7 20121010 XYNSTAN		XNAVNAS         Added subroutine, SendData
                                          Modified ConfigTCC to allow Power as parameter
                                          Changed grep in StartMO, the other grep did not evaluate correctly, scalar(@Result)
                                          always returned number of elements in @MO when running scalar always setting $S_MO
                                          to 0.
PK8 20121017 XANSBEM      XNAVNAS        Fixed erroneous use of grep and Updated RecieveAbiscoMsg
PK9 20121018 XHENRMA      XANSBEM        Updated ReadPCMType to support IP/SIU and updated CheckMOStatus
PK10 20121024 XAMMELY     EERICSV        Changed in ConfigMO to TRXC for Config{WithoutCMB}
PK11 20121026 ELEMARE     XNAVNAS        Corrected MonitorTrxcMctrTablesOnDVT
PK12 20121109 ELEMARE     EERICSV        Added attributes to DecodeMCTRRecord
PK13 20130911 XPATHIL     XAMMELY        --- The following changes have been made in steps ---
 (a) 20130415                           Subs SetTG and ConfigMO modified for IP support
                                         Sub StoreTG modified according to HQ59716_VF01 for caco scripts
                                         Sub ResetTG added along with the modified StoreTG.
                                         Sub RestoreTG modified to comply with HQ59716_VF01 modifications along with older ways of storing TG's (MCTR called MCTRs in older version).
 (b) 20130730                           Subs SetTG and TSConfig modified to comply with new Abisco version (R49A_1)
 (c) 20130828                           Added subroutine FindOctetsInLogFrame (prel. vers., meant for framework in future)
                                         Added sub SplitLargeIntIntoByteArrayInIntFormat in order to do correct unsupported IBW configuration
                                         Applied Perlcritic.
PK14 20140408 XAMMELY     XSALNIC       Modified ConfigAntennaHoppingOff to support IP-SIU which effected 19_16.abi.
PK15 20140708 ELONMAO                   Modified ConfigAntennaHoppingOn to support IP-SIU which effected 19_16.abi.
PK16 20140710 EYOGJIG                   Modified PowerBackOffControl configuration parameters to consistence with New version Abisco(R81A_1) which
                                        will affect 19_16.abi.
PK17 20140730 ESHAOKA     EZHLOZH       Fix HS82514,HS81174,HS84216
PK18 20140932 ECHOMEG     EZHLOZH       Fix HS92186, Add loops for sending commands of "dvt montransfer on" and "tru0/tru1/" to DVT to ensure these commands can be sent successfully.
PK19 20141003 SSI/mier    XMAROHM       ConfigMO updated with BCCH Power Savings Control.


=head1 REQUIRES

L<Hash::Util> 

L<charnames> 

L<English> 

L<Carp> 

L<POSIX> 

L<Storable> 

L<dbLog> 

L<PerlFunc> 

L<DVTFunc> 

L<AbiscoFunc2> 

L<lib> 

L<DBI> 

L<Complex> 

L<Abisco_Connection> 

L<SubInit_FuncAdm> 

L<diagnostics> Produce verbose warning diagnostics


=head1 IMPLEMENTS

L<Exporter> 


=head1 METHODS

=head2 AbisIWDVersionSwitch

 $self->AbisIWDVersionSwitch();

SUBROUTINE  : AbisIWDVersionSwitch
DESCRIPTION :

IN  :
OUT :


=head2 AbisLoggingBTS

 $self->AbisLoggingBTS();

SUBROUTINE  : AbisLoggingBTS
DESCRIPTION : Turn Abis logging off or on

IN  : State => 'OFF',
OUT :


=head2 ActivateRxTx

 $self->ActivateRxTx();

Subroutine: ActivateRxTx
Purpose:   Activate first two TRXs in TRXList
Input:     References to MCTRInstance
Output:    \@trxcs

=head2 AnalyzeInfo

 $self->AnalyzeInfo();

SUBROUTINE  : AnalyzeInfo
DESCRIPTION : Decode each input in Capabalities and save in @CapabilitiesSummary

IN  : Attribute Recorded
OUT : None, Output will be written in the file


=head2 ButtonLocal

 $self->ButtonLocal();

SUBROUTINE  : ButtonLocal
DESCRIPTION : Syntax: Send Button Local Command via DVT and expect Fault Report (if any)

IN  : Unit, FaultMask, Status
OUT : 0|1


=head2 CalcFreqList

 $self->CalcFreqList();

SUBROUTINE  : CalcFreqList
DESCRIPTION : Calculates a Frequency List for TSConfiguration acc. to IWD

IN  : ARFCN => $ARFCN - Pointer to array containing all ARFCNs in
                      desired order (required)
      TX => $TX - Pointer to array containing all TXs in desired order
      RX => $RX - Pointer to array containing all RXs in desired order
      TRXC => $TRXC - if this is given, all TX and RX values will be
                              set to $TRXC
      Note: EITHER TX+RX OR TRXC must be given!
            All input arrays must contain the same number of elements!

      Optional: Hop => <Nr. of Hopp-Frequencies, 1->No Hopping>
OUT :


=head2 CalcFreqListElement

 $self->CalcFreqListElement();

SUBROUTINE  : CalcFreqListElement
DESCRIPTION : Calculates the Frequency List out of given ARFCNs in the argument
              Call: CalcFreqElement (TX=>$TX, RX=>$RX, ARFCN=> <ARFCN>)

IN  :
OUT :


=head2 ChangeTG

 $self->ChangeTG();

SUBROUTINE  : ChangeTG
DESCRIPTION : Updates TG with parameters that cannot be changed with UpdateTG command

IN  :     TGParameters   - hash with all TG Paramters to be changed
          CellParameters - hash with all Cell Parameters to be changed
          TRXC
OUT :     Will die if errors found


=head2 CheckDiffARFCNOnDVT

 $self->CheckDiffARFCNOnDVT();

SUBROUTINE  : CheckDiffARFCNOnDVT
DESCRIPTION : Check, if ARFCN on TX-Master & TX-Slave are different

IN  :
OUT : None


=head2 CheckMCTR

 $self->CheckMCTR();

SUBROUTINE  : CheckMCTR
DESCRIPTION :

IN  :
OUT :


=head2 CheckMOStateOnDVT

 my HN60263 = $self->CheckMOStateOnDVT();

SUBROUTINE  : Check MO State on DVT
DESCRIPTION : Syntax : $State = CheckMOStateOnDVT(MO => $MO, MOState => MOState);

IN  : Mo, MOState, Inst - required parameters
OUT : None


=head2 CheckMOStatus

 $self->CheckMOStatus();

SUBROUTINE  : CheckMOStatus
DESCRIPTION : Checks MO status

IN  : None
OUT : Status


=head2 CheckPower

 $self->CheckPower();

SUBROUTINE  : CheckPower
DESCRIPTION : Returns last value of a list
              (incl. removal of last character !)

IN  :
OUT : $PowerLevel[0] - A list with only one element containing the
      current outputpower on


=head2 CheckRDiv

 $self->CheckRDiv();

SUBROUTINE  : CheckRDiv
DESCRIPTION : CheckRDiv via DVT

IN  : $TRXC
OUT : $CurrRDiv


=head2 CheckSameARFCNOnDVT

 $self->CheckSameARFCNOnDVT();

SUBROUTINE  : CheckSameARFCNOnDVT
DESCRIPTION : Check, if ARFCN On TX-Master & TX-Slave are equal

IN  :
OUT :


=head2 CompareArrays

 $self->CompareArrays();

Subroutine: CompareArrays
Purpose:   Compare two arrays
Input:     References to Array 1-2
Output:    1|0 - (equal| different)

=head2 CompleteStartBTS

 $self->CompleteStartBTS();

SUBROUTINE  : CompleteStartBTS
DESCRIPTION : Do a complete start of BTS

IN  : None
OUT : None


=head2 CompleteStartWithParamters

 $self->CompleteStartWithParamters();

SUBROUTINE  : CompleteStartWithParamters
DESCRIPTION : To do a complete start on choosen TG

IN  : %Input ->TG,
OUT : None


=head2 ConfigAntennaHoppingOff

 $self->ConfigAntennaHoppingOff();

SUBROUTINE  : ConfigAntennaHoppingOff
DESCRIPTION : Configuration of Antenna Hopping Off

IN  :
OUT : None


=head2 ConfigAntennaHoppingOn

 $self->ConfigAntennaHoppingOn();

SUBROUTINE  : ConfigAntennaHoppingOn
DESCRIPTION : Configuration of Antenna Hopping On

IN  :
OUT : None


=head2 ConfigMO

 $self->ConfigMO();

SUBROUTINE  : ConfigMO
DESCRIPTION : Configures MOs TX, RX and TS
              Syntax   : ConfigMO({TRXC => $TRXC, MO => $MO, RXDiv => $RXDiv, etc.});

IN  : Optionally  one or more of the following
      keys: TRXC, FreqSpec, Power, NoFreqSpec, FM, BCC, AIP, MO
OUT :


=head2 ConfigMOAndExpectAlarm

 $self->ConfigMOAndExpectAlarm();

SUBROUTINE  : ConfigMOAndExpectAlarm
DESCRIPTION : Configures MOs TX, RX and TS
              Syntax   : ConfigMO({TRXC => $TRXC, MO => $MO, RXDiv => $RXDiv, etc.});

IN  : Optionally  one or more of the following
      keys: TRXC, FreqSpec, Power, NoFreqSpec, FM, BCC, AIP, MO
OUT :


=head2 ConfigMORX

 $self->ConfigMORX();

SUBROUTINE  : ConfigMORX
DESCRIPTION : To send a RX_CONFIGURATION_REQUEST and read the received
              frames on abis instead from abisco.

IN  : %Input ->BTS, TG, TRXC, MO
OUT : %return (Hash reference);


=head2 ConfigReadMO

 $self->ConfigReadMO();

SUBROUTINE  : ConfigReadMO
DESCRIPTION : Get current parameters for wanted MO
              Syntax   : ConfigReadMO(MO => $MO);

IN  : MO type
OUT : %Resp


=head2 ConfigTCC

 $self->ConfigTCC();

SUBROUTINE  : ConfigTCC
DESCRIPTION : Configuration of TCC on TRXC:
              TRXCMaster & TRXCSlave

IN  :
OUT : None


=head2 ConfigTxAntennaHopp

 $self->ConfigTxAntennaHopp();

SUBROUTINE  : ConfigTxAntennaHopp
DESCRIPTION : Configuration of TX AntennaHopping on TRXC

IN  : DedicationMarker, TrxcNumber, AIP
OUT : None


=head2 ConfigTxDiversity

 $self->ConfigTxDiversity();

SUBROUTINE  : ConfigTxDiversity
DESCRIPTION : Configuration of TX Diversity on TRXC:
              TRXCMaster & TRXCSlave

IN  :
OUT : None


=head2 ConnectMO

 $self->ConnectMO();

SUBROUTINE  : ConnectMO
DESCRIPTION : Sends ConnectCommand to MO defined by MOClass, InstanceNo
              and AssosiatedSOInstance and checks ConnectComplete.

IN  : Optionally one or more of the following
      keys: TRXC, MO, MOState, INST
OUT : None


=head2 ConnectResetStart

 $self->ConnectResetStart();

SUBROUTINE  : ConnectResetStart
DESCRIPTION : ConnectResetStart

IN  : Optionally one or more of the following
      keys: TRXList, MO
OUT : None


=head2 ConvertDBMtoWatt

 $self->ConvertDBMtoWatt();

SUBROUTINE  : ConvertDBMtoWatt
DESCRIPTION : Converts dBm value to Watts

IN  : Power in dBm
OUT : Power in Watts


=head2 ConvertOctToTRXList

 $self->ConvertOctToTRXList();

SUBROUTINE  : ConvertOctToTRXList
DESCRIPTION : Convert Octects from Mctr(s) conf To TRXList

IN  :    Ref to array of MCTRConf
OUT :    @TRXList


=head2 ConvertToFloat

 $self->ConvertToFloat();

SUBROUTINE  : ConvertToFloat
DESCRIPTION : Converts numbers in string format ('-15.12') to Floating
              Point values (-15.12)

IN  : \@RawStrings - Reference to Array containing numbers in
      string format (e.g. '15.12', '12.65')
OUT : \@Floats - Reference to Array containing Floating Point
      values (e.g. 15.12, 12.65)


=head2 ConvertWattToDBM

 $self->ConvertWattToDBM();

SUBROUTINE  : ConvertWattToDBM
DESCRIPTION : Opposite of ConvertDBMtoWatt

IN  : Power in Watts
OUT : Power in dBm


=head2 DeConfigTCC

 $self->DeConfigTCC();

SUBROUTINE  : DeConfigTCC
DESCRIPTION : Deconfiguration of TCC on TRXC:
              TRXC_Master & TRXC_Slave

IN  :
OUT : None


=head2 DecodeAttribute

 $self->DecodeAttribute();

SUBROUTINE  : DecodeAttribute
DESCRIPTION : To decode an attributed record in Capabilities Result

IN  : Attribute Recorded
OUT : None, Output will be written in the file


=head2 DecodeMCTRRecord

 $self->DecodeMCTRRecord();

SUBROUTINE  : DecodeMCTRRecord
DESCRIPTION :

IN  : %RefMCTRCaps
OUT :


=head2 DecodeTGRecord

 $self->DecodeTGRecord();

SUBROUTINE  : DecodeTGRecord
DESCRIPTION :

IN  : %RefMCTRCaps
OUT :


=head2 DefineCell

 $self->DefineCell();

SUBROUTINE  : DefineCell
DESCRIPTION : Create a new Cell with new values

IN  : DefineCell(CellData => \%CellData);
OUT : None


=head2 DisableAllTS

 $self->DisableAllTS();

SUBROUTINE  : DisableAllTS
DESCRIPTION : Disable all TS for a given TRX

IN  : Optionally the keys TRXC, ASOInst
OUT :


=head2 DisableConfigEnable

 $self->DisableConfigEnable();

SUBROUTINE  : GetMCTRSupportedARFCN
DESCRIPTION : Returns ARFCN which is supported by the MCTR
Frequency for the TX and ARFCN are converted as follws:

900P: freq_TX = 935+0,2*ARFCN
900E: freq_TX = 935+0,2*(ARFCN-1024)
1800: freq_TX = 1805,2+0,2*(ARFCN-512)
1900: freq_TX = 1930,2+0,2*(ARFCN-512)

IN  : SupportedBandwidth and FirstARFCN
OUT : valid ARFCN, which is different from the actual one


=head2 DisableMO

 $self->DisableMO();

SUBROUTINE  : DisableMO
DESCRIPTION : Sends DisableRequest to MO defined by MOClass,
              AssosiatedSOInstance, InstanceNo and checks DisableResult.

IN  : Optionally a reference to a Hash
      containing one or more of the following
      keys: TRXC, MO, MOState, ASOInst, ReasonCode, ResultCode
      ASOInst, INST
OUT : None


=head2 DisconnectConnectTG

 $self->DisconnectConnectTG();

SUBROUTINE  : DisconnectConnectTG
DESCRIPTION : Disconnects and Connects the current TG

IN  :     none
OUT :     none


=head2 DisconnectMO

 $self->DisconnectMO();

SUBROUTINE  : DisconnectMO
DESCRIPTION : Sends DisconnectCommand to MO defined by MOClass, InstanceNo
              and AssosiatedSOInstance and checks DisconnectComplete.

IN  : Optionally one or more of the following
      keys: TRXC, MO, INST, ASOInst
OUT : None


=head2 DisplayAntennaHoppingOnDVT

 $self->DisplayAntennaHoppingOnDVT();

SUBROUTINE  : DisplayAntennaHoppingOnDVT
DESCRIPTION :

IN  :
OUT : $HoppingState, 'On', 'Off' or 'On not C0'


=head2 EnableAllTS

 $self->EnableAllTS();

SUBROUTINE  : EnableAllTS
DESCRIPTION : Enable all TS For a given TRX

IN  : Optionally the key TRXC
OUT :


=head2 EnableMO

 $self->EnableMO();

SUBROUTINE  : EnableMO
DESCRIPTION : Sends EnableRequest to MO defined by MOClass,
              AssosiatedSOInstance, InstanceNo and checks EnableResult.

IN  : Optionally a reference to a Hash containing
      one or more of the following
      keys: TRXC, MO, MOState, ASOInst
OUT : None


=head2 EnableMOTXWhileConfigure

 $self->EnableMOTXWhileConfigure();

SUBROUTINE  : EnableMOTXWhileConfigure
DESCRIPTION : To send a TX_CONFIGURATION_REQUEST on abis and before all TXConfigResult
              frames are received send an ENABLE_REQUEST.

IN  : %Input ->BTS, TG, TRXC, S_Behaviour, MO, EP2_BEH, EP2_TXCNT, EP2_TIMER
OUT : %return (Hash reference);


=head2 EstablishLAPD

 $self->EstablishLAPD();

SUBROUTINE  : EstablishLAPD
DESCRIPTION : Establish LAPD (L2) link

IN  : Optionally one or more of the following
      keys: TRXC, MO, LinkType
OUT :


=head2 EstablishResetStart

 $self->EstablishResetStart();

SUBROUTINE  : EstablishResetStart
DESCRIPTION : EstablishResetStart

IN  : None
OUT : None


=head2 FeatureControl

 $self->FeatureControl();

SUBROUTINE  : FeatureControl
DESCRIPTION : FeatureControl

IN  : $FeatureState
OUT : None


=head2 FetchAttribute

 $self->FetchAttribute();

SUBROUTINE  : FetchAttribute
DESCRIPTION : Pick up one Attribute (Id, Length and Info) from the %Resp buffer

IN  : %Resp (global)
OUT : @Att (Attribute buffer)


=head2 FindOctetsInLogFrame

 $self->FindOctetsInLogFrame();

SUBROUTINE  : FindOctetsInLogFrame
DESCRIPTION : Finds pattern matches in log frames

IN  : %InputHash = (
        Expected      => undef,
        ExpectedPos   => undef,
        Optional      => undef,
        OptionalPos   => undef,
        Message       => undef,
                    );
OUT : %Hash with results


=head2 FindPowerMinMaxValue

 $self->FindPowerMinMaxValue();

SUBROUTINE  : FindPowerMinMaxValue
DESCRIPTION : Returns scalars with  min,max Power of TX

IN  : @Attribute (Attribute Item List)
OUT : $PowerMn, $PowerMx


=head2 FormatTestcaseName

 $self->FormatTestcaseName();

SUBROUTINE  : FormatTestcaseName
DESCRIPTION : Reformats the PAR hash test case name for printout purposes.
              If the input string is not on the format 'XX_YY', it is returned unchanged.

IN  : TestcaseName => 'xx_yy'
OUT : 'xx.yy'


=head2 FoundHwType

 $self->FoundHwType();

FUNTION : FoundHwType
COMMENT : Fetch certain HwType from HWData

IN    : %HWData (return from GetHWInfoResult)
OUT    : CDUType


=head2 GetARFCNvalid

 my (, ) = $self->GetARFCNvalid();

SUBROUTINE  : GetARFCNvalid
DESCRIPTION : Returns ARFCN which is different from the actual used one
              (Format: high part, low part)

IN  :
OUT : valid ARFCN, which is different from the actual one


=head2 GetActiveCell

 $self->GetActiveCell();

SUBROUTINE  : GetActiveCell
DESCRIPTION : Return the Cell containing input TRXC

IN  :     TRXC => $TRXC
OUT :     Cell number


=head2 GetAttributes

 $self->GetAttributes();

SUBROUTINE  : GetAttributes
DESCRIPTION : Returns supported attributes

IN  :     TG=>$TG, MO=>$MO
OUT :     List of attributes, @Att


=head2 GetAvailableTFSyncSources

 $self->GetAvailableTFSyncSources();

SUBROUTINE  : GetAvailableTFSyncSources
DESCRIPTION : Sends a capabilities request and looks at what sync sources
              are returned in the response. See document 208/155 19-HSC 103 12/18

IN  : TGNr, TRXC
OUT : Hash containing the possible TF sync sources: PCM, ICEC, ICIC


=head2 GetCapabilities

 $self->GetCapabilities();

SUBROUTINE  : GetCapabilities
DESCRIPTION :

IN  : MO
OUT : @CapabilitiesSummary


=head2 GetDateTimeForFileName

 $self->GetDateTimeForFileName();

SUBROUTINE  : GetDateTimeForFileName
DESCRIPTION : Formats date and time

IN  : None
OUT : Formatted string with date and time YYYYMMDD_HHMMSS


=head2 GetFreqSpec

 $self->GetFreqSpec();

SUBROUTINE  : GetFreqSpec
DESCRIPTION : Returns Array containing 'Frequency Specifier RX/TX' as coded in
              Abis O&M IWD 8.3.53. FLorg is ARFCN divited to high part, two bit and low part

IN  : $Mrk, $XXaddr, $Arfcn
OUT : @FreqSpec


=head2 GetFrequencyBandwidthCapability

 $self->GetFrequencyBandwidthCapability();

SUBROUTINE  : GetFrequencyBandwidthCapability
DESCRIPTION : Sends a capabilities request and picks out the frequency bandwidth limit in MCTR

IN  : TGNr, TRXC, MCTR instance number
OUT : Supported Frequency Bandwidth in number of 100 kHz


=head2 GetLEDStatus

 $self->GetLEDStatus();

SUBROUTINE  : GetLEDStatus
DESCRIPTION : Returns the LED status for Operational LED or
              maintinance LED. Note that this only works for the first TRXC
              in the RU.

IN  :         $TRXC
              $LED:        Local or Operational
OUT :         $LEDStatus:  LocalMode:   ON/FLASH/OFF
                           Operational: ON/FLASH/OFF


=head2 GetLast

 $self->GetLast();

SUBROUTINE  : GetLast
DESCRIPTION : Returns last value of a list
             (incl. removal of last character !)

IN  : @List - as variable name says
OUT : $_ - scalar containing last value of @List


=head2 GetMCTRInstances

 $self->GetMCTRInstances();

SUBROUTINE  : GetMCTRInstances
DESCRIPTION : Sends a capabilities request on CF and determines what MCTRs are available

IN  : TGNr, TRXC
OUT : Available MCTRs in an array reference


=head2 GetMCTRRecords

 $self->GetMCTRRecords();

SUBROUTINE  : GetMCTRRecords
DESCRIPTION : Returns MCTRRecords from Capabilities in CF

IN  : -
OUT : @MCTRRecords


=head2 GetMCTRSupportedARFCN

 $self->GetMCTRSupportedARFCN();

SUBROUTINE  : GetMCTRSupportedARFCN
DESCRIPTION : Returns ARFCN which is supported by the MCTR
Frequency for the TX and ARFCN are converted as follws:

900P: freq_TX = 935+0,2*ARFCN
900E: freq_TX = 935+0,2*(ARFCN-1024)
1800: freq_TX = 1805,2+0,2*(ARFCN-512)
1900: freq_TX = 1930,2+0,2*(ARFCN-512)

IN  : SupportedBandwidth and FirstARFCN
OUT : valid ARFCN, which is different from the actual one


=head2 GetMOStatus

 $self->GetMOStatus();

SUBROUTINE  : GetMOStatus
DESCRIPTION :

IN  : Optionally one or more of the following
      keys: TRXC, MO, INST, TFMode, MOState
OUT : None


=head2 GetPlatform

 $self->GetPlatform();

SUBROUTINE  : GetPlatform
DESCRIPTION : To fetch platform type from RBS using HWInfoReq

IN  :     TG=>$TG
OUT :     none


=head2 GetRecordOnTRXC

 $self->GetRecordOnTRXC();

SUBROUTINE  : GetRecordOnTRXC
DESCRIPTION :

IN  :
OUT :


=head2 GetSlaveMasterPair

 $self->GetSlaveMasterPair();

SUBROUTINE  : GetSlaveMasterPair
DESCRIPTION : Look for Slave TRX if given a Master TRX

IN  :
OUT :


=head2 GetStartcause

 $self->GetStartcause();

SUBROUTINE  : GetStartcause
DESCRIPTION : Returns scalar containing 'POWER_ON', 'ORDERED_RESET', or
              else the string returned by the spontaneous message.

IN  :
OUT : $message


=head2 GetTRXCInstances

 $self->GetTRXCInstances();

SUBROUTINE  : GetTRXCInstances
DESCRIPTION : Gets the TRXC instances from an octet

IN  : Octet (scalar)
OUT : Array reference with TRXC instances


=head2 GetTSFreqList

 $self->GetTSFreqList();

SUBROUTINE  : GetTSFreqList
DESCRIPTION : Returns Array containing 'FrequencyList' as configured in certain TS

IN  : $TRXC => $TRXC, AssociatedSOInstance => $ASOInst, InstanceNo => 3
OUT : $FreqList


=head2 HWInfoReqBTS

 $self->HWInfoReqBTS();

SUBROUTINE  : HWInfoReqBTS
DESCRIPTION : To get HWInformationResponces

IN  : %Input ->TG, TRXC, MO
OUT : %return (Hash reference);


=head2 HWInfoReqNakBTS

 $self->HWInfoReqNakBTS();

SUBROUTINE  : HWInfoReqNakBTS
DESCRIPTION : To send an HWInfoReq with flag to bsc to send an nak instead of
              ack and to verify that no results comes after.

IN  : %Input ->TG, TRXC, MO
OUT : %return (Hash reference);


=head2 HardwareReset

 $self->HardwareReset();

SUBROUTINE  : HardwareReset
DESCRIPTION : Syntax: Send HardwareReset Command via DVT and expect Fault Report (if any)

IN  : Unit, FaultMask, Status
OUT : 0|1


=head2 InfoCellBTS

 $self->InfoCellBTS();

SUBROUTINE  : InfoCellBTS
DESCRIPTION : To get cell information about active cell

IN  : Cell => 0
OUT :


=head2 InfoTGBTS

 $self->InfoTGBTS();

SUBROUTINE  : InfoTGBTS
DESCRIPTION : To get tg information about active tg

IN  : None
OUT :


=head2 MakeBin

 $self->MakeBin();

SUBROUTINE  : MakeBin
DESCRIPTION : To convert an 8 bit integer to a binary string

IN  : Integer
OUT : Binary as string


=head2 ModifyFreqList

 $self->ModifyFreqList();

SUBROUTINE  : ModifyFreqList
DESCRIPTION : Returns Array containing 'FrequencyList' with a modification

IN  : $FreqList , $Modif, $LowestFreq, $HigthestF
OUT : $NewList


=head2 MonitorTrxcMctrTablesOnDVT

 $self->MonitorTrxcMctrTablesOnDVT();

SUBROUTINE  : MonitorTrxcMctrTablesOnDVT
DESCRIPTION :

IN  :
OUT : $HoppingState, 'On', 'Off' or 'On not C0'


=head2 PowerBackOffControl

 $self->PowerBackOffControl();

SUBROUTINE  : PowerBackOffControl
DESCRIPTION : Sends PowerBackOffControl

IN  : Optionally one or more of the following
      keys: TRXC, MO, MOState, INST, ASOInst
OUT : None


=head2 PrepareOcts

 $self->PrepareOcts();

Subroutine: PrepareOcts
Purpose:   Prepare Oct1 and 2 in MCTRConfig (with 1 trxc from TRXlist)
Input:     References to MCTRInstance
Output:    \@Octs

=head2 ReadPCMType

 $self->ReadPCMType();

SUBROUTINE  : ReadPCMType
DESCRIPTION : Reads the PCM type

IN  : PCMLine  (PCM_A, PCM_B, PCM_C or PCM_D)
OUT : PCMType


=head2 ReceiveAbiscoMsg

 $self->ReceiveAbiscoMsg();

SUBROUTINE  : ReceiveAbiscoMsg
DESCRIPTION : Syntax: Expect {Message}

IN  :
OUT :


=head2 ReceiveMessage

 $self->ReceiveMessage();

SUBROUTINE  : ReceiveMessage
DESCRIPTION : Receiving Abisco messages

IN  : Expect (message wanted)
      Server (server for expected message)
      CauseValue (Only applicable for ConnectionFailureIndication)
      Fault (Only applicable for FaultReport)
      ChType (Bm/Bm_1)
      Timeout [s]
OUT : 'Found'         - if expected message found
      [Error Cause]   - if message not found


=head2 ReleaseLAPD

 $self->ReleaseLAPD();

SUBROUTINE  : ReleaseLAPD
DESCRIPTION : ReleaseLAPD (L2) link
              Syntax : ReleaseLAPD(TRXC => $TRXC, MO => $MO, LinkType => $inkType);

IN  : Optionally one or more of the following keys:
      MO, TRXC, LinkType
OUT :


=head2 ResetMO

 $self->ResetMO();

SUBROUTINE  : ResetMO
DESCRIPTION : Sends ResetCommand to MO defined by MOClass,
              AssosiatedSOInstance, InstanceNo and checks ResetComplete.

IN  : Optionally one or more of the following
      keys: TRXC, MO, MOState, INST, ASOInst, BACKCOMP
OUT : None


=head2 ResetMOAndExpectAlarm

 $self->ResetMOAndExpectAlarm();

SUBROUTINE  : ResetMOAndExpectAlarm
DESCRIPTION : Sends ResetCommand to MO defined by MOClass,
              AssosiatedSOInstance, InstanceNo and checks ResetComplete.

IN  : Optionally one or more of the following
      keys: TRXC, MO, MOState, INST, ASOInst, BACKCOMP
OUT : None


=head2 ResetTG

 $self->ResetTG();

SUBROUTINE  : ResetTG
DESCRIPTION : Resets the TG to the one stored in Stored TG
IN  :    Cell, TG, MCTR
OUT :    Will die if errors found


=head2 RestoreTG

 $self->RestoreTG();

SUBROUTINE  : RestoreTG
DESCRIPTION : Restores TG, Cells and MCTR configuration

IN  :
OUT :


=head2 SaveCapabilitiesInFile

 $self->SaveCapabilitiesInFile();

SUBROUTINE  : SaveCapabilitiesInFile
DESCRIPTION : To save capabilities in a file.
              Loop through @CapabilitiesSummary and save to a file

IN  : @CapabilitiesSummary
OUT :


=head2 SelectARFCN

 $self->SelectARFCN();

SUBROUTINE  : SelectARFCN
DESCRIPTION : Select a random ARFCN out of the given Band

IN  : $Band (e.g. GSM900P), Reference to list of not allowed ARFCNs,
      Number of ARFCNs to be calculated
OUT : @Arfcn


=head2 SendDVTCommand

 $self->SendDVTCommand();

SUBROUTINE  : SendDVTCommand
DESCRIPTION : Syntax: Expect {Message}

IN  :
OUT :


=head2 SendData

 $self->SendData();

SUBROUTINE  : SendData
DESCRIPTION : see Abisco IWD: BITSTREAM.SendData, asserting against
              connectreject and resultcode=protocolerror

IN  :     TG=>$TG, TRXC=>$TRXC, Data=> \%Data
OUT :     %Resp response hash


=head2 SendOperationalInfo

 $self->SendOperationalInfo();

SUBROUTINE  : SendOperationalInfo
DESCRIPTION : Send Operational Info

IN  : None
OUT :


=head2 SendStatusRequest

 $self->SendStatusRequest();

SUBROUTINE  : SendStatusRequest
DESCRIPTION : Sends the message on ABIS.

              Example  : SendStatusRequest(_MO => 'CF');
                         SendStatusRequest(_MO => 'TRXC', _TRXC => 5);

IN  : $TRXC ->
      $MO   ->
      $Inst ->
OUT : Updates $TG->{LinkStatusError}


=head2 SetMCTRReporting

 $self->SetMCTRReporting();

SUBROUTINE  : SetMCTRReporting
DESCRIPTION : Enabled or Disabled MCTR Reporting

IN  :  On || Off
OUT :


=head2 SetRightBI_Q1

 $self->SetRightBI_Q1();

SUBROUTINE  : SetRightBI_Q1
DESCRIPTION : Sets the right value for BI_Q1 according to PCM type

IN  : None
OUT : $BI_Q1


=head2 SetTG

 $self->SetTG();

SUBROUTINE  : SetTG
DESCRIPTION : To set TCM configuration. Disconnects, updates and reconnects TG.
              May Restart BTS if AbisMode or TLS settings is changed

IN  : TCH_Configuration
OUT : None


=head2 SetWrongBI_Q1

 $self->SetWrongBI_Q1();

SUBROUTINE  : SetWrongBI_Q1
DESCRIPTION : Sets the opposite value for BI_Q1 according to PCM type

IN  : None
OUT : $BI_Q1


=head2 SplitLargeIntIntoByteArrayInIntFormat

 $self->SplitLargeIntIntoByteArrayInIntFormat();

SUBROUTINE  : SplitLargeIntIntoByteArrayInIntFormat
DESCRIPTION : The IWD specifies sending values split in octets.
              This sub will take your integer and splice it into
              an array of uint8 values.

IN  :     LargeInt => Integer, Size => return Array Size
OUT :     @OctectArray


=head2 SplitString

 $self->SplitString();

SUBROUTINE  : SplitString
DESCRIPTION : Returns a list with splitted string (Delimiter: Whitespace)

IN  : $String - as variable name says
OUT : @String - list with splitted string


=head2 StartConfigEnable

 $self->StartConfigEnable();

SUBROUTINE  : StartConfigEnable
DESCRIPTION : Sends StartRequest to MO defined by MOClass,
              AssosiatedSOInstance, InstanceNo and checks StartResult.
              Calling support function DisableConfigEnable.

IN  : Optionally one or more of the following
      keys: TRXC, MO, MOState, INST, ASOInst
OUT : None


=head2 StartMO

 $self->StartMO();

SUBROUTINE  : StartMO
DESCRIPTION : Sends StartRequest to MO defined by MOClass,
              AssosiatedSOInstance, InstanceNo and checks StartResult.

IN  : Optionally one or more of the following
      keys: TRXC, MO, INST, ASOInst
OUT :


=head2 StoreTG

 $self->StoreTG();

SUBROUTINE  : StoreTG
DESCRIPTION : Store TG parameters. This subroutin shall be followed by ResetTG
IN  : None or {Cell}, {TG}, {MCTR};
OUT : %BackupTG => { TG    => { ... },
                     Cells => { FirstInsance   => { ... },
                                SecondInstance => { ... },
                                ... },
                     MCTRs => { FirstInsance   => { ... },
                                SecondInstance => { ... },
                                ... },
                    }


=head2 TSConfig

 $self->TSConfig();

SUBROUTINE  : TSConfig
DESCRIPTION : Reconfigure TS
              Syntax   : TSConfig(TS => $TS);

IN  :
OUT : %Resp


=head2 ValidateCurrentFreqList

 $self->ValidateCurrentFreqList();

SUBROUTINE  : ValidateCurrentFreqList
DESCRIPTION : Returns 1 or 0

IN  : @FreqList
OUT : ($L,$H) || (0,0) (nok)



=cut

=head1 NAME

subs_handover


=head1 DESCRIPTION

Document number: 116/190 55-CAH 161 1607/1 Uen
MODULE      : subs_handover.pm
DESCRIPTION : This package contains the subfunctions and variables used
              with the main test case

COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE          NAME              REVIEW        COMMENT
PA1   20091113      SAB/frli          SAB/mawi      new file created.
PA2   20100608      SAB/frli          SAB/mawi      Added measurement reporting
PA3   20100608      SAB/frli          SAB/mawi      Added RestartBTS and CheckBCCHType
                                                    Made sendHandoverAccess dynamic to channeltype
A     20100913      EANJOAC           UABTOH        Approved
PB1   20121207      XSALNIC           XMAREDV       Solved TR HQ66608, Implemented active TG


=head1 REQUIRES

L<subinit_handover> 

L<dbLog> 

L<Hash::Util> 

L<mssim_sub> 

L<mssim> 

L<mssim_def> 

L<PerlFunc> 

L<AbiscoFunc2> 

L<English> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 ChActBTS

 ChActBTS();

SUBROUTINE  :  ChActBTS
DESCRIPTION :  To activate a channel in the BTS, uses par hash variables
IN  :          BTS         => $BTS,
               ChAct       => $parChAct,
               TG          => $parTG,
               TRXC        => $parTRXC,
               TS          => $parTS,
               ChType      => $parChType,
               ActType     => $parActType,
               Rbit        => 'Activate',
               DTXUplink   => 'Off',
               DTXDownlink => 'Off',
               TypeOfCh    => $parTypeOfCh,
               ChannelRate => $parChRate,
               AlgOrRate   => $parAlgOrRate
OUT :          None


=head2 ChActMSSIM

 ChActMSSIM();

SUBROUTINE  :  ChActMSSIM
DESCRIPTION :  To activate a channel in the MSSIM, sets the CcId package variable
IN  :          Bypass      => 0,
               RxAcchOn    => 1,
               AllSacchSI  => 0,
               RToutOff    => 0,
               RxTrfcOn    => 0,
               UndecFrm    => 0,
               TrxNum      => 0,
               L2hdr       => 2,
               Data        => [@Meas],
               TG          => $parTG,
               TRXC        => $parTRXC,
               TS          => $parTS,
               PDCHMode    => "",
               ChannelType => $parChType,
               ChRate      => $parChRate,
               TypeOfCh    => $parTypeOfCh,
               AlgOrRate   => $parAlgOrRate,
               AMRCodec    => $parAMRCodec
               Cell        => $eCell
OUT :          $CcId


=head2 ChCleanBTS

 ChCleanBTS();

SUBROUTINE  :  ChCleanBTS
DESCRIPTION :  To release all radio traffic channels or control channels in the BTS
                without asserting the responses
IN  :          BTS => $BTS,
               TG   => $parTG,
               TRXC => $parTRXC
OUT :          None


=head2 ChRelBTS

 ChRelBTS();

SUBROUTINE  :  ChRelBTS
DESCRIPTION :  To release radio traffic channels or control channels in the BTS
IN  :          BTS   => $BTS,
               TG    => $parTG,
               TRXC  => $parTRXC,
OUT :          None


=head2 ChRelMSSIM

 ChRelMSSIM();

SUBROUTINE  :  ChRelMSSIM
DESCRIPTION :  To release a channel in the MSSIM, uses the package variable CcId to
                identify the opened channel
IN:            CcId    => $gCcId,
OUT:           None


=head2 CheckBCCHTypeBTS

 CheckBCCHTypeBTS();

SUBROUTINE  :  CheckBCCHTypeBTS
DESCRIPTION :  To verify and set correct BCCHType(from par-hash) for active sub test case,
                makes a restart of BTS if to save changes.
IN  :          BTS (Abisco connection parameter)
               TGId
               CellNumber
               BCCHType
OUT :          None


=head2 GetActiveCell

 GetActiveCell();

SUBROUTINE  : GetActiveCell
DESCRIPTION : Return the Cell containing input TRXC

IN  :         TRXC => $TRXC
OUT :         Cell number


=head2 LAPDmSend

 LAPDmSend();

SUBROUTINE  :  LAPDmSend
DESCRIPTION :  To send a LAPDm frame
IN  :          $Chan      (SDCCH, SACCH or FACCH)
               $MsPower  (Only applicable for SACCH)
               $TA        (Timing advance, only applicable for SACCH)
               $Cmd       (Command = "I", "RR", RNR", "REJ", "SABM", "DM", "UI", "DISC" or "UA"
               N(R)       (Receive Sequence Number)
               N(S)      (Send Sequence Number)
               P/F       (Poll/Final bit)
               SAPI      (Service Access Point)
               C/R        (Command/Response)
               M          (More bit)
               EL        (Length Extension bit)
               EA        (Address Extension Bit)
               refData      (Information Field)
               CcId      => $gCcId
OUT :          None


=head2 MeasurementReporting

 MeasurementReporting();

SUBROUTINE  :  MeasurementReporting
DESCRIPTION :  Turns on Measurement Reporting
IN:            Hash containing the following key(s):
               State true/false (1/0)
OUT:           None


=head2 ReceiveAbiscoMessage

 ReceiveAbiscoMessage();

SUBROUTINE  :  ReceiveAbiscoMessage
DESCRIPTION :  To receive a spontanious message from Abisco
IN:            BTS (Abisco connection parameter)
               Timeout    => undef,
               Expect    => undef,
               Supress    => "SupressError",
OUT:           Received Data hash


=head2 ReceiveMSSIMData

 ReceiveMSSIMData();

SUBROUTINE  :  ReceiveMSSIMData
DESCRIPTION :  To receive a spontanious message from MSSIM and return the Resp->Data array
IN  :          Timeout
               ExpMsg
OUT :          An array from RESP->Data


=head2 RestartBTS

 RestartBTS();

SUBROUTINE  :	 RestartBTS
DESCRIPTION :  Restarting the BTS, make sure that the parameters set during restart
						    complies with your specific TC
IN:	  	       BTS (Abisco connection parameter)
               TGId
               TRXList (array)
               TypeOfStart
OUT:           None


=head2 SendHandoverAccess

 SendHandoverAccess();

SUBROUTINE  : SendHandoverAccess
DESCRIPTION : Send a handover acesss
IN:           None
OUT:          None



=cut

=head1 NAME

subs_lapdm


=head1 DESCRIPTION

Document number : 108/190 55-CAH 161 1607/1 Uen
MODULE          : subs_lapdm.pm
DESCRIPTION     : This program specifies tests for LAPDm conformance testing

COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE      NAME              REVIEW              COMMENT
A     20100928  Syntronic AB/     Syntronic AB/       File created. Approved UABTOH.
                Torbjörn Wilund   Martin Wikström

B     20110505  XMABENT           XDAVMEL             Updated SendModifiedLAPDm to solve TR HN11484
                                                      General cleanup and fixes due to warnings received when running
C     20111228  XMABENT           XDAVMEL             Added SendDataReq
                                                      Modified CheckReceivedLAPDm so that all data is checked
                XTOBSEM           XGUSTPE             Added Perlcritic
                                  XNAVNAS             Imported $TG, $TRXC and $TRXList from subinit to be used as default values. HO94918
D     20121214  XANSBEM           XSOFFRO             Added StoreTG, ResetTG and SwitchChComb. Removed CheckAbiscoConfig.
                                                      Updated CheckReceivedLAPDm, ChRelBTS, EstReqAbisco and ReleaseRequestAbisco
                                                      Updated StoreTG and ResetTG to support several Cells, Updated SwitchChComb to support
                                                       AbisMode SC
PE1   20130522  XPATHIL           XAMMELY             Changed SendMultiPurposeReq and ChActMSSIM to comply with old and new usage.


=head1 REQUIRES

L<mssim_def> 

L<mssim_sub> 

L<mssim> 

L<Hash::Util> 

L<subinit_lapdm> 

L<dbLog> 

L<PerlFunc> 

L<Carp> 

L<English> 

L<AbiscoFunc2> 

L<Abisco_Connection> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 ChActBTS

 ChActBTS();

Subroutine: ChActBTS
Purpose:    To activate a channel in the BTS, uses par hash variables
Input:      $BTS (Abisco connection parameter)
            $ChAct
            $TG,
            $TRXC,
            $TS,
            $ChType,
            $ActType,
            $TypeOfCh,
            $ChRate,
            $AlgOrRate,
            $BSPower (Pn)
            $ExpectedMsg
            $ExpectedErrCode
Output:     None


=head2 ChActMSSIM

 ChActMSSIM();

Subroutine: ChActMSSIM
Purpose:    To activate a channel in the MSSIM
Input:      Bypass        - (set to '1' to bypass MSSIM automatic LAPDm handling)
            RecFillFrames - (set to 1 to activate reception of LAPDm fill frames)
            TG            - Transceiver Group
            TRXC          - Transceiver Controller
            TS            - Time Slot
            ChType        - Channel Type
            ChRate        - Channel Rate
            TypeOfCh      - Type of Channel
            AlgOrRate     - Communcation speed
            Timeout       - Timeout
            Ref           - Reference
            MsId          - Mobile Station Identifier
Output:     $CcId


=head2 ChRelBTS

 ChRelBTS();

Subroutine: ChRelBTS
Purpose:    To release radio traffic channels or control channels in the BTS
Input:      $BTS (Abisco connection parameter)
            $TG,
            $TRXC,
            $TS,
            $ChType
Output:     None


=head2 ChRelMSSIM

 ChRelMSSIM();

Subroutine: ChRelMSSIM
Purpose:    To release a channel in the MSSIM
Input:      None
Output:     None


=head2 CheckL3Data

 CheckL3Data();

Subroutine:  CheckL3Data
Purpose:    To compare received L3Data to expected L3Data
Input:      Expected L3Data
             Received L3Data
Output:     Returns 1 if data differs, else 0


=head2 CheckReceivedLAPDm

 CheckReceivedLAPDm();

Subroutine: CheckReceivedLAPDm
Purpose:    Check data in frames Received on LAPDm
Input:      RX - Received Parameter Hash reference
            EXP - Expected Parameter Hash reference
Output:     None


=head2 EmptyBufferMSSIM

 EmptyBufferMSSIM();

Subroutine: EmptyBufferMSSIM
Purpose:    To empty the receive buffer of the MMSIM.
            (Copied from subs_broadcast.pm.)
Input:      $NumOfMsgs            Number of messages to read.
            $AbortIfTimeout       If defined (!= undef), regardless of value, returns if a timeout is detected
Output:     None


=head2 EmptyMMSIMBuffer

 EmptyMMSIMBuffer();

Subroutine: EmptyMMSIMBuffer
Purpose:    To empty the receive buffer of the MMSIM.
Input:      $Timeout     Timeout
       $NumOfMsgs  Number of messages to read.
Output:     None


=head2 EstReqAbisco

 EstReqAbisco();

Subroutine: EstReqAbisco
Purpose:    To send Establish Request from Abisco and receive
             the expected response from BTS on SAPI3
Input:      BTS - Abisco connection handler
Output:     None


=head2 EstablishRequestMSSIM

 EstablishRequestMSSIM();

Subroutine: EstablishRequestMSSIM
Purpose:    Establish link between MSSIM and BTS
Input:      $BTS
            $SAPI
Output:     None


=head2 GetTSCparameters

 GetTSCparameters();

Subroutine: GetTSCparameters
Purpose:    To get the appropriate TSC_SET and TSC depending
            of wanted ChType when using VAMOS
            TSC on MSSIM is a combination of TSC_SET and TSC
Call:       %Resp = GetTSCparameters(ChType => $ChType);
Input:      ChType
            Valid parameters: Bm
                              Bm_1
                              Lm/0
                              Lm/1
                              Lm/0_1
                              Lm/1_1
Output:     Hash containing TSC_SET
                            TSC
                            MixingOrder
                            MSCapability
                            MSSIM_TSC


=head2 QueueDLMsg

 QueueDLMsg();

Subroutine: QueueDLMsg
Purpose:    Queues a DL message in BSSTE
Input:      BTS - Abisco connection handler
            EP1_TIMER - Delay time at queing
             SAPI - Sapi value (0 or 39)
             @Data - Reference for data array
Output:     None


=head2 RadioChReleaseCommand

 RadioChReleaseCommand();

Subroutine: RadioChReleaseCommand
Purpose:    Cleans all radiochannels connected to TG
Input:      TG
            TRXC
Output:     TC result value


=head2 ReceiveAbisco

 ReceiveAbisco();

Subroutine: ReceiveAbisco
Purpose:    To receive a spontanious message from Abisco
Input:      BTS - abisco connection handler
            Timeout - timeout value
            Expect - Expected message
            Supress - "SupressError" if HandleError should not be called
            L3Data - pointer to L3Data array Sof expected message
Output:     CauseValue


=head2 ReceiveAbiscoData

 ReceiveAbiscoData();

Subroutine: ReceiveAbiscoData
Purpose:    To receive a spontanious message from Abisco
Input:      Timeout value
             Expected message
             Supress, "SupressError" if HandleError should not be called
             L3Data of expected message
Output:     Data


=head2 ReceiveErrInd

 ReceiveErrInd();

Subroutine: ReceiveErrInd
Purpose:    To receive an Error Indication in Abisco with a specific cause value
Input:      $BTS
             $Timeout
             $CauseValue
Output:     None


=head2 ReceiveErrorIndication

 ReceiveErrorIndication();

Subroutine: ReceiveErrorIndication
Purpose:    Receive error indication on abis
Input:      $BTS
             $Expect:
             $Supress
             $L3Data
Output:     None


=head2 ReceiveErrorReport

 ReceiveErrorReport();

Subroutine: ReceiveErrorReport
Purpose:    To receive an Error Report in Abisco with a specific cause value
Input:      $BTS
             $Timeout
             $CauseValue
Output:     None


=head2 ReceiveLAPDm

 ReceiveLAPDm();

Subroutine: ReceiveLAPDm
Purpose:    To receive a LAPDm frame
Input:      $T200      (T200 timer in seconds)
            $Chan      (SDCCH, SACCH or FACCH)
Output:     $Resp      (Response = 'Timeout', 'I', 'RR', RNR", 'REJ', 'SABM', 'DM', 'UI', 'DISC' or 'UA'
             N(R)      (Receive Sequence Number)
             N(S)      (Send Sequence Number)
             P/F       (Poll/Final bit)
             LPD       (Link Protocol discriminator)
             sapi      (Service Access Point)
             C/R       (Command/Response)
             EA        (Address Extension Bit)
             L         (Length of Information field)
             M         (More bit)
             EL        (Length Extension bit)
             Fn}       (Frame Number)
             Data      (Information Field)


=head2 ReceiveSABM

 ReceiveSABM();

Subroutine: ReceiveSABM
Purpose:    To receive a SABM from BTS and send UA to BTS (SAPI3)
Input:      Trigger parameter to send UA to BTS (if 1 -> send UA)
Output:     1 if UA is sent, else 0


=head2 ReleaseRequestAbisco

 ReleaseRequestAbisco();

Subroutine: ReleaseRequestAbisco
Purpose:    Establish link between MSSIM and BTS
Input:      $BTS
             $SAPI: 0 or 3
             $ReleaseMode: 'Normal' or 'LocalEnd'
             $Expected: Expected responce on Abis
Output:     None


=head2 ResetTG

 ResetTG();

SUBROUTINE  : ResetTG
DESCRIPTION : Resets the TG to the one stored in Stored TG
              (copied from subs_Broadcast)

IN  :     Cell, TG, MCTR
OUT :     Will die if errors found
Sample:   ResetTG(%StoredTG);


=head2 RestartBTS

 RestartBTS();

Subroutine: RestartBTS
Purpose:    Restarting the BTS, make sure that the parameters set during restart
            complies with your specific TC
Input:      BTS (Abisco connection parameter)
            TGId
            TRXList (array)
            TypeOfStart
Output:


=head2 SendDLRelReq

 SendDLRelReq();

Subroutine: SendDLRelReq
Purpose:    To send a ReleaseRequest from Abisco (SAPI3)
             and receive a ReleaseConfirm from BTS
Input:      SAPI
             Mode ("Normal" or "LocalEnd")
Output:     None


=head2 SendDataReq

 SendDataReq();

Subroutine: SendDataReq
Purpose:    To send a downlink message.
Comment:    Same as SendMultiPurposeReq but without waiting for Ack
Input:      BTS - Absico connection handler
            SAPI - Sapi number (0 or 3)
             L3Data - Pointer to L3Data message array
Output:     None


=head2 SendEstReqSAPI2Abisco

 SendEstReqSAPI2Abisco();

Subroutine: SendEstReqSAPI2Abisco
Purpose:    To send Establish Request from Abisco with SAPI 2 (error case) and verify
             that the response message is TIMEOUT_EP1.
Input:      BTS
Output:     None


=head2 SendLAPDm

 SendLAPDm();

Subroutine:  SendLAPDm
Purpose:    To send a LAPDm frame
Input:       $Chan      (SDCCH, SACCH or FACCH)
             $MsPower  (Only applicable for SACCH)
             $TA        (Timing advance, only applicable for SACCH)
            $Cmd       (Command = 'I', 'RR', RNR", 'REJ', 'SABM', 'DM', 'UI', 'DISC' or 'UA'
             N(R)       (Receive Sequence Number)
             N(S)      (Send Sequence Number)
             P/F       (Poll/Final bit)
             SAPI      (Service Access Point)
             C/R        (Command/Response)
             M          (More bit)
             EL        (Length Extension bit)
             EA        (Address Extension Bit)
             Data      (Information Field)
Output:     None


=head2 SendModeModify

 SendModeModify();

Subroutine: SendModeModify
Purpose:    To send a Mode Modify message from Abisco and receive a ModeModifyAck from BTS
Input:  BTS     AbiscoConnection parameter
   TypeOfCh   The TypeOfCh parameter of ChannelModeStruct argument to the ModeModify message
   ChannelRate The ChannelRate parameter of ChannelModeStruct argument to the ModeModify message
   AlgOrRate   The AlgOrRate parameter of ChannelModeStruct argument to the ModeModify message
Output:     None


=head2 SendModifiedLAPDm

 SendModifiedLAPDm();

Subroutine: SendModifiedLAPDm
Purpose:    To send a LAPDm frame with invalid length field or modified control field. Can not send data.
Input:      $Chan          (SDCCH, SACCH or FACCH)
             $MsPower      (Only applicable for SACCH)
             $TA            (Timing advance, only applicable for SACCH)
            $Cmd           (Command = 'I', 'RR', RNR", 'REJ', 'SABM', 'DM', 'UI', 'DISC' or 'UA'
             N(R)           (Receive Sequence Number)
             N(S)          (Send Sequence Number)
             P/F           (Poll/Final bit)
             SAPI          (Service Access Point)
             C/R            (Command/Response)
             M              (More bit)
             EL            (Length Extension bit)
             EA            (Address Extension Bit)
             $Length        (Length Indicator)
             ControlField  (Control Field)
Output:     None


=head2 SendMultiPurposeReq

 SendMultiPurposeReq();

Subroutine: SendMultiPurposeReq
Purpose:    To send a downlink message.
Input:      BTS - Absico connection handler
            SAPI - Sapi number (0 or 3)
             L3Data - Pointer to L3Data message array
Output:     None


=head2 StoreTG

 StoreTG();

SUBROUTINE  : StoreTG
DESCRIPTION : Store TG parameters. This subroutin shall be followed by ResetTG
              (copied from subs_Broadcast)

IN  :
OUT :     {Cells}, {TG}, {MCTR};
Sample:   %StoredTG = StoreTG();


=head2 SwitchChComb

 SwitchChComb();

Subroutine: SetChComb
Purpose:    Set Channel Combination
Input:      ChComb - Channnel Combination (Valid values are tch, iv, v, vi and vii)
Output:     None


=head2 UpdateCellBTS

 UpdateCellBTS();

Subroutine: UpdateCellBTS
Purpose:    Update information in choosen BTS Cell
Input:      %Input ->BTS, TG, CellNumber, BCCHType, BS_AG_BLKS_RES, BS_PA_MFRMS
            CBCHIndicator
Output:     None
Added:      100217 SABMARG
Update:


=head2 resetMSSIM

 resetMSSIM();

Subroutine: resetMSSIM
Purpose: Resets MSSIM
Input: None
Output: None



=cut

=head1 NAME

subs_link


=head1 DESCRIPTION

Document number: 150/190 55-CAH 161 1607/1 Uen
MODULE      : subs_link.pm
DESCRIPTION : Contains subroutines that will be used in TRS-3 tests, such as Mobile Call Setup.

COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE        NAME              REVIEW          COMMENT
A   20101005  Syntronic AB/   Syntronic AB/     File created. Approvd UABTOH.
              Björn Eriksson  Martin Wikström
PB1 20120904  EDAMELI                           File rewritten from scratch
PB2 20130130  XHENRMA         XSALNIC           ActivateSpeechLink added.
PB3 20130225  XSALNIC         XHENRMA           Minor change in Sub SetSpeechLoopback and cleanup
PB4 20130305  XSALNIC         XHENRMA           Added Sub FindMsgInLog and Sub FindMsgInLog2


=head1 REQUIRES

L<PerlFunc> 

L<wireshark> 

L<lsuConfig> 

L<mssim_def> 

L<mssim_sub> 

L<mssim> 

L<Hash::Util> 

L<dbLog> 

L<English> 

L<Carp> 

L<subinit_link> 

L<diagnostics> 


=head1 METHODS

=head2 ChActBTS

 ChActBTS();

my $gDebugPrintouts = undef;
Package subroutines
SUBROUTINE  : ChActBTS
DESCRIPTION : To activate a channel in the BTS, uses par hash variables

IN  : $BTS (Abisco connection parameter)

OUT : None


=head2 ChActMSSIM

 ChActMSSIM();

Subroutine: ChActMSSIM
Purpose:    To activate a channel in the MSSIM, sets the CcId package variable
Input:      MsId
            Cell
            TRXC
            TS
            Timeout
            TypeOfCh
            ChTyp
            ChRate
            AlgOrRate
            AMRCodec
            Ref
Output:     $CcId


=head2 ChRelMSSIM

 ChRelMSSIM();

SUBROUTINE  : ChRelMSSIM
DESCRIPTION : To release a channel in the MSSIM

IN  : CcId
      Timeout
OUT : None


=head2 CheckL3Data

 CheckL3Data();

SUBROUTINE  :  CheckL3Data
DESCRIPTION : To compare received L3Data to expected L3Data

IN  :  Expected L3Data
       Received L3Data
OUT :  Returns 1 if data differs, else 0


=head2 CompareHash

 CompareHash();

Subroutine: CompareHash
Purpose:    Compares two hashes by using recursion
Input:      Expected    Expected hash table
            Received    Hash table to compare Expected to
            Debug       Set to 1 to get debug printouts

Output:     0 - tables DOESNT match
            1 - tables match


=head2 DeactivatePayload

 DeactivatePayload();

SUBROUTINE  : DectivateSpeech
DESCRIPTION :    Deactivate speech

IN  :
OUT :  NONE


=head2 EstReqBTS

 EstReqBTS();

Subroutine: EstReqBTS
Purpose:    To send Establish Request from BTS and receive
             the expected response from BTS on SAPI
Input:      BTS => $BTS,
            SAPI => 0,
            LinkId => 'FACCH/SDCCH',
            TG   => $TG,
            TRXC => $TRXC
            TS => $TS,
            ChType => $ChType,
Output:     None


=head2 EstablishReqMSSIM

 EstablishReqMSSIM();

Subroutine: EstablishReqMSSIM
Purpose:    To send Establish Request to MSSIM and receive EstablishIndication
            from Abisco
Input:      Hash containing the following key(s):
             BTS     - Abisco connection parameter
             SAPI    - Sapi value
             CHAN    - Channel state
             L3DATA  - Reference to L3Data array

Output:     None


=head2 FindMsgInLog

 FindMsgInLog();

SUBROUTINE  : FindMsgInLog
DESCRIPTION : To find a message in log

IN  :
OUT : Return number of frames between change request and actual change in codec.


=head2 FindMsgInLog2

 FindMsgInLog2();

SUBROUTINE  : FindMsgInLog2
DESCRIPTION : To find a message in log

IN  :
OUT : Return Array of AMR codec


=head2 HexToBinary

 HexToBinary();

SUBROUTINE  : HexToBinary
DESCRIPTION : To Convert a Hex value to Bin

IN  :    Hex
OUT :    Bin


=head2 ModeModify

 ModeModify();

Subroutine: ModeModify
Purpose:    Sends a ModeModify command
Input:      See %Config hash
              Standard values from Abisco IWD
Output:     0 if OK


=head2 RadioChReleaseCommand

 RadioChReleaseCommand();

Subroutine: RadioChReleaseCommand
Purpose:    Cleans all radiochannels connected to TG
Input:      TG
            TRXC
Output:     0 if OK


=head2 ReceiveAbiscoMessage

 ReceiveAbiscoMessage();

Subroutine: ReceiveAbiscoMessage
Purpose:    To receive a spontanious message from Abisco
Input:      BTS (Abisco connection parameter)
            Timeout  => undef,
            Expect    => undef,
            Supress   => "SupressError",
Output:     Received Data hash


=head2 ReceiveMSSIM

 ReceiveMSSIM();

=head2 ReceiveMSSimMsg

 ReceiveMSSimMsg();

Subroutine: ReceiveMSSimMsg
Purpose:    Receive msgs on the MSSim until one is found that matches the
            in Expected hash or timeout occurs

Input:      Timeout       - 0.., time to look for msg in seconds
            SupressError  - 1/0, supress croak On/Off
            ErrorMsg      - if this string is defined it will be printed if an
                            error occurs
            Expected      - Hash containing keys to look for in received msg

Output:     0 - Message matching Expected's keys NOT found
            1 - Message matching Expected's keys found


=head2 ReleaseAllPayload

 ReleaseAllPayload();

Subroutine: ReleaseAllPayload
Purpose:    Releases all payload in TSS
Input:      None
Output:     0 if OK


=head2 SendAssignmentCommand

 SendAssignmentCommand();

SUBROUTINE  : SendAssignmentCommandAbisco
DESCRIPTION : To send DATA_REQUEST Assignment Command from Abisco

IN  :  ChType
       TS
OUT :  None


=head2 SendAssignmentCommand_N

 SendAssignmentCommand_N();

SUBROUTINE  : SendAssignmentCommandAbisco
DESCRIPTION : To send DATA_REQUEST Assignment Command from Abisco

IN  :  ChType
       TS
OUT :  None


=head2 SetSpeechLoopback

 SetSpeechLoopback();

SUBROUTINE  : SetSpeechLoopback
DESCRIPTION : Start or stop the Speech loopback functionality

IN  :    Mode: 'ON' or 'OFF'
            CcId
            LoopCcId
            Timeout
OUT :    Respons message


=head2 StartLoggingUm

 StartLoggingUm();

Subroutine: StartLogUm
Purpose:    To start logging on Um
Input:      Hash with parameters
            BTS
            TimeToRun
            MSSIMLogFile - Name of the MSSIM log file
Output:     0 if OK


=head2 resetMSSIM

 resetMSSIM();

Subroutine: resetMSSIM
Purpose: Resets MSSIM
Input: MsId
Output: None



=cut

=head1 NAME

Subs_modemodify


=head1 DESCRIPTION

Document number: 113/190 55-CAH 161 1607/1 Uen
MODULE      : Subs_modemodify
DESCRIPTION : Contains subroutines that will be used in TRS-3 tests, such as Mobile Call Setup.

COPYRIGHT ©:ERICSSON AB S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV DATE     NAME           REVIEW          COMMENT
A   20100920 Syntronic AB/  Syntronic AB/   File created. Approved UABTOH.
             Björn Ericsson Martin Ericsson

B   20110506 Syntronic AB/  Syntronic AB/   Updated ModeModify and ChActBTS for VAMOS
             Mark Bentham   David Melin     Added RadioChRel, SetTG and RestartBTS
C   20110829 XTOBSEM        XSOFFRO         Added SetEncryptionKeyMSSIM, CheckL3Data,
                                            ReceiveAbisco, EstablishReqMSSIM and
                                            ChActMSSIM
                                            Added ReceiveMSSIM and SetEncryptionBTS.
                                            Added PerlCritic and Diagnostics
D   20120215 XLEIMAR        XSOFFRO         Removed use Switch, it was not applied
PE1 20120510 XMAREDV        XANSBEM         Implemented ActiveTG, BTSUtilities
                                            and Hashes with 'lockkeys' as function
                                            inputs. Ran PerlCritic.
PE2 20120621 XAMMELY        XSOFFRO         Clean up, rewrote EstablishReqMSSIM and
                                            ReceiveAbisco according TR: HP65082
PE3 20120808 EERICSV        XSOFFRO         Added ChRelMSSIM, RelReqMSSIM, ActivateSpeech
                                            and DeactivateSpeech. Added the IdleMode
                                            parameter to ActivateCSData and default
                                            arguments to ModeModify.
PE4 20121030 XANSBEM                        Added subroutines GetMsgArrayFromUm,VerifyModeModifyOnUm, MSSIMTransferFile,
                                             StopPlayTest, StartPlayTest, CreateSpeechPatternFile and replaced
                                             DeactivateSpeech and DeactiveCSData with ReleaseAllOpenChannels


=head1 REQUIRES

L<mssim_def()> 

L<mssim_sub> 

L<mssim> 

L<Exporter> 

L<speechfunc> 

L<Carp> 

L<Net::FTP> 

L<lsuConfig> 

L<speechfunc> 

L<wireshark> 

L<English> 

L<DBI> 

L<Hash::Util> 

L<dbLog> 

L<PerlFunc> 

L<AbiscoFunc2> 

L<User> 

L<SubInit_modemodify> 

L<Msg> 

L<lib> 

L<Abisco_Connection> 

L<diagnostics> 


=head1 METHODS

=head2 ActivateCSData

 ActivateCSData();

SUBROUTINE  : ActivateCSData
DESCRIPTION : Activate data on an activated channel

IN  :       1) TG           * Default parameters were given to the Input variable
            2) TRXC           so Input variable is vary based on Test Case
            3) DBRate
            4) DataGenMode
            5) DTX
            6) LoopDelay
OUT :       NONE


=head2 CalcFreqList

 CalcFreqList();

Calculates a Frequency List for TSConfiguration acc. to IWD
In: ARFCN => $ARFCN - Pointer to array containing all ARFCNs in
                    desired order (required)
    TX => $TX - Pointer to array containing all TXs in desired order
    RX => $RX - Pointer to array containing all RXs in desired order
    TRXC => $TRXC - if this is given, all TX and RX values will be
                            set to $TRXC
    Note: EITHER TX+RX OR TRXC must be given!
          All input arrays must contain the same number of elements!

    Optional: Hop => <Nr. of Hopp-Frequencies, 1->No Hopping>


=head2 CalcFreqListElement

 CalcFreqListElement();

Calculates the Frequency List out of given ARFCNs in the argument
Call: CalcFreqElement (TX=>$TX, RX=>$RX, ARFCN=> <ARFCN>)


=head2 ChActBTS

 ChActBTS();

BTS routines
Subroutine: ChActBTS
Purpose:    To activate a channel in the BTS
Input:      Hash containing the following key(s):
              AMRCodec    -   AMR Codec
              ChRate      -   Channel rate
              TG          -   TG number
              TRXC        -   TRXC
              TS          -   Timeslot number
              ChType      -   Channel Type
              ActType     -   Activation type
              TypeOfCh    -   Type of Channel
              AlgOrRate   -   GSM algorithm or Rate
              ChAct       -   Channel Activation type
              RFB         -
              AlgId       -   Algorithm ID
              AckType     -   Acknowledgement type (Ack/NAck)
              ICP         -
              CI          -
              MRver       -
              MultiRateConfig - Multirate configuration
              lIgnoreBSPower - set to true to disble BSPower
              lIgnoreChannelMode - set to true to disble ChannelMode struct
              BTS         -   Abisco connection parameter
Output:     None


=head2 ChActMSSIM

 ChActMSSIM();

Subroutine: ChActMSSIM
Purpose:    To activate a channel in the MSSIM
Input:      Hash containing the following key(s):
              Bypass - (set to '1' to bypass MSSIM automatic LAPDm handling)
Output:     $CcId


=head2 ChActMSSIMVamos

 ChActMSSIMVamos();

Subroutine: ChActMSSIMVamos
Purpose:    To activate a channel in the MSSIM, VAMOS
Input:      Hash containing the following key(s):
              AMRCodec    -   AMR Codec
              ChRate      -   Channel rate
              TG          -   TG number
              TRXC        -   TRXC
              TS          -   Timeslot number
              ChType      -   Channel Type
              ActType     -   Activation type
              TypeOfCh    -   Type of Channel
              AlgOrRate   -   GSM algorithm or Rate
              ChAct       -   Channel Activation type
              AlgId       -   Algorithm ID
              Bypass      -   Bypass flag
              Ref         -   Ref
              AllSacchSI  -   Indicator if all SACCH messages should be recieved
                              or just changes
              MsId        -   MSSSim ID
              Timeout     -   Timeout

Output:     CcId


=head2 ChRelBTS

 ChRelBTS();

Subroutine: ChRelBTS
Purpose:    To release a channel in the BTS
Input:      Hash containing the following key(s):
            BTS - Abisco connection parameter
            TG - Abisco connection parameter
            TRXC - Abisco connection parameter
Output:     None


=head2 ChRelMSSIM

 ChRelMSSIM();

SUBROUTINE  : ChRelMSSIM
DESCRIPTION : To release a channel in the MSSIM
              (Copied from packetfunc.pm)

IN  : $CcId      (MSSIM channel id)
      $Timeout
OUT : 0=OK


=head2 CheckBSPowerWithMSSIMLog

 CheckBSPowerWithMSSIMLog();

SUBROUTINE  : CheckBSPowerWithMSSIMLog
DESCRIPTION : Checks BS power by creating and analysing an LSU log
              Wireshark.pm needs an update for this subroutine to work
              (current version released in Abisco version R43A)

IN  : ConfigFile
      MsSIM_LSU_FileName
OUT : Hash containing power levels for timeslots and subtimeslots


=head2 CheckL3Data

 CheckL3Data();

Subroutine: CheckL3Data
Purpose:    To compare received L3Data to expected L3Data
Input:      Hash containing the following key(s):
             Expect    - Expected L3Data
             Received  - Received L3Data
Output:     Returns 1 if data differs, else 0


=head2 ConfigReadMO

 ConfigReadMO();

FUNCTION : ConfigReadMO
COMMENT  : Get current parameters for wanted MO
Syntax   : ConfigReadMO(MO => $MO);
IN       : MO type
OUT      : %lResp


=head2 CreateMS

 CreateMS();

SUBROUTINE  : CreateMS
DESCRIPTION : Create an MS on MSSIM

IN  : Hash containing the following key(s):
              $MsId  - MSSIM ID
OUT : -


=head2 CreateSpeechPatternFile

 CreateSpeechPatternFile();

Subroutine: CreateSpeechPatternFile
Purpose:    Creates a Speech Pattern file that is uploaded on the MSSIM
Input:     Speechfile
           ChannelMode - SPEECH, DATA or SIGN
           Rate - TCH_FS, TCH_F14_4, TCH_F9_6, TCH_F4_8 or TCH_F2_4
           Length - Number of frames that are compared
Output:    None


=head2 DeleteMS

 DeleteMS();

SUBROUTINE  : DeleteMS
DESCRIPTION : Delete existing MS on MSSIM

IN  : Hash containing the following key(s):
              $MsId  - MSSIM ID
OUT : -


=head2 DisableMO

 DisableMO();

FUNCTION : DisableMO
COMMENT  : Sends DisableRequest to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks DisableResult.
IN           : Optionally a reference to a Hash
           containing one or more of the following
           keys: TRXC, MO, MOState, ASOInst, ReasonCode, ResultCode
           ASOInst, INST
Out           : None


=head2 EnableMO

 EnableMO();

FUNCTION : EnableMO
COMMENT  : Sends EnableRequest to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks EnableResult.
IN             : Optionally a reference to a Hash containing
           one or more of the following
           keys: TRXC, MO, MOState, ASOInst
OUT             : None


=head2 EstablishReqMSSIM

 EstablishReqMSSIM();

Subroutine: EstablishReqMSSIM
Purpose:    To send Establish Request to MSSIM and receive EstablishIndication
            from Abisco
Input:      Hash containing the following key(s):
             BTS     - Abisco connection parameter
             SAPI    - Sapi value
             CHAN    - Channel state
             L3DATA  - Reference to L3Data array

Output:     None


=head2 GetFreqBand

 GetFreqBand();

---Get the frequency band


=head2 GetMsgArrayFromUm

 GetMsgArrayFromUm();

Subroutine: GetMsgArrayFromUm
Purpose:    Starts logging on Um and returns 100 messages in an array
            This is used to verify that a mode modify command has effect
             on messages on Um
Input:         LsuLogFile   - Name of the logfile
               LogFile      - Name of the Text Logfile
               ChannelMode  - used channel mode
               MSSIMCfgFile - Name of the cfg file used for logging
               ChRate        - The Channel Rate of the generated frames
               GenerateFrames - If the MSSIM should generate the frames.
Output:     @returnMessageArray


=head2 GetPowerLevel

 GetPowerLevel();

Subroutine: GetPowerLevel
Purpose:    Get PnMax, PnMin or Pmin
Input:      Level => PnMax, PnMin or Pmin
Output:     Desired power level (standard is PnMax)

Comment:    Values for PnMin and PnMax is extracted from BTS Parameter Limitations
            (17/1551-HRB 105 21) and values for Pmin is extracted from
            Requirements Specifications of different base stations.


=head2 GetTCHRefPower

 GetTCHRefPower();

SUBROUTINE  : GetTCHRefPower
DESCRIPTION : Takes a reference value for the nominal power level.

IN  : TRXC
OUT : Reference power


=head2 GetTSCparameters

 GetTSCparameters();

Subroutine: GetTSCparameters
Purpose:    To get the appropriate TSC_SET and TSC depending
            of wanted ChType when using VAMOS
            TSC on MSSIM is a combination of TSC_SET and TSC
Call:       %Resp = GetTSCparameters(ChType => $ChType);
Input:      ChType
            Valid parameters: Bm
                              Bm_1
                              Lm/0
                              Lm/1
                              Lm/0_1
                              Lm/1_1
Output:     Hash containing TSC_SET
                            TSC
                            MixingOrder
                            MSCapability
                            MSSIM_TSC


=head2 GetVPO

 GetVPO();

SUBROUTINE  : GetVPO
DESCRIPTION : Creates an array for use in TSConfig based on the table @VPO

IN  : MinSPIR
      MSCapability
OUT : VPO array


=head2 MSSIMTransferFile

 MSSIMTransferFile();

SUBROUTINE  : MSSIMTransferFile
DESCRIPTION : Transfers file to MSSIM

IN  : User
      Password
      LocalFilename
      RemoteFilename
OUT : 0 - OK
      1 - Error


=head2 ModeModify

 ModeModify();

Subroutine: ModeModify
Purpose:    Sends a modemodify
Input:      CheckSyntax
            RespHash
            CheckRespTime
            ChType
Output:


=head2 RadioChRel

 RadioChRel();

Subroutine: RadioChRel
Purpose:    BSC commands TRS to release all dedicated resources within the TRX.
Input:
Output:


=head2 RadioChReleaseCommand

 RadioChReleaseCommand();

Subroutine: RadioChReleaseCommand
Purpose:    Cleans all radiochannels connected to TG
Input:      TG
            TRXC
Output:     TC result value


=head2 ReceiveAbisco

 ReceiveAbisco();

Subroutine: ReceiveAbisco
Purpose:    To receive a spontanious message from Abisco
Input:      Hash containing the following key(s):
             BTS      - Abisco connection parameter
             Timeout  - Timeout value
             Expect   - Expected message
             Supress  - Indicate if timeout errors should be supressed
                        (HandleError not called).
             L3DATA   - Reference to L3Data array of expected message
Output:     CauseValue


=head2 ReceiveMSSIM

 ReceiveMSSIM();

Subroutine: ReceiveMSSIM
Purpose:    To receive a spontaneous message from MSSIM
Input:      Hash containing the following key(s):
             Timeout   - Timeout value
             ExpMsg    - Expected Message
             Expect - Reference to array of expected message
Output:     None


=head2 RelReqMSSIM

 RelReqMSSIM();

SUBROUTINE  : RelReqMSSIM
DESCRIPTION : To send Release Request to MSSIM and receive ReleaseIndication from Abisco

IN  :  $BTS  AbiscoConnection object
       $Sapi  SAPI 0 or 3
       $Chan  Channel
       $Mode Release mode
OUT :  None


=head2 ReleaseAllOpenChannels

 ReleaseAllOpenChannels();

Subroutine: ReleaseAllOpenChannels
Purpose:    Release all Open Channels from TSS
Input:      ChannelName - CSData, PSData, Speech or All
Output:     None


=head2 RestartBTS

 RestartBTS();

Subroutine:  RestartBTS
Purpose:    Restarting the BTS, make sure that the parameters set during restart
             complies with your specific TC
Input:      $BTS (Abisco connection parameter)
Output:


=head2 RoundFloat

 RoundFloat();

Subroutine: RoundFloat
Purpose:    Rounds the first argument to (the second argument) number of decimal places.
Input:      Float     (Value to round)
            Decimals  (Number of decimal digits, >= 0)
Output:     Rounded float


=head2 SetEncryptionBTS

 SetEncryptionBTS();

Subroutine: SetEncryptionBTS
Purpose:    Setting the encryption key in  BTS
Input:      Hash containing one or more of the following keys:
             BTS       -  Abisco connection parameter       (default $BTS)
             Encr      -  No (1) A5/1 (2) A5/2 (3) A5/3 (4) (default 'No')
             StartEncr - 'No', 'Start'                      (default 'No')
Output:    None


=head2 SetEncryptionMSSIM

 SetEncryptionMSSIM();

Subroutine:  SetEncryptionKeyMSSIM
Purpose:    Sets the encryption in the MSSIM
Input:      Hash containing the following key(s):
             EncryptionAlg -   CIPH_NONE, CIPH_A5_1, CIPH_A5_2,
                               CIPH_A5_3, CIPH_A5_4, CIPH_A5_5,
                               CIPH_A5_6, CIPH_A5_7
             EncryptionKey  - Reference to 8 byte encryption key array
Output:


=head2 SetNominalMaxPower

 SetNominalMaxPower();

Subroutine: SetNominalMaxPower
Purpose:    Set nominal power to max power
Input:      TG
            TRXC
Output:     backupValues => TRXno => NominalPower


=head2 SetTG

 SetTG();

Subroutine: SetTG
Purpose:    To set TCM configuration, updates, disconnects and reconnects.
Input:      TCH_Configuration
            Abismode
Output:     None


=head2 SetTLS

 SetTLS();

SUBROUTINE  : SetTLS
DESCRIPTION : To modify TLS
              example: SetTLS(TLSA=>'yes', TLSI =>'no');
IN  : TLSA, TLSI
OUT : None


=head2 StartAbisLog

 StartAbisLog();

Subroutine: StartAbisLog
Purpose:    Start Abis log
Input:      None
Output:     None


=head2 StartPlayTest

 StartPlayTest();

Subroutine: StopPlayTest
Purpose:    Starts to send the generated frames from the MSSIM
Input:      TxFile
            RxFile
Output:     None


=head2 StopAbisLog

 StopAbisLog();

Subroutine: StopAbisLog
Purpose:    Stop Abis log
Input:      None
Output:     None


=head2 StopPlayTest

 StopPlayTest();

Subroutine: StopPlayTest
Purpose:    Starts to send the generated frames from the MSSIM
Input:      None
Output:     None


=head2 TSConfig

 TSConfig();

FUNCTION : TSConfig
COMMENT  : Reconfigure TS
Syntax   : TSConfig(TS => $TS);
IN       :
OUT      : %lResp


=head2 VerifyModeModifyOnUm

 VerifyModeModifyOnUm();

Subroutine: VerifyModeModifyOnUm
Purpose:    Compares 2 arrays with messages from Um and Verifies that
            a ModeModify has effect on the messages. The arrays should be
            read from GetMsgArrayFromUm
Input:     ArrayBefore - Reference to array before mode modify
           ArrayAfter - Reference to array before mode modify
            SuccessRate
           NrOfMessages
           NoChange
           SignToTCH
Output:    None


=head2 resetNominalPower

 resetNominalPower();

Subroutine: resetNominalPower
Purpose:    Set nominal power to max power
Input:      TG
            TRXC
Uses:       backupValues=> TRXno => NominalPower
Output:



=cut

=head1 NAME

subs_mspower


=head1 DESCRIPTION

Document number: 76/190 55-CAH 161 1607/1
MODULE      : subs_mspower.pm
DESCRIPTION : This package contains the subfunctions and variables used
              with the main test case

COPYRIGHT © : ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV DATE      NAME      REVIEW    COMMENT
A   20100920  XWIKMAR   XDAVMEL   File created. Approved UABTOH
B   20110301  XMABENT   XTOBSEM   Added missing functions ClearMSSIMBuffer
                                   SendDataRequest, solved TR HM92559
                                   Updated ReceiveMSSIM with CcId, solved TR HM92550
C   20111110  XSOFFRO   XPRRANA   Added subroutine waitforcellsync and call it in
                                   ChActMSSIM and ChRelMSSIM (TR HO28877)
                                   Subroutine waitforcellsync now called from mssim_sub (TR HO74668)
D   20121213  XANSBEM   XMAREDV   Updated script to latest template, Ran
                                   Perl Critic and implemented Active TG


=head1 REQUIRES

L<Carp> 

L<English> 

L<Hash::Util> 

L<subinit_mspower> 

L<dbLog> 

L<mssim_sub> 

L<mssim> 

L<mssim_def> 

L<DBI> 

L<Abisco_Connection> 

L<diagnostics> 


=head1 METHODS

=head2 ChActBTS

 ChActBTS();

SUBROUTINE  : ChActBTS
DESCRIPTION : To activate a channel in the BTS, uses par hash variables

IN  : $BTS (Abisco connection parameter)
             $MSPower Power level to be ordered to MSSIM
             $BiChan choose 0 or 1 for LM/0 or Lm/1
OUT : None


=head2 ChActBTSLowPWRLvl

 ChActBTSLowPWRLvl();

SUBROUTINE  : ChActBTSLowPWRLvl
DESCRIPTION : To activate a channel in the BTS with low Power Level

IN  : None
OUT : None


=head2 ChActMSSIM

 ChActMSSIM();

SUBROUTINE  : ChActMSSIM
DESCRIPTION : To activate a channel in the MSSIM, sets the CcId package variable

IN  : $Bypass  (set to '1' to bypass MSSIM automatic LAPDm handling)
OUT : $CcId


=head2 ChCleanBTS

 ChCleanBTS();

SUBROUTINE  : ChCleanBTS
DESCRIPTION : To release all radio traffic channels or control channels in the BTS
             without asserting the responses

IN  : $BTS (Abisco connection parameter)
OUT : None


=head2 ChReActMSSIM

 ChReActMSSIM();

SUBROUTINE  : ChReActMSSIM
DESCRIPTION : To activate a channel in the MSSIM

IN  : %Param hash, see main program for description
OUT : CcId


=head2 ChReactBTS

 ChReactBTS();

SUBROUTINE  : ChReactBTS
DESCRIPTION :  To activate a channel in the BTS

IN  : PWRLevel
OUT : None


=head2 ChRelBTS

 ChRelBTS();

SUBROUTINE  : ChRelBTS
DESCRIPTION : To release a channel in the BTS, based on par hash

IN  : None
OUT : None


=head2 ChRelBTSSDCCH

 ChRelBTSSDCCH();

SUBROUTINE  : ChRelBTSSDCCH
DESCRIPTION : To release control channels in the BTS

IN  : $BTS (Abisco connection parameter)
OUT : None


=head2 ChRelMSSIM

 ChRelMSSIM();

SUBROUTINE  : ChRelMSSIM
DESCRIPTION : To release a channel in the MSSIM, uses the package variable CcId to
             identify the opened channel

IN  : $CcId
OUT : None


=head2 ChRelReActBTS

 ChRelReActBTS();

SUBROUTINE  : ChRelReActBTS
DESCRIPTION : To release a channel in the BTS, based on par hash

IN  : BTS
OUT : None


=head2 CheckCBCH

 CheckCBCH();

SUBROUTINE  : CheckCBCH
DESCRIPTION : To verify and set correct CBCH for active sub test case,
             makes a restart of BTS if to save changes.

IN  : $BTS (Abisco connection parameter)
OUT : None


=head2 CheckTestBandBTS

 CheckTestBandBTS();

SUBROUTINE  : CheckTestBandBTS
DESCRIPTION : To check what Frequency band of the current BTS

IN  : $BTS (Abisco connection parameter)
OUT : $TestBand


=head2 ClearMSSIMBuffer

 ClearMSSIMBuffer();

SUBROUTINE  : ClearMSSIMBuffer
DESCRIPTION : Clears the MSSIM message buffer

IN  : None
OUT : Number of cleared messages


=head2 EstReqBTS

 EstReqBTS();

SUBROUTINE  : EstReqBTS
DESCRIPTION : To send Establish Request from BTS and receive
             the expected response from BTS on SAPI3

IN  : $BTS
             $SAPI
             $Expected data
             $LinkId ( FACCH/SDCCH or SACCH)
OUT : None


=head2 LAPDmSend

 LAPDmSend();

SUBROUTINE  : LAPDmSend
DESCRIPTION : To send a LAPDm frame

IN  : $Chan      (SDCCH, SACCH or FACCH)
               $MsPower  (Only applicable for SACCH)
               $TA        (Timing advance, only applicable for SACCH)
              $Cmd       (Command = "I", "RR", RNR", "REJ", "SABM", "DM", "UI", "DISC" or "UA"
               N(R)       (Receive Sequence Number)
               N(S)      (Send Sequence Number)
               P/F       (Poll/Final bit)
               SAPI      (Service Access Point)
               C/R        (Command/Response)
               M          (More bit)
               EL        (Length Extension bit)
               EA        (Address Extension Bit)
               Data      (Information Field)
OUT : None


=head2 ReceiveAbiscoMessage

 ReceiveAbiscoMessage();

SUBROUTINE  : ReceiveAbiscoMessage
DESCRIPTION : To receive a spontanious message from Abisco

IN  : $BTS (Abisco connection parameter)
             Timeout value
             Expected message type
             Supress, "SupressError" if HandleError should not be called
OUT : Received Data hash


=head2 ReceiveMSSIM

 ReceiveMSSIM();

SUBROUTINE  : ReceiveMSSIM
DESCRIPTION : To receive a spontanious message from MSSIM

IN  : Timeout value
             Expected Message
             Type of data
            CcId of expected message
OUT :@ImmAss Array with messagetype and page mode data


=head2 ReceiveSystemInfo

 ReceiveSystemInfo();

SUBROUTINE  : ReceiveSystemInfo
DESCRIPTION : Recieve SystemInfo frames as lapdmDL_UNITDATA_IND where SI is choosen
             System Info version, check that SRO flag is set
             specific for 3020_01.abi

IN  : $T200
             $SI: SI5 = 29, SI5bis = 5, SI6 = 30
OUT : %Param


=head2 RestartBTS

 RestartBTS();

SUBROUTINE  : RestartBTS
DESCRIPTION : Restarting the BTS, make sure that the parameters set during restart
             complies with your specific TC

IN  : $BTS (Abisco connection parameter)
OUT : None


=head2 SendDataRequest

 SendDataRequest();

SUBROUTINE  : SendDataRequest
DESCRIPTION : Sends a Data Request with powerinformation

IN  :
OUT : None


=head2 SendMeas

 SendMeas();

SUBROUTINE  : SendMeas
DESCRIPTION : To send Measurement Reports

IN  : L2 Header
             Measurement Report contents (array)
OUT :


=head2 SetMSPowerBTS

 SetMSPowerBTS();

SUBROUTINE  : SetMSPowerBTS
DESCRIPTION : To activate the set power message in the BTS

IN  : $BTS (Abisco connection parameter)
      $MSPower Power level to be ordered to MSSIM
OUT : None



=cut

=head1 NAME

Subs_PacketData


=head1 DESCRIPTION

Document number : 91/190 55-CAH 161 1607/1 Uen
MODULE      : Subs_PacketData.pm
DESCRIPTION : This package contains the subfunctions and variables used
              with the main test case

COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV  DATE       NAME              REVIEW              COMMENT
R1   20090616   ERAHEIK                               File created.
R2   20100120   ERATZIS                               Updated Header, added ConnectToMSSIM, FindPGSLMessagesInLog, SCQualityReportII, SCReporting, ChRelMSSIM, StartLoopMSSIM,
                                                       WaitForSCQualityReportII, CheckSCQualityReportII, CreateParameterHash, ChRelMSSIM, ChActPacketMSSIM, StopLoopMSSIM. Approved.
A    20100125   ERATZIS           UABTOH              Approved. Changed revision tag to fulfill Ericsson CM standards.
B    20100413   Syntronic AB/     ERADERV             Added findMessagesInLog, SetTG, CheckL3Data, DbReport, DbCheckTable, GetDateTime,
                Björn Eriksson                         InitResult, GetResult, HandleError.
                                                       Added SetTLSFilternigTime AllocateGslLink StartGslLink
                                                       Modified FindPGSLMessagesInLog ChannelActPacket
                                                       Verified for G11B with 2256_02.abi
C    20100921   Syntronic AB/                         Added: FindMinMaxInMessageArray SaveConfig RestoreConfig SetAbisAndTCHMode
                Martin Wikström                        Added: SetAbisAndTCHMode PrintMessageArray, PrintMesasge, FindMinMaxInMessageArray
                                                       ReleaseOpenChannels, FilterMesasgeArray, ParseAbisLog, JoinArrays, findMessagesInLog
D    20101008   Syntronic AB/     Syntronic AB/       Added: ClearMSSIMbuffer, Added: ConfigureLanforge ReadLanforgeSettings.
                Björn Eriksson    David Melin          Approved UABTOH
E    20110510   XMABENT           XDAVMEL             Added missing subs from 2256.04: FindAbisMessagesInLog, FindAbisSequenceMessagesInLog,
                                                       CheckCPSParameterInLog
                                                       Added new subs: FindModifiedDLPGSLMsg, FindPGSLStatusInd, CheckDLFlowTN
                                                       Added: CheckSequenceNoPGSL_DLDATA_REQ CheckTimeBetweenRTTI_IND
                                                       Added more Coding Schemes to CheckCCUDiscardFrames
                                                       Fixed bug in CheckCPSParameterInLog (HeaderType 5)
                                                       Updated: SetAbisAndTCHMode and SetTG to incorporate ExtendedRange
                                                       Added: SendABMSSIM
                                                       Added: CreateLSUParam
                                                       Updated: New parameter in CreateParameterHash
                                                       Added: GetTRXValuesMSSIM
                                                       Updated CheckCPSParameterInLog so that a timeslot can be specified
                                                       Updated values in CheckCCUDiscardFrames after resolved TR LSUMSSIM-175
                                                       Added: MSSIMTransferFile, GeneratePSPatternFile
                                                       Merge with parallell development for G10B/REV_D,including correction of revision history.
                                                       Added: CheckIfPANinULDATA, CheckRLCBlockQuality, %RLCMACHeader hash
                                                       Updated: SetAbisAndTCHMode and SetTG for compatibility with Abisco R35
F    20120220   XLEIMAR           XSOFFRO             Updated: GetTRXValuesMSSIM now returns AvgRfl also when it's positive
                                                       Added: GetMaxPwr, GetCPSValueFromRLCMACHeader, ActivateMCPAOverbooking,
                                                        DeactivateMCPAOverbooking, waitForCellSync, return in PrepareData
                                                       Added warnings, diagnostics and Perl Critic
                                                       Implemented TSS-logging for non IP-SIU
                                                       Updated FindPGSLMessagesInLog due to minor bug fixes
                                                       Corrected definitions of CCU-SYNC-IND and PCU-SYNC-IND
                                                       Corrected return of error code in StartGslLink.
                                                       Placed a backslash before @btbits in string in subroutine ConfigureLanforge
                                                       Added %Message_PGSL_STATUS_IND_TEMPLATE to export.
G    20120604   XLEIMAR           XAMMELY             Added StoreTG, ResetTG and ChangeTG.
                                                       Implemented ActiveTG
                                                       Removed all unnecessary functions, variables and typeglobs
                                                       Fixed bug in GetMaxPwr
                                                       Added MCS-6_with_padding10 to the UCMHash
                                                       Updated FindPGSLMessagesInLog to stop the search when
                                                       the first correct PGSL-STATUS-IND has been found
PH1  20130711   EKHOELH           XSALNIC             Changed the code in CheckIfPANinULDATA in order to work with both SC and IP adoptable
                                                       with the new log version for IP. The data position changed for SC
                                                       channel and IP logs so the new changes let this values passed on the results
                                                       in 4100_02 as data 1 to data 6 and Octet 1 and Octet 2.
PH2  20131007   XPATHIL                               Added sub IPTemplateModify and BPSplit,
                                                       modified GetRoundTripDelayAbis and CalcRoundTripDelayAbis
                                                       in order to comply with new TCP/IP structure on WLog frames
                                                       Modified FindPGSLMessagesInLog, findMessagesInLog, CheckCCUDiscardFrames
                                                       to dynamically work with the IP-SIU conf. and the Abis Upper Bundling Protocol
                                                       Added %CSAPI_TEMPLATE for IP-SIU Bundling Protocol support
                EKHOELH          XHENRMA              Modified a function called CheckDLFlowTN in order to work both in SC and the new IP logging
                XPATHIL          XSALNIC               Applied perlcritic and made changes accordingly.
                                                       If "/x" is added to the regular expression in "FindPGSLMessagesInLog" the test cases will fail
PH3  20131108   EKHOELH          XSALNIC              Removing unnecessary parts in SetAbisAndTCHMode, Perlcritic.


=head1 REQUIRES

L<wireshark> 

L<English> 

L<Carp> 

L<SubInit_PacketData> 

L<Hash::Util> 

L<List::Util> 

L<Net::FTP> 

L<Net::Telnet> 

L<Storable> 

L<Hash::Util> 

L<mssim_def> 

L<mssim_sub> 

L<mssim> 

L<wireshark> 

L<dbLog> 

L<packetfunc> 

L<PerlFunc> 

L<AbiscoFunc2> 

L<Abisco_Connection> 

L<diagnostics> Produce verbose warning diagnostics


=head1 IMPLEMENTS

L<Exporter> 


=head1 METHODS

=head2 ActivateGSLData

 $self->ActivateGSLData();

SUBROUTINE  : ActivateGSLData
DESCRIPTION : Allocates and starts a GSL link

IN  :     %Param (created with CreateParameterHash)
OUT :     None


=head2 ActivateGSLData_EPAS

 $self->ActivateGSLData_EPAS();

SUBROUTINE  : ActivateGSLData_EPAS
DESCRIPTION : Allocates and starts a GSL link for EPAS feature

IN  :     %Param (created with CreateParameterHash)
OUT :     None


=head2 ActivateGSL_EPAS

 $self->ActivateGSL_EPAS();

SUBROUTINE  : ActivateGSL_EPAS
DESCRIPTION : Start Sending GSL or PGSL data from TSS for EPAS feature

IN  : $Param{TG}
      $Param{TRXC}
      $Param{TS}
      $Param{DLEncoding}      Downlink encoding
      $Param{ICP}             Only applicabale in TDM mode
      $Param{CI}              Only applicabale in TDM mode
      $Param{PTA}             Only applicabale in SC mode
      $Param{PAL}             Only applicabale in SC mode
      $Param{ULMode}          Uplink mode BTTI/RTTI
      $Param{DLMode}          Downlink mode BTTI/RTTI
      $Param{SecTS}           Secondary timeslot, only applicable for RTTI
      $Param{Power}
      $Param{UCM}             Uplink Channel Mode
      $Param{ULEncoding}      Uplink Encoding
      $Param{ULPANIndicator}  Uplink PAN Indicator, default = 1
      $Param{SendPAN}         0=No, 1= Yes
      $Param{PAN}             PAN value, applicable only when $Param{SendPAN}=1
      $Param{TFI}             TFI value, applicable only when $Param{SendPAN}=1
      $Param{TimingOffset}    Timing Offset
      $Param{TLINK}           TLINK timer value
      $Param{TSUP}            TSUP supervision timer
      $Param{OpMode}          TSS Operational mode
      $Param{PRBSMode}        PRBS mode, only applicable when $OPMode include PRBS
      @{$Param{PacketData}}   Data including RLC/MAC header
      $Param{MACHdrStruct}{MACHdrData0}{CPS}              Optional CPS value
      $Param{MACHdrStruct}{MACHdrData1}{CPS}              Optional CPS value
      $Param{MACHdrStruct}{MACHdrData1}{Retransmission}   Optional TRUE or FALSE
      $Param{MACHdrStruct}{MACHdrData2}{CPS}              Optional CPS value
      $Param{MACHdrStruct}{MACHdrData2}{Retransmission}   Optional TRUE or FALSE
      $Param{MACHdrStruct}{MACHdrData3}{CPS}              Optional CPS value
      $Param{MACHdrStruct}{MACHdrData3}{Retransmission}   Optional TRUE or FALSE
      $Param{MACHdrStruct}{MACHdrData4}{CPS}              Optional CPS value
      $Param{MACHdrStruct}{MACHdrData4}{Retransmission}   Optional TRUE or FALSE
      $Param{MACHdrStruct}{MACHdrData5}{CPS}              Optional CPS value
      $Param{MACHdrStruct}{MACHdrData5}{Retransmission}   Optional TRUE or FALSE
      $Param{MACHdrStruct}{MACHdrData6}{CPS}              Optional CPS value
      $Param{MACHdrStruct}{MACHdrData6}{Retransmission}   Optional TRUE or FALSE
      $Param{MACHdrStruct}{MACHdrData7}{CPS}              Optional CPS value
      $Param{MACHdrStruct}{MACHdrData7}{Retransmission}   Optional TRUE or FALSE
      $Param{MACHdrStruct}{MACHdrData8}{CPS}              Optional CPS value
      $Param{MACHdrStruct}{MACHdrData8}{Retransmission}   Optional TRUE or FALSE
      $Param{MACHdrStruct}{MACHdrData9}{CPS}              Optional CPS value
      $Param{MACHdrStruct}{MACHdrData9}{Retransmission}   Optional TRUE or FALSE
OUT : 0=Ok, 1=Error


=head2 ActivateMCPAOverbooking

 $self->ActivateMCPAOverbooking();

SUBROUTINE  : ActivateMCPAOverbooking
DESCRIPTION : To activate MCPA Overbooking

IN  :      StartingMode
OUT :


=head2 AllocateGslLink

 $self->AllocateGslLink();

SUBROUTINE  : AllocateGSLLink
DESCRIPTION : Alocates a GSL link

IN  :     %Param (created with CreateParameterHash)
OUT :     None


=head2 BPSplit

 $self->BPSplit();

SUBROUTINE  : BPSplit                                         [v0.5]
DESCRIPTION : Splits IP packets into BPFrames returning one frame for every call
              made to the function.
              Returns the input if no BP extraction needed, with flag set to else
              than 'REDO'.
COMMENT     : Checks the input
USAGE:      :
              # INSIDE FOR LOOP
              if ($RedoFlag ne 'REDO') {
                # Read new line from WLog
                my %RESP = $ABISlog -> TSSReadWLog();
                if(defined $RESP{Message}){
                @MsgContainer = unpack('H*', $RESP{Message}); # if 'C*' use HexOrDec = 'Dec'
              }
              # Always perform the BPSplit (returns the input if no BP extraction needed)
              @Message = BPSplit(MessageRef => \@MsgContainer, S_CSAPI=>'TRUE', BPFlagRef => \$RedoFlag);
              # THE DO STUFF PART!
              # IN THE END OF FOR LOOP
              redo,if($RedoFlag eq 'REDO');
              # END

IN  : %lInput = (
        MessageRef    => undef,
        S_CSAPI       => 'FALSE' if older IP-SIU (before Y13),
        BPFlagRef     => undef,
        HexOrDec      => default 'Hex', put to 'Dec' when analysing
                          frames in Dec format
                    );
OUT : BPFrame in array or scalar depending on input type MessageRef


=head2 CalcRoundTripDelayAbis

 $self->CalcRoundTripDelayAbis();

SUBROUTINE  : CalcRoundTripDelayAbis
DESCRIPTION : Calculate the round trip time from PGSL-DLDATA-REQ to PGSL-DLDATA-IND

IN  :     Abislog - TSS Abis log object

OUT :     RTTMin  - RTT min
          RTTMax  - RTT max
          RTTAvg  - RTT average


=head2 ChActPacketMSSIM

 $self->ChActPacketMSSIM();

SUBROUTINE  : ChActPacketMSSIM
DESCRIPTION : To activate a PDCH channel in the MSSIM

IN  :     %Param hash, see main program for description
OUT :     CcId


=head2 ChActPacketMSSIM_EPAS

 $self->ChActPacketMSSIM_EPAS();

SUBROUTINE  : ChActPacketMSSIM_EPAS
DESCRIPTION : To activate a PDCH channel in the MSSIM for EPAS feature

IN  :     %Param hash, see main program for description
OUT :     CcId


=head2 ChRelMSSIM

 $self->ChRelMSSIM();

SUBROUTINE  : ChRelMSSIM
DESCRIPTION : To release a channel in the MSSIM

IN  :     $Timeout, $CcId
OUT :     None


=head2 ChangeTG

 $self->ChangeTG();

SUBROUTINE  : ChangeTG
DESCRIPTION : Alters the TG and cell parameters of the input hash in
              accordance to the desired abis mode (TDM or SC), channel rate
              and extended range. Output can be used with ResetTG.

IN  :     Reference to hash containing:
            Cell, TG, MCTR
          Desired abis mode
          Channel mode (array)
          Extended range, 'On' or 'Off'
OUT :     Altered hash


=head2 ChannelActPacket

 $self->ChannelActPacket();

SUBROUTINE  : ChannelActPacket
DESCRIPTION :

SYNTAX: ChannelActPacket('TimeSlot' => $T);
IN  :
OUT :


=head2 ChannelRelease

 $self->ChannelRelease();

SUBROUTINE  : ChannelRelease
DESCRIPTION :

SYNTAX: ChannelRelease('TimeSlot' => $T);
IN  :
OUT :


=head2 CheckCCUDiscardFrames

 $self->CheckCCUDiscardFrames();

SUBROUTINE  : CheckCCUDiscardFrames
DESCRIPTION : Compare aFNd from Abis PGSL-DLDATA-IND/PGSL-DLDATA-RTTI-IND with
              FN of frames on Um.

IN  :     AbisWLog  - Name of Abis .lsu file
          MSSIMWLog - Name of Um .lsu file
          aFNd      - Array of Abis aFND numbers to compare. Will compare
                      all PGSL-DLDATA* frames if left blank.
          Offset    - Ignore the first # of PGSL-DLDATA* aFNds
          CS        - Coding Scheme
          TS        - Primary timeslot
          SubTS     - Secondary timeslot (RTTI)
OUT :     Ok        - = 1 if Ok
          Error     - This key is set if an error occures


=head2 CheckCPSParameterInLog

 $self->CheckCPSParameterInLog();

SUBROUTINE  : CheckCPSParameterInLog
DESCRIPTION : check if correct CPS parameter exists in downlink message in Um Log

IN  :       $REQ{Encoding}        Needs to lookup the HeaderType.
            $REQ{CPSValue}        Wanted CPSValue to search for in logfile.
            $REQ{LogFile}         Tshark log file
            $REQ{Timeslot}        Timeslot. Optional, any if undefined
OUT :       $RESP{Result}         Result => '1' if found or Result => '0' if not found"
            $RESP{ResultText}     ResultText => "Found" or ResultText => "Not Found"
            $RESP{FoundCPSValue}  Found CPS Value.
            $RESP{NoOfHits}       Total number of hits in logfile.


=head2 CheckDLFlowTN

 $self->CheckDLFlowTN();

SUBROUTINE  : CheckDLFlowTN
DESCRIPTION : Find if DL flow TN has changed when going from a set of active PDCHs
              to another set.

IN  :       AbisWLog      - TSS Abis Log object
            FromTNBitmap  - TNBitmap in DLDATA-REQ to look for as pre change
            ToTNBitmap    - TNBitmap in DLDATA-REQ to look for as pos change
OUT :       Result        - String defined if a result was found
            Error         - String defined if an error occured


=head2 CheckIfPANinULDATA

 $self->CheckIfPANinULDATA();

## SUBROUTINE  : CheckIfPANinULDATA for SC or IP
# DESCRIPTION : To check if PAN is present in PGSL-ULDATA-IND message
#
# IN  :     AbisWLog:    TSS Abis Log object
#           ULEncoding: UL Encoding
#
# OUT :     NumberOfHits:     Number of ULDATA-IND with both PANI set, PAN field and TFI
#           NumberOfMessages: Total number of PGSL-ULDATA-INDs
#           NumberOfPANI:     Number of PGSL-ULDATA-IND with PANI set in RLC/MAC Header
#           Error:            Present if error found
For SC
data1= 3                  #data2= 8+3
data3= 3+11
3 LSU frames before start of PGSL-ULDATA-IND
11 frames in PGSL-ULDATA-IND before data
data4= 10+3                #data5= 4
data6= 9+3
For IP
data1= 14                  #data2= 22
data3= 4+ 4 + 4 + 2 + 11
4 Ericsson layer 2 tunneling protocol version 3
4 default L2-specific sublayer
4 message CRC 32
2 Abis upper bundling protocol
11 codes status and data length
data4= 24                 #data5= 4
data6= 23
#

=head2 CheckL3Data

 $self->CheckL3Data();

SUBROUTINE  : CheckL3Data
DESCRIPTION : To compare received L3Data to expected L3Data

IN  :     Hash containing the following key(s):
          Expect    - Expected L3Data
          Received  - Received L3Data
OUT :     Returns 1 if data is equal, else 0


=head2 CheckRLCBlockQuality

 $self->CheckRLCBlockQuality();

SUBROUTINE  : CheckRLCBlockQuality
DESCRIPTION : To check the RLC Block Quality bit i PGSL-ULDATA-IND (field Codec status)

IN  :     Q:          RLC/MAC Header Quality bit
          Q1:         RLC Block Quality 1 bit
          Q2:         RLC Block Quality 2 bit
          Q3:         RLC Block Quality 3 bit
          ULEncoding: UL Encoding
          Expect:     'GOOD' or 'BAD'

OUT :     'OK'        if quality as expected or
          'NOT_OK'    if not


=head2 CheckTSCParameterInLog

 $self->CheckTSCParameterInLog();

SUBROUTINE  : CheckTSCParameterInLog
DESCRIPTION : check if correct TSC parameter exists in downlink message in Um Log

IN  :       $REQ{Encoding}        Needs to lookup the HeaderType.
            $REQ{TSC}             Wanted TSC to search for in logfile.
            $REQ{LogFile}         Tshark log file
            $REQ{Timeslot}        Timeslot. Optional, any if undefined
OUT :       $RESP{Result}         Result => '1' if found or Result => '0' if not found"
            $RESP{ResultText}     ResultText => "Found" or ResultText => "Not Found"
            $RESP{FoundTSCValue}  Found TSC Value.
            $RESP{NoOfHits}       Total number of hits in logfile.


=head2 CheckTimeBetweenRTTI_IND

 $self->CheckTimeBetweenRTTI_IND();

SUBROUTINE  : CheckTimeBetweenRTTI_IND
DESCRIPTION : To check the time between two PGSL-DLDATA-RTTI-IND messages
              belonging to same PGSL-DLDATA-REQ

IN  :     File          - Filename of Abis .lsu file
          MaxDiff       - Maximum allowed time difference [ms]

OUT :     Hash          - Ok    => Reason
                     or - Error => Reason


=head2 ClearMSSIMbuffer

 $self->ClearMSSIMbuffer();

SUBROUTINE  : ClearMSSIMbuffer
DESCRIPTION : Clears the MSSIM message buffer

IN  :     None
OUT :     Number of cleared messages


=head2 CompleteStartRBS

 $self->CompleteStartRBS();

SUBROUTINE  : CompleteStartRBS
DESCRIPTION : Runs a complete startup of the RBS.

IN  :      Hash containing complete start specific data
            - Receive   -> 'YES' || 'NO'
                      If the answer of the complete start is required
            - TG
            - BTS
            - TLSI    ->'OFF' || 'ON'
                      TLS on Idle channel
            - TLSA    ->'OFF' || 'ON'
                      TLS on Active channel
            - TLSFilteringTime    -> 10 .. 100
                      The range for TLS filtering time is 1 to 10 seconds
OUT :      $Ret    -> 1 || 0
                      Indicates the succession of the complete startup


=head2 ConfigureLanforge

 $self->ConfigureLanforge();

SUBROUTINE  : ConfigureLanforge
DESCRIPTION : Configure Lanforge Latency

IN  :     Note: Use ReadLanforgeSettings to generate input hash
          Endpoint - Lanforge endpoint name
          Port     - Lanforge port, usually 4001
          Host     - Lanforge address
          Timeout  - Telnet timeout
          Latency  - Layency to induce on Abis
OUT :     Error    - This key is set with an error msg if an error occured


=head2 CreateParameterHash

 $self->CreateParameterHash();

SUBROUTINE  : CreateParameterHash
DESCRIPTION :

SYNTAX: CreateParameterHash(PacketData => \@PacketData);
IN  : %Param
OUT : %Param


=head2 CreateParameterHashMultiMS

 $self->CreateParameterHashMultiMS();

SUBROUTINE  : CreateParameterHashMultiMS
DESCRIPTION :

SYNTAX: CreateParameterHash(PacketData => \@PacketData);
IN  : %Param
OUT : %Param


=head2 DeactivateGslData

 $self->DeactivateGslData();

SUBROUTINE  : DeactivateGslData
DESCRIPTION :

SYNTAX: DeactivateGslData('TS' => $T);
IN  :
OUT :


=head2 DeactivateMCPAOverbooking

 $self->DeactivateMCPAOverbooking();

SUBROUTINE  : DeactivateMCPAOverbooking
DESCRIPTION : To deactivate MCPA Overbooking

IN  :      StartingMode
OUT :


=head2 DeallocateGSLLink

 $self->DeallocateGSLLink();

SUBROUTINE  : DeallocateGSLLink
DESCRIPTION : Deallocates GSL link

IN  :     %Param (created with CreateParameterHash)
OUT :     None


=head2 DifferentEncoding

 $self->DifferentEncoding();

SUBROUTINE  : DifferentEncoding
DESCRIPTION : To prepare MSSIM for different encoding in downlin/uplink

IN  :      $Action
           Downlink encoding
           Downlink CPS
           Uplink encoding
           Uplink CPS
OUT :


=head2 FilterMessageArray

 $self->FilterMessageArray();

SUBROUTINE  : FilterMessageArray
DESCRIPTION : Subroutine to search message array of hash references. The
              hashes that matches the filter is returned in a new hash
              reference array

IN  :    Hash containing the following key:

         MesasgeStructure - An array of messages
         FilterKey        - Hash key to which the filter value corresponds to
         Min              - Min value of the value correponding the filter key
         Max              - Max value of the value correponding the filter key
         Exact            - Exact value of the value correponding the filter key

         NOTE: Either give Max/Min OR give an Exact value.

OUT :    An array of messages matching the given criterias.


=head2 FindMinMaxInMessageArray

 $self->FindMinMaxInMessageArray();

SUBROUTINE  : FindMinMaxInMessageArray
DESCRIPTION : Subroutine to search message array for a message with the
              lowest/highest value corresponding to a given hash key.

IN  :    Hash containing the following key:

         MesasgeStructure - An array of messages
         FilterKey        - Hash key to which the filter value corresponds to
         MinMax           - 'Min' or 'Max', depending on what is searched for.

OUT :    A messages hash matching the given criterias.


=head2 FindModifiedDLPGSLMsg

 $self->FindModifiedDLPGSLMsg();

SUBROUTINE  : FindModifiedDLPGSLMsg
DESCRIPTION : Find a PGSL-DLDATA-IND/PGSL-DLDATA-RTTI-IND modifed with provided
              OR and AND masks.

IN  :       PGSLLogFile   - Name of Abis log file (hex)
            PGSLMsg       - Type of PGSL msg (PGSL-DLDATA-IND/PGSL-DLDATA-RTTI-IND)
            ORMask        - OR mask used to create the modified msg
            ANDMask       - AND mask used to create the modified msg
OUT :       Ok            - = 1 if Ok
            modifiedFN    - aFNd of modified msg
            Message       - The modified msg as a hash
            Error         - This key is set if an error occures


=head2 FindPGSLMessagesInLog

 $self->FindPGSLMessagesInLog();

SUBROUTINE  : FindPGSLMessagesInLog
DESCRIPTION : Find PGSL Messages in saved Log

IN  :       $REQ{PGSLLogFile} Message file containing Hex dump as string
            $REQ{PGSLMessage} The PGSL Message to be found in log
            $REQ{Cause}       The wanted Cause value. Note! This must always
                              be present, as input for the algorithms below.
            $REQ{AdditionalData} The wanted Additional Data Value
OUT :       $RESP{Result}      Result Code (10=Found, 11= NotFound)
            $RESP{Reason}      Result Text
            $RESP{NbrOfMessagesInLog}
            $RESP{MessageFound}
            $RESP{Message}
            $RESP{aFNValue}
            $RESP{ModifiedFN}
            $RESP{TNSeqNo}
            $RESP{TNSeqNoOfModifiedFN}
            $RESP{CPSOfModifiedFN}
            $RESP{CPS}
            $RESP{IndicatorsOfModifiedFN}
            $RESP{SameAsPreviousFN }
            $RESP{Cause}
            $RESP{CauseText} Cause Text
            $RESP{CauseFound}
            $RESP{AdditionalData}
            $RESP{AdditionalDataText}
            $RESP{AdditionalDataFound}
            $RESP{TNResourceRTTI2OfModifiedFN}
            $RESP{TNResource}
            $RESP{AckRequest}


=head2 GeneratePSPatternFile

 $self->GeneratePSPatternFile();

SUBROUTINE  : GeneratePSPatternFile
DESCRIPTION : Generates an MCS-4 or MCS-9 patternfile with PANI

IN  :     Encoding
          CPS
          PANI
          Filename
OUT :     Header - array with header octet data
          Error - String with error message if applicable


=head2 GetCPSValueFromRLCMACHeader

 $self->GetCPSValueFromRLCMACHeader();

SUBROUTINE  : GetCPSValueFromRLCMACHeader
DESCRIPTION : To get CPS value from a RLC/MAC header

IN  :     $Header:          RLC/MAC Header as an array of bytes
          $Encoding:        Encoding scheme
          $Direction:      'Downlink' or 'Uplink' as a string

OUT :     $CPS              CPS as a number


=head2 GetMaxPwr

 $self->GetMaxPwr();

SUBROUTINE  : GetMaxPwr
DESCRIPTION : Returns scalar containing maximum Power of TX based on the
              number of TRXC's

IN  :
OUT : $PnMax


=head2 GetRoundTripDelayAbis

 $self->GetRoundTripDelayAbis();

SUBROUTINE  : GetRoundTripDelayAbis
DESCRIPTION : Get the round trip time from PGSL-DLDATA-REQ to PGSL-DLDATA-IND
              on Abis

IN  :     Interface - Wireshark lsu config file
          Savefile  - Tempfile to store Abis lsu log in
          Duration  - Time to log data before calculating RTT
OUT :     RTTMin  - RTT min
          RTTMax  - RTT max
          RTTAvg  - RTT average


=head2 IPTemplateModify

 $self->IPTemplateModify();

SUBROUTINE  : IPTemplateModify
DESCRIPTION : Modify Message_TEMPLATE to comply with IP

IN  :      TemplateRef => \%PGSL_STATUS_IND_Result, # copy of template
           CSAPI       => { S_CSAPI => 'FALSE',
                            Value   => undef,},
                  CSAPI VALUES (3 bits):
                    C/R = 0|1
                          0|1 RSL
                          2|  Speech
                          3|  Circuit Switched
                          4|  GPRS
                          5|6 OML
           IPOffset    => 12*8,
OUT :     None


=head2 JoinArrays

 $self->JoinArrays();

SUBROUTINE  : JoinArrays
DESCRIPTION : Join two message arrays

IN  :    Hash containing the following key:
         Array1    - Abis Message array 1
         Array2    - Abis Message array 2

OUT :    An joined array


=head2 MSSIMTransferFile

 $self->MSSIMTransferFile();

SUBROUTINE  : MSSIMTransferFile
DESCRIPTION :

IN  :     User
          Password
          LocalFilename
          RemoteFilename
OUT :     0 - OK
          1 - Error


=head2 PrintMessageArray

 $self->PrintMessageArray();

SUBROUTINE  : PrintMessageArray
DESCRIPTION : Subroutine to print all message hashes located in an array of
              hash references.

IN  :     Hash containing the following key:
          MessageArrayRef - An array of hash references

OUT :     None


=head2 ReadLanforgeSettings

 $self->ReadLanforgeSettings();

SUBROUTINE  : ReadLanforgeSettings
DESCRIPTION : To initiate LanForge

IN  :     File - Filename
OUT :     Endpoint - Lanforge endpoint name
          Port     - Lanforge port, usually 4001
          Host     - Lanforge address
          Error    - This key is set with an error msg if an error occured


=head2 ReleaseOpenChannels

 $self->ReleaseOpenChannels();

SUBROUTINE  : ReleaseOpenChannels
DESCRIPTION : Release all open channels

IN  :      Hash containing the following key:
           ChannelName  - CSData / PSData / Speech / All

OUT :      None


=head2 ResetTG

 $self->ResetTG();

SUBROUTINE  : ResetTG
DESCRIPTION : Resets the TG to the one stored in Stored TG
              (copied from subs_Broadcast)

IN  :     Cell, TG, MCTR
OUT :     Will die if errors found
Sample:   ResetTG(%StoredTG);


=head2 SCQualityReportII

 $self->SCQualityReportII();

SUBROUTINE  : SCQualityReportII
DESCRIPTION : Enable or disable SC Quality Report II

IN  :      $REQ{State} Enable or Disable
OUT :      None



=head2 SCReporting

 $self->SCReporting();

SUBROUTINE  : SCReporting
DESCRIPTION : To toggle SC Reporting On/Off

IN  :     $REQ{State} On / Off
OUT :     None


=head2 SendABMSSIM

 $self->SendABMSSIM();

SUBROUTINE  : SendABMSSIM
DESCRIPTION : To send Access Bursts

IN  :     $TS_AB              0=TS0, 1=TS1, 2=TS2 (TS = Training Sequence code)
          $BitsInAB           0 = 8 bits, 1 = 11 bits
          $TypeOfAB           0=Single, 1=Four, 2=Continous
          $UlEncoding         Uplink Encoding/CPS
          $TimeToRun          Time to run in seconds
OUT :     None


=head2 SendISConfig

 $self->SendISConfig();

SUBROUTINE  : SendISConfig
DESCRIPTION : Perform an IS confguration

IN  :     AllowRestart  - 1 (default) let the subroutine perform a restart
                            of the BTS if necessary.
                          0 inhibit restarts (useful during development)
OUT :     None


=head2 SetAbisAndTCHMode

 $self->SetAbisAndTCHMode();

SUBROUTINE  : SetAbisAndTCHMode
DESCRIPTION : Set the Abis and TCH mode

IN  :     TCHMode       - Wanted TCH mode: Static16kbps,  Static64kbps,
                                           Dynamic16kbps, Dynamic64kbps
          AbisMode      - Abis mode: TDM, SC
          TLSA          - TLSA: ON, FF
          ForceRestart  - Force a restart even id TCH and Abis mode is as
                          expected
OUT :     None


=head2 SetTLSFilteringTime

 $self->SetTLSFilteringTime();

SUBROUTINE  : SetTLSFilteringTime
DESCRIPTION : Sets TLS filtering time

IN  :       TRXC              TRXC
            TimeSlot          TN
            TLSA              On/Off
            TLSI              On/Off
            TLSFilteringTime  0-210 (10-100 with CheckSyntax = 0)
OUT :       Result hash from TSConfigRequest


=head2 StartGSLLink_EPAS

 $self->StartGSLLink_EPAS();

SUBROUTINE  : StartGSLLink_EPAS
DESCRIPTION : Starts an Allocated GSL link for EPAS feature

IN  :     %Param (created with CreateParameterHash)
OUT :     None


=head2 StartGslLink

 $self->StartGslLink();

SUBROUTINE  : StartGSLLink
DESCRIPTION : Starts an Allocated GSL link

IN  :     %Param (created with CreateParameterHash)
OUT :     None


=head2 StartLoopMSSIM

 $self->StartLoopMSSIM();

SUBROUTINE  : StartLoopMSSIM
DESCRIPTION : To start the loop function in MSSIM

IN  :     Timeout
          $CcId        (MSSIM downlink channel id)
          $LoopCcId    (MSSIM uplink channel id)
OUT :     0=OK


=head2 StartPRBS_MSSIM

 $self->StartPRBS_MSSIM();

SUBROUTINE  : StartPRBS_MSSIM
DESCRIPTION : To start the PRBS function in MSSIM

IN  :     CcId
          Downlink Encoding
          Uplink Encoding
          Pattern File Name
          PRBS Mode
OUT :     0=OK


=head2 StopGslLink

 $self->StopGslLink();

SUBROUTINE  : StopGslLink
DESCRIPTION :

SYNTAX: StopGslLink('TimeSlot' => $T);
IN  :
OUT :


=head2 StopLoopMSSIM

 $self->StopLoopMSSIM();

SUBROUTINE  : StopLoopMSSIM
DESCRIPTION : To stop the loop function in MSSIM

IN  :     CcId    (MSSIM downlink channel id)
          Timeout
OUT :     Status    (0=Ok, 1=Error)


=head2 StoreTG

 $self->StoreTG();

SUBROUTINE  : StoreTG
DESCRIPTION : Store TG parameters. This subroutin shall be followed by ResetTG
              (copied from subs_Broadcast)

IN  :
OUT :     {Cell}, {TG}, {MCTR};
Sample:   %StoredTG = StoreTG();


=head2 TXConfigMaxPower

 $self->TXConfigMaxPower();

SUBROUTINE  : TXConfig
DESCRIPTION : Configure TX to Pmax

IN  : $INST
OUT :


=head2 TscUpdate

 $self->TscUpdate();

SUBROUTINE  : TscUPdate
DESCRIPTION : To activate a PDCH channel in the MSSIM

IN  :     %Param hash, see main program for description
OUT :     CcId


=head2 UpdateGslData

 $self->UpdateGslData();

SUBROUTINE  : UpdateGslData
DESCRIPTION :

SYNTAX: UpdateGslData('TimeSlot' => $T);
IN  :
OUT :


=head2 VerifyCCUDownlinkBlockError

 $self->VerifyCCUDownlinkBlockError();

SUBROUTINE  : VerifyCCUDownlinkBlockError
DESCRIPTION : Verifies the correct occurence of Downlink Block Errors in a
              LSU file in the error case when no mesasges are sent over the
              Air interface. If the file do not match the correct behaviour,
              HandleError is called

IN  :     Hash containing the following key:

          LSU_WLogText     - File name of a text formatted LSU log file
          ChanMode         - The current channel mode

OUT :     None


=head2 findMessagesInLog

 $self->findMessagesInLog();

SUBROUTINE  : findMessagesInLog
DESCRIPTION : Subroutine to search a log file for a specific type of messages.

IN  :    Hash containing the following key:

         LogFile     - File name of the log file to search
         MessageType - A text prefix at the beginning of each line of the
                       log-file defining the message type.
                       Example: 'DL:' or 'UL:'  are valid message types for
                       an  ABIS log.

         MessageStructure - Reference to a hash containing the message structure.
                            This sturcture is used as a template for returned messages.
                            The hash should be built of smaller hashes of the form:

                            'KeyName' => { 'Offset' => 0,
                                           'Size'   => 8,
                                           'Value'  => undef,
                                           'Type'   => 'Numeric' },

                            where the Offset and Size key values define the location
                            in bits of the data corresponding to the parameter.
                            If Value is set to undef, it will be filled with the values
                            of a correpsonding parameter value of a message in the log.
                            If on the other hand a value is set for Value, that is used
                            as a filter to select only matching messages form the log.
                            Type is used to indicate if Value is a numeric value ('Numeric')
                            or and array (set as 'Array').

         PrefixRemoved - Defines the number of prefix strings each line in the log has
                         before the start of the hex-data. ( Currently it is 1 for Abis logs
                         and 4 for MSSIM logs if the logs are formatted using the substr
                         createMessageLogFromWLog and createMSSIMMessageLogFromWLog.
                         (Set to 1 by default).

OUT :    An array of messages matching the given criterias.
         Each array is a clone of the MessageStructure hash given as a parameter.



=head1 PH4  20131211   XPATHIL          XAMMELY              Re-added a necessary check in SetAbisAndTCHMode.

PH1  20130520   EWUUHOI           EHUIBXU             Add StartGSLLink_EPAS , ActivateGSL_EPAS ,ChActPacketMSSIM_EPAS ,TscUpdate


=cut

=head1 NAME

Subs_PSData


=head1 DESCRIPTION


      Copyright (C) 2006 by 
      ERICSSON AB 
      S-164 80 STOCKHOLM 
      Phone +46 8 719 0000     
      Company Registration number: 556056-6258 
      The program may be used and/or copied only with the written 
      permission from Ericsson AB, or in accordance with 
      the terms and conditions stipulated in the agreement/contract 
      under which the program has been supplied. 
      All rights reserved

			Module: 
			 subs_psdata.pm

      Author: 
       Stefan Mohlin

      Description: 
				Test program for sending Packet Switched Data from TSS.
        and to loopback data from MSSIM

        Also the psdatafunc.pm and packetfunc.pm programs are needed.
        These programs handles the actual communication.

        Perl module Telnet.pm must be stored in the perl installation
        library c:\perl\lib\Net. The module can be found in the 
        CPAN home page, www.cpan.org

        The program works for all Coding Schemas and all Abis Modes.
        It creates two files "psdata_statistics.txt" and "psdata_summary.xls"

        For more information, see document:
          User Guide Payload testing with Abisco
          2/198 17-FCD 201 33 Uen 
          (The document comes with the Abisco installation) 
         
      File Revision: 
	P1A 090811 ERATZIS Created .pm file based on psdata.pl
	P1B 090819 ERATZIS Removed some lines to solve warnings
	P1C 090915 ERATZIS Moved TS, secTS, PTA, PAL, Power to matrix in psdata.abi
	P1D 091214 ESTEMOH Updated for 1&QAM and 32QAM
	P1E 100114 ESTEMOH Added MCS-2_with_padding and MCS-6_with_padding10



=head1 REQUIRES

L<packetfunc(SaveStatistics,> 

L<psdatafunc(SendPSData)> 

L<User(Print,> 

L<Abisco_Connection(Put,> 

L<Exporter> 


=head1 METHODS

=head2 CreateList

 CreateList();

Subroutine: CreateList
Purpose:    Create a list of Encoding/CPS to use

Input:			$Param{Modulation}					GMSK, 8PSK, 16QAM or 32QAM
 						$Param{AllCPS} 							0=No, 1=Yes
Output:     None


=head2 Execute

 Execute();

Subroutine: Execute
Purpose:    To execute actions
Input:	  	Action array
Output:     None


=head2 NotSupportedEncoding

 NotSupportedEncoding();

Subroutine: NotSupportedEncoding
Purpose:    To check if an encodig is supported in a certain mode (BTTI, RTTI and PAN)

Input:			$Param{ULMode} 							BTTI or RTTI
 						$Param{DLMode} 							BTTI or RTTI
  					$Param{SendPAN}							0 or 1
 						$Param{DLEncoding}					Downlink Encoding
 						$Param{ULEncoding}  				Downlink Encoding
Output:     0=Supported, 1=NotSupported


=head2 PrepareCPS

 PrepareCPS();

Subroutine: PrepareCPS
Purpose:    To prepare CPS values for retransmission in RLC/MAC header
Input:	  	$Param{DLEncoding}
Output:     %Req hash to be used in SendPSData call


=head2 PrepareReq

 PrepareReq();

Subroutine: PrepareReq
Purpose:    To prepare some parameters for the SendPSData call

Input:	  	Encoding
Output:     @SelectedEncodings (Global)


=head2 PrintError

 PrintError();

Subroutine: PrintError
Purpose:    To print an error message
Input:	  	Result number
            Reason (text)
Output:     None


=head2 PrintHeading

 PrintHeading();

Subroutine: PrintHeading
Purpose:    To print a heading in the excel summary
Input:	  	Action
Output:     None


=head2 SaveEncoding

 SaveEncoding();

Subroutine: SaveEncoding
Purpose:    To save Encoding/CPS in @SelectedEncodings array and to
            add all CPS values for a specific Encoding.

Input:			$Param{Encoding}						Uplink or Downlink Encoding
 						$Param{AllCPS} 							0=No, 1=Yes
Output:     @SelectedEncodings (Global)


=head2 VerifyAB

 VerifyAB();

Subroutine: VerifyAB
Purpose:    To set up parameters for Access Burst verification
Input:	  	Action
Output:     None


=head2 VerifyNB

 VerifyNB();

Subroutine: VerifyNB
Purpose:    To set up parameters for Access Burst verification
Input:	  	Action
Output:     None



=cut

=head1 NAME

subs_radiotransmission


=head1 DESCRIPTION

Document number : 59/190 55-CAH 161 1607/1 Uen
MODULE          : subs_radiotransmission.pm
DESCRIPTION     : This program provides defines and subfunctions for Radio
                  Transmission tests described in TS 340/102 64-HRB 105 15 Uen

COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE        NAME              REVIEW      COMMENT
A     20101022    Syntronic AB,     XWIKMAR     File created. Approved UABTOH.
                  David Melin

B     20110914    XTOBSEM           XPRRANA     Added DisableConfigEnableBTS and Send_SysInfo
PC1   20120525    XANSBEM           EDAMELI     Solved TR HP91303
PC2   20121130    XSALNIC           XANSBEM     Solved TR HP91303
                                                Implemented ActiveTG, cleaned up code.
                                                Removed unused functions and variables
PC3   20130228    XANSBEM           XHENRMA     Updated SetBCC_BTS, workaround for problem in HQ96955


=head1 REQUIRES

L<lib> 

L<DBI> 

L<mssim_def()> 

L<dbLog> 

L<mssim_sub> 

L<mssim> Include LSU/MSSIM subroutines

L<AbiscoFunc2> 

L<Abisco_Connection> Abisco included subroutines

L<Hash::Util> 

L<subinit_radiotransmission> 

L<English> 

L<diagnostics> 


=head1 METHODS

=head2 ChActMSSIM

 ChActMSSIM();

Alias variables from main file using typeglob assignment
use vars     qw( $BTS %mssimC);
*BTS      = *::BTS;
*mssimC   = *mssim_def::mssimC;           # Hash with mssim Codes
SUBROUTINE  :     ChActMSSIM
DESCRIPTION :     To activate a channel in the MSSIM
IN  :             Hash containing the following key(s):
                   Bypass - (set to '1' to bypass MSSIM automatic LAPDm handling)
OUT :             $CcId


=head2 ChRelMSSIM

 ChRelMSSIM();

SUBROUTINE  :     ChRelMSSIM
DESCRIPTION :     To release a channel in the MSSIM
IN  :             None
OUT :             None


=head2 CheckL3Data

 CheckL3Data();

SUBROUTINE  :     CheckL3Data
DESCRIPTION :     To compare received L3Data to expected L3Data
IN  :             Hash containing the following key(s):
                   Expect   - Expected L3Data
                   Recieved - Received L3Data
OUT :             Returns 1 if data differs, else 0


=head2 DisableConfigEnableBTS

 DisableConfigEnableBTS();

SUBROUTINE  :     DisableConfigEnableBTS
DESCRIPTION :     To change channel combination for selected TS
IN  :             %Input ->BTS, TG, TRXC, MO, CMB, TS, BS_PA, BS_AG
OUT :             None


=head2 GetActiveCell

 GetActiveCell();

SUBROUTINE  : GetActiveCell
DESCRIPTION : Return the Cell containing input TRXC

IN  :         TRXC => $TRXC
OUT :         Cell number


=head2 GetMSSIM_RxBlkCnt

 GetMSSIM_RxBlkCnt();

SUBROUTINE  :     GetMSSIM_RxBlkCnt
DESCRIPTION :     Requests information about the number of received BCCH/CCCH blocks
                   from the MSSIM
IN  :             None
OUT :             RxBlkCnt   Number of received blocks


=head2 RestartBTS

 RestartBTS();

SUBROUTINE  :     RestartBTS
DESCRIPTION :     Restarting the BTS
IN  :             Hash containing the following key(s):
                   BTS  - Abisco connection parameter
OUT :             None


=head2 SendDisableRequest

 SendDisableRequest();

SUBROUTINE  :     SendDisableRequest
DESCRIPTION :     Sends a DISABLE REQUEST over Abis to disable TX.
IN  :             Hash containing the following key(s):
                   BTS     - Abisco connection parameter
OUT :             None


=head2 SendEnableRequest

 SendEnableRequest();

SUBROUTINE  :     SendEnableRequest
DESCRIPTION :     Sends a ENABLE REQUEST over Abis to enable TX.
IN  :             Hash containing the following key(s):
                   BTS     - Abisco connection parameter
OUT :             None


=head2 SendTXConfigRequest

 SendTXConfigRequest();

SUBROUTINE  :     SendTXConfigRequest
DESCRIPTION :     Sends a TX CONFIG REQUEST over Abis.
IN  :             Hash containing the following key(s):
                   BTS     - Abisco connection parameter
OUT :             None


=head2 SetBCC_BTS

 SetBCC_BTS();

SUBROUTINE  :     SetBCC_BTS
DESCRIPTION :     Sets BCC in BTS with UpdateCell. Note that this routine doesn't
                   perform a complete start of the BTS.
IN  :             Hash containing the following key(s):
                   BTS     - Abisco connection parameter
                   BCC     - BCC parameter
OUT :             Returns 1 if cell was updated, otherwise 0



=cut

=head1 NAME

Subs_regtraff


=head1 DESCRIPTION

Document number : 240/190 55-CAH 161 1607/1
MODULE          : Subs_regtraff
DESCRIPTION     : Contains subroutines that will be used in Regression Test for Traffic,

COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE        NAME                    REVIEW          COMMENT
PA1   20130828    ESTEMOH                                 Created
PA2   20130919    ESTEMOH                                 Fix COMB -> NCOMB
PA3   20131021    ESTEMOH                                 Updated for 1 TRX in MSSIM
PA4   20131106    ESTEMOH                                 TC 1005 added


=head1 REQUIRES

L<TrafficStatistics> 

L<tstm> 

L<BTSCapabilities> 

L<Hash::Util> 

L<English> 

L<Storable> 

L<lsuConfig> 

L<wireshark> 

L<PerlFunc> 

L<dbLog> 

L<AbiscoFunc2> 

L<Abisco_Connection> 

L<SubInit_regtraff> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 AllocateICP

 AllocateICP();

SUBROUTINE  : AllocateICP
DESCRIPTION : To allocate a free ICP number
IN  : trx  => TRX number
OUT : ICP number


=head2 Allocated

 Allocated();

SUBROUTINE  : Allocated
DESCRIPTION : To find out if a TG, TRX, TS and SucCh is already allocated
IN  : tg   => TG number
      trx  => TRX number
      ts   => Timeslot number
      list => The list (CCCH or SDCCH) in the Cell configuration
OUT : 0 = Not used, 1 = Used


=head2 BSPowerControl

 BSPowerControl();

SUBROUTINE  : BSPowerControl
DESCRIPTION : To send BS Power Control
IN  : cell          => Cell number
      lmsid         => LMSID number
      newValue      => BS Power value
OUT : None


=head2 CallSetupMT

 CallSetupMT();

SUBROUTINE  : CallSetupMT
DESCRIPTION : To set up a Mobile Terminated call
IN  : cell      => Cell number
      lmsid     => LMSID number
      vamosCall => 0 = No, 1 = First in pair, 2 = Second in pair
OUT : None


=head2 CheckCapabilities

 CheckCapabilities();

SUBROUTINE  : CheckCapabilities
DESCRIPTION : To check capabilities of the BTS. The subroutine will change
              a parameter matrix (%capabilHash) value if a feature is not supported.
IN  : TG   =>
      TRXC =>
OUT : None


=head2 CheckForChangedMsg

 CheckForChangedMsg();

SUBROUTINE  : CheckForChangedMsg
DESCRIPTION : To compare two messages and notify difference
IN  : time         => Time in seconds from the Tshark file
      msg          => Message from the Tshark file
      startTime    => Start time in seconds from the Tshark file
      prevMsg      => Previous message
      countChanges => Number of different messages
OUT : startTime    => Start time in seconds from the Tshark file
      prevMsg      => Previous message
      countChanges => Number of different messages


=head2 CheckMeasurements

 CheckMeasurements();

SUBROUTINE  : CheckMeasurements
DESCRIPTION : To calculate the average value of BS Power or MS Power
              based on a number of Measurement Results
IN  : number        => Number of MeasurementResults to check
      type          => BSPower or MSPOwer
OUT : averageValue  => Average Value


=head2 Cleanup

 Cleanup();

SUBROUTINE  : Cleanup
DESCRIPTION : To perform common cleanup
IN  : lmsid => LMSID number
OUT : None


=head2 CloseTlmLogging

 CloseTlmLogging();

SUBROUTINE  : CloseTlmLogging
DESCRIPTION : Close TLM logging of the Abis interface
IN  : None
OUT : None


=head2 CloseTsharkLogging

 CloseTsharkLogging();

SUBROUTINE  : CloseTsharkLogging
DESCRIPTION : Close Tshark logging of the air interface
IN  : None
OUT : None


=head2 ConfigAndStartBTS

 ConfigAndStartBTS();

SUBROUTINE  : ConfigAndStartBTS
DESCRIPTION : To configure the TG and cell according to the TC matrix and make a
              Complete Start of the bTS (if needed)
IN  : None
OUT : None


=head2 CopySetupParam

 CopySetupParam();

SUBROUTINE  : CopySetupParam
DESCRIPTION : To copy setup parameters for the actual type
IN  : type  => CALL, INTRACELLHANDOVER, INTERCELLHANDOVER, VAMOS or SMS
OUT : setupParam hash


=head2 DeallocateICP

 DeallocateICP();

SUBROUTINE  : DeallocateICP
DESCRIPTION : To deallocate an ICP number
IN  : trx  => TRX number
      icp  => ICP number
      ci   => CI number
OUT : None


=head2 DisconnectCallMT

 DisconnectCallMT();

SUBROUTINE  : DisconnectCallMT
DESCRIPTION : To make moble terminated disconnect
IN  : lmsid         => LMSID number
      checkResponse => 0=No, 1=Yes
OUT : None


=head2 GetSetupParam

 GetSetupParam();

SUBROUTINE  : GetSetupParam
DESCRIPTION : To randomly select TG, TRX, TS and Subchannels
IN  : type  => CALL, INTRACELLHANDOVER, INTERCELLHANDOVER, VAMOS or SMS
OUT : None


=head2 InitiateTlmLogging

 InitiateTlmLogging();

SUBROUTINE  : InitiateTlmLogging
DESCRIPTION : Start logging the Abis interface with TSS/TLM
IN  : PGM   => Program name
      TC    => Test Case number
      SUBTC => Sub Test Case number
OUT : File name of the log file


=head2 InitiateTsharkLogging

 InitiateTsharkLogging();

SUBROUTINE  : InitiateTsharkLogging
DESCRIPTION : Start logging the air interface with MSSIM/Tshark
IN  : PGM => Program Name
OUT : File Name of the log file


=head2 IntercellhandoverTCH

 IntercellhandoverTCH();

SUBROUTINE  : IntercellhandoverTCH
DESCRIPTION : To make Intercell Handover
IN  : cell      => Cell number
      lmsid     => LMSID number
      vamosCall => 0 = No (VAMOS is not supported for Intercell Handover)
OUT : None


=head2 IntracellhandoverTCH

 IntracellhandoverTCH();

SUBROUTINE  : IntracellhandoverTCH
DESCRIPTION : To make Intracell Handover
IN  : cell      => Cell number
      lmsid     => LMSID number
      vamosCall => 0 = No, 1 = First in pair, 2 = Second in pair
OUT : None


=head2 MSPowerControl

 MSPowerControl();

SUBROUTINE  : MSPowerControl
DESCRIPTION : To send MS Power Control
IN  : cell      => Cell number
      lmsid     => LMSID number
      newValue  => MS Power value
OUT : None


=head2 OnOffMeasurements

 OnOffMeasurements();

SUBROUTINE  : OnOffMeasurements
DESCRIPTION : To turn on or off sending of Measurement Results from TSS/BG
IN  : reporting => On or Off
OUT : None


=head2 PowerCheck

 PowerCheck();

SUBROUTINE  : PowerCheck
DESCRIPTION : To verify BSPower or MSPower
IN  : cell          => Cell number
      lmsid         => LMSID number
      type          => "BSPower" or "MSPower"
      newValue      => Power change value
      expectedDiff  => Expected Difference
OUT : 0 = Power Change OK or not performed, 1 = Power Change not OK


=head2 ReadAbiscoConfig

 ReadAbiscoConfig();

SUBROUTINE  : ReadAbiscoConfig
DESCRIPTION : To read and save ABISCO TG and Cell configuration.
              The configuration is stored in a hash addressed by the global
              variable tgAnchor
              The global variables $TG and $tgPointer are set to the first TG in the list
              The global variable $cellPointer is set to the first cell in the TG
IN  :	  None
OUT :   None


=head2 SACCHInfoModify

 SACCHInfoModify();

SUBROUTINE  : SACCHInfoModify
DESCRIPTION : To send SACCHInfoModify including Sys Info 6
IN  : lmsid     => LMSID number
                => Sys Info 6 message
OUT : None


=head2 SMSSetupMT

 SMSSetupMT();

SUBROUTINE  : SMSSetupMT
DESCRIPTION : To send an SMS
IN  : cell       => Cell number
      lmsid      => LMSID number
      activeCall => 0 = No, 1=Yes
OUT : None


=head2 StartBTS

 StartBTS();

SUBROUTINE  : StartBTS
DESCRIPTION : To make Complete Start of BTS
IN  : None
OUT : None


=head2 UsedInList

 UsedInList();

SUBROUTINE  : UsedInList
DESCRIPTION : To find out if a TRX and TS is part of a list
IN  : trx  => TRX number
      ts   => Timeslot number
      list => The list (CCCH or SDCCH) in the Cell configuration
OUT : 0 = Not used, 1 = Used


=head2 VamosPowerOffset

 VamosPowerOffset();

SUBROUTINE  : VamosPowerOffset
DESCRIPTION : To configure VAMOS Power Offset (if not already done)
IN  : None
OUT : 0 = no update, > 1 update needed


=head2 VerifySysInfo

 VerifySysInfo();

SUBROUTINE  : VerifySysInfo
DESCRIPTION : To read a Tshark log and verify that Sys Info 6 has been changed
IN  : FilePath  => Path to Tshark file
OUT : None


=head2 didHopping

 didHopping();

SUBROUTINE  : didHopping
DESCRIPTION : To check if hopping was performed or not

IN  : None
OUT : 0=Hopping not performed, 1=hopping performed,


=head2 getPrbsStatistics

 getPrbsStatistics();

SUBROUTINE  : getPrbsStatistics
DESCRIPTION : To receive PRBS statistics from the Test Manager and to
              check the percent of failure

IN  : instanceNo => Instance number for TSTM TTA
      lmsid      => LMSID number
OUT : None


=head2 initSetupParamHash

 initSetupParamHash();

SUBROUTINE  : initSetupParamHash
DESCRIPTION : To initialize the SetupParam Harsh
              Timeslots used for BCCH, CCCH and SDCCH are reserved
IN  : tg  => TG Number
OUT : None


=head2 ltsActivateRACH

 ltsActivateRACH();

SUBROUTINE  : ltsActivateRACH
DESCRIPTION : To activate sending of Channel Request from MSSIM

IN  : None
OUT : None


=head2 ltsBuildCellHash

 ltsBuildCellHash();

SUBROUTINE  : ltsBuildCellHash
DESCRIPTION : To build a hash with Cell configuration for BTS

IN  : None
OUT : None


=head2 ltsCalcCallRate

 ltsCalcCallRate();

SUBROUTINE  : ltsCalcCallRate
DESCRIPTION : To calculate the call rate and VAMOS call rate

IN  : None
OUT : callRate    => Call rate in percent usage of TCH channels
      minCallRate => Minimum call rate in call/s
      maxCallRate => Maximum call rate in call/s


=head2 ltsCalcLoadRate

 ltsCalcLoadRate();

SUBROUTINE  : ltsCalcLoadRate
DESCRIPTION : To calculate the rate of Call, SMS, Paging and Channel Request

IN  : None
OUT : None (global hash ltsLoadRate updated)


=head2 ltsConfigureCell

 ltsConfigureCell();

SUBROUTINE  : lstConfigureCell
DESCRIPTION : To configure Air Resource and Cell

IN  : tg         => TG number
      cell       => Cell number
OUT : None


=head2 ltsConfigureCellLoad

 ltsConfigureCellLoad();

SUBROUTINE  : lstConfigureCellLoad
DESCRIPTION : To configure Load Parameters for a cell

IN  : tg         => TG number
      cell       => Cell number
OUT : None


=head2 ltsConfigureOther

 ltsConfigureOther();

SUBROUTINE  : ltsConfigureOther
DESCRIPTION : To configure special parameters:
						  - UpdateSystemSettings
						  - SMSText
						  - ResetCounters
						  - ConfigureDebug
						  - SetIASReporting (Turn off "Immediate Assign Sent" from BG)
						  - ClearChannelStatistics
						  - ClearTrafficStatistics
						  - StartStatistics
							  * MessagesAndTimeouts
							  * EstablishmentCause
							  * ReturnCodes
							  * TimeMeasurements
							  * MeasurementResults (optional)
							  * MeasurementResultsMs (optional)

IN  : tg         => TG number
      cell       => Cell number
OUT : None


=head2 ltsConfigureSim

 ltsConfigureSim();

SUBROUTINE  : ltsConfigureSim
DESCRIPTION : To reset the LTS and configure SIM cards

IN  : tg         => TG number
      cell       => Cell number
OUT : None


=head2 ltsConfigureVamos

 ltsConfigureVamos();

SUBROUTINE  : ltsConfigureVamos
DESCRIPTION : To configure VAMOS parameters for LTS

IN  : None
OUT : None


=head2 ltsDeactivateRACH

 ltsDeactivateRACH();

SUBROUTINE  : ltsDeactivateRACH
DESCRIPTION : To deactivate sending of Channel Request from MSSIM

IN  : None
OUT : None


=head2 ltsGetPeriodicReport

 ltsGetPeriodicReport();

SUBROUTINE  : ltsGetPeriodicReport
DESCRIPTION : To receive statistics in Periodic Report

IN  : tg         => TG number
      cell       => Cell number
OUT : None


=head2 ltsGetSetupParam

 ltsGetSetupParam();

SUBROUTINE  : ltsGetSetupParam
DESCRIPTION : This routine builds a setupParamHash with TRXs used for LTS (All TRXs in the Cell).
              The only reason for this is that the InitiateTlmLogging routine needs to know
              for which TRXs TLM logging should be started.

IN  : TG =>
OUT : None


=head2 ltsRunTest

 ltsRunTest();

SUBROUTINE  : ltsRunTest
DESCRIPTION : To execute the LTS test

IN  : tg         => TG number
      cell       => Cell number
OUT : None


=head2 ltsVerifyLoadResult

 ltsVerifyLoadResult();

SUBROUTINE  : ltsVerifyLoadResult
DESCRIPTION : To calculate the limit for acceptable results

IN  : expected => Expected result
      achieved => Achieved result
      text     => Type of result
OUT : None (global hash ltsLoadRate updated)


=head2 numerically

 numerically();

=head2 releaseTstm

 releaseTstm();

SUBROUTINE  : releaseTstm
DESCRIPTION : To release the Test Manager connection to the MSSIM and the TTR

IN  : None
OUT : None



=cut

=head1 NAME

subs_rehandling


=head1 DESCRIPTION

Document number: 223/190 55-CAH 161 1607/1 Uen
MODULE      : subs_rehandling
DESCRIPTION :

COPYRIGHT © : ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV DATE      NAME      REVIEW    COMMENT


=head1 REQUIRES

L<English> 

L<DVTFunc> 

L<Abisco_Connection> 

L<dbLog> 

L<subinit_rehandling> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 CompareArrays

 CompareArrays();

Subroutine: CompareArrays
Purpose:   Compare two arrays
Input:     References to Array 1-2
Output:    1|0 - (equal| different)

=head2 CompleteStartBTS

 CompleteStartBTS();

Subroutine: CompleteStartBTS
Purpose:    Do a complete start of BTS
Input:      None
Output:     None


=head2 ConfigReadMO

 ConfigReadMO();

--FUNCTION : ConfigReadMO
COMMENT  : Get current parameters for wanted MO
Syntax   : ConfigReadMO(MO => $MO);
IN       : MO type
OUT      : %Resp
--

=head2 ConnectMO

 ConnectMO();

--FUNCTION : ConnectMO
COMMENT  : Sends ConnectCommand to MO defined by MOClass, InstanceNo
           and AssosiatedSOInstance and checks ConnectComplete.
IN           : Optionally one or more of the following
           keys: TRXC, MO, MOState, INST, ASOInst
OUT           : None
--

=head2 ConnectResetStart

 ConnectResetStart();

SUBROUTINE  : ConnectResetStart
DESCRIPTION : ConnectResetStart

IN  : Optionally one or more of the following
      keys: TRXList, MO
OUT : None


=head2 DecodeMCTRRecord

 DecodeMCTRRecord();

Subroutine:   DecodeMCTRRecord
Purpose:
Input:  %RefMCTRCaps
Output:


=head2 DisableMO

 DisableMO();

--FUNCTION : DisableMO
COMMENT  : Sends DisableRequest to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks DisableResult.
IN           : Optionally a reference to a Hash
           containing one or more of the following
           keys: TRXC, MO, MOState, ASOInst, ReasonCode, ResultCode
           ASOInst, INST
Out           : None
--

=head2 EnableMO

 EnableMO();

--FUNCTION : EnableMO
COMMENT  : Sends EnableRequest to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks EnableResult.
IN             : Optionally a reference to a Hash containing
           one or more of the following
           keys: TRXC, MO, MOState, ASOInst
OUT             : None
--

=head2 EstablishResetStart

 EstablishResetStart();

-Subroutine: EstablishResetStart
Purpose   : Establish, Reset and Start CF/TRXCs in list
IN        : TRXList (if SO is TRXC
OUT       : None
-

=head2 GetMCTRRecords

 GetMCTRRecords();

--FUNCTION : GetMCTRRecords
COMMENT  : Returns MCTRRecords from Capabilities in CF
IN         -
OUT      : @MCTRRecords
--

=head2 MonitorTrxcMctrTablesOnDVT

 MonitorTrxcMctrTablesOnDVT();

SUBROUTINE  : MonitorTrxcMctrTablesOnDVT
DESCRIPTION :

IN  :
OUT : $HoppingState, 'On', 'Off' or 'On not C0'


=head2 ResetMO

 ResetMO();

--FUNCTION : ResetMO
COMMENT  : Sends ResetCommand to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks ResetComplete.
IN           : Optionally one or more of the following
           keys: TRXC, MO, MOState, INST, ASOInst, BACKCOMP
OUT           : None
--

=head2 SplitString

 SplitString();

SUBROUTINE  : SplitString
DESCRIPTION : Returns a list with splitted string (Delimiter: Whitespace)

IN  : $String - as variable name says
OUT : @String - list with splitted string


=head2 StartMO

 StartMO();

--FUNCTION : StartMO
COMMENT  : Sends StartRequest to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks StartResult.
IN           : Optionally one or more of the following
           keys: TRXC, MO, INST, ASOInst
OUT           :
--


=cut

=head1 NAME

subs_repsacch


=head1 DESCRIPTION

Document number:  26/190 55-CAH 161 1607/1 Uen
MODULE      :     subs_repsacch.pm 
DESCRIPTION :     This program provides defines and subfunctions 
                  for repeated SACCH tests

COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258 
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE       NAME             REVIEW      COMMENT
A     20100920   Syntronic AB/    ERAKOSI     File created. Approved UABTOH.
                 Marika Gewalli


=head1 REQUIRES

L<lib> 

L<DBI> 

L<mssim_sub(> 

L<mssim(> 

L<PerlFunc(PrettyPrint)> 

L<AbiscoFunc2(> 

L<Abisco_Connection(> 


=head1 METHODS

=head2 ChActBTS

 ChActBTS();

Subroutine: ChActBTS
Purpose:    To activate a channel in the BTS
Input:	  	None
Output:     None


=head2 ChActMSSIM

 ChActMSSIM();

Subroutine: ChActMSSIM
Purpose:    To activate a channel in the MSSIM
Input:	  	%Param hash, see main program for description
Output:     CcId


=head2 ChRelBTS

 ChRelBTS();

Subroutine: ChRelBTS
Purpose:    To release a channel in the BTS, based on par hash
Input:	  	None
Output:     None


=head2 ChRelMSSIM

 ChRelMSSIM();

Subroutine: ChRelMSSIM
Purpose:    To release a channel in the MSSIM
Input:	  	%Param hash, see main program for description
Output:     None


=head2 CheckAbiscoConfig

 CheckAbiscoConfig();

my %Result 			= (
Result	 	=> Pass,
ErrCount 	=> 0,
ErrMsg 		=> ""
);
Subroutine:	CheckAbiscoConfig
Purpose:    To verify Cell existence in abisco
						Verify CBCH Indicator set to Yes
						Verify that no more than one SDCCH/8 is configured on trxc1 ts1
Input:	  	$BTS (Abisco connection parameter)	TODO: Not needed
Output:     Will die if errors found


=head2 CheckL3Data

 CheckL3Data();

Subroutine:	CheckL3Data
Purpose:    To compare received L3Data to expected L3Data
Input:	  	Expected L3Data
						Received L3Data
Output:     Returns 1 if data differs, else 0


=head2 CheckTable

 CheckTable();

Subroutine: CheckTable
Purpose:    To check if table is in used database
Input:			Filename
						Tablename
Output:     1 for true, 0 for false


=head2 EstablishReqMSSIM

 EstablishReqMSSIM();

Subroutine: EstablishReqMSSIM
Purpose:    To send Establish Request to MSSIM and receive EstablishIndication from Abisco
Input:	  	$BTS, $Sapi, $Chan, @L3Data
Output:     None


=head2 GetDateTime

 GetDateTime();

Subroutine: GetDateTime
Purpose:    Formats date and time
Input:	  	None
Output:     Formatted string with date and time


=head2 GetResult

 GetResult();

Subroutine: GetResult
Purpose:    Returns the TC result value
Input:	  	None
Output:     TC result value


=head2 HandleError

 HandleError();

Subroutine: HandleError
Purpose:    Performs necessary shutdowns and kills the program when an
						error occurs. It also log the errors and sets the TC result.
Input:	  	$ErrMsg		(Contains information of the error cause)
Output:     None


=head2 InitResult

 InitResult();

Subroutine: InitResult
Purpose:    To initiate the Result hash
Input:	  	None
Output:     None


=head2 ReceiveAbisco

 ReceiveAbisco();

Subroutine: ReceiveAbisco
Purpose:    To receive a spontanious message from Abisco
Input:			Timeout value
	  	  		Expected message
						Supress, "SupressError" if HandleError should not be called
	      		L3Data of expected message
Output:     CauseValue


=head2 ReceiveMeasurmentResultNormal

 ReceiveMeasurmentResultNormal();

Subroutine: ReceiveMeasurmentResultRepeated
Purpose:    Receives Measurment Result and checks that SBRI is undefined,
						checks that repeated sacch uplink is off
Input:			Timeout value
	  	  		Expected message
						Supress, "SupressError" if HandleError should not be called
Output:     CauseValue


=head2 ReceiveMeasurmentResultRepeated

 ReceiveMeasurmentResultRepeated();

Subroutine: ReceiveMeasurmentResultRepeated
Purpose:    Receives Measurment Result and checks that SBRI bit toggles
						between Original(00) and Repeated(01)
Input:			Timeout value
	  	  		Expected message
						Supress, "SupressError" if HandleError should not be called
Output:     CauseValue


=head2 ReceiveSystemInfo

 ReceiveSystemInfo();

Subroutine: ReceiveSystemInfo
Purpose:    Recieve SystemInfo frames as lapdmDL_UNITDATA_IND where SI is choosen
						System Info version, check that SRO flag is set
						specific for 3020_01.abi
Input:	  	$T200
						$SI: SI5 = 29, SI5bis = 5, SI6 = 30
Output:     %Param


=head2 ReceiveSystemInfoAllNormal

 ReceiveSystemInfoAllNormal();

Subroutine: ReceiveSystemInfoAllNormal
Purpose:    Recieve SystemInfo frames two and two
Input:	  	$T200
Output:     %Param


=head2 ReceiveSystemInfoAllNormalLapdm

 ReceiveSystemInfoAllNormalLapdm();

Subroutine: ReceiveSystemInfoAllNormal
Purpose:    Recieve SystemInfo frames two and two
Input:	  	$T200
Output:     %Param


=head2 ReceiveSystemInfoAllRepeated

 ReceiveSystemInfoAllRepeated();

Subroutine: ReceiveSystemInfoAllRepeated
Purpose:    Recieve SystemInfo frames two and two
Input:	  	$T200
Output:     %Param


=head2 ReceiveSystemInfoAllRepeatedLapdm

 ReceiveSystemInfoAllRepeatedLapdm();

Subroutine: ReceiveSystemInfoAllRepeatedLapdm
Purpose:    Recieve SystemInfo frames two and two
Input:	  	$T200
Output:     %Param


=head2 RepeatedSACCHControlSub

 RepeatedSACCHControlSub();

Subroutine: RepeatedSACCHControlSub
Purpose:		Activates and Deactivates Repeated SACCH
Input:	  	$BTS
						$RSDLAct   'Deactivate' or 'Activate'
						$RSULAct   'Deactivate' or 'Activate'
Output:     None
Added: 			090805 XYNMARG


=head2 Report

 Report();

Subroutine: Report
Purpose:    To send log text from the Result hash to file.
Input:	  	None
Output:     None


=head2 SACCHInfoModify5bis

 SACCHInfoModify5bis();

Subroutine: SACCHInfoModify5bis
Purpose:    Send Sacch Info Modify 5bis on abis
Input:	  	$BTS
Output:     None


=head2 SACCHInfoModify5ter

 SACCHInfoModify5ter();

Subroutine: SACCHInfoModify5ter
Purpose:    Send Sacch Info Modify 5ter on abis
Input:	  	$BTS
Output:     None


=head2 SACCHInfoModifyOff

 SACCHInfoModifyOff();

Subroutine: SACCHInfoModifyOff
Purpose:    Send Sacch Info Modify Off on abis
Input:	  	$BTS, $InfoType: SI5, SI5BIS, SI5TER, SI6
Output:     None


=head2 SendDeliveryReportAbisco

 SendDeliveryReportAbisco();

Subroutine: SendDeliveryReportAbisco
Purpose:    To receive a spontanious message from Abisco
Input:			Timeout value
	  	  		Expected message
						Supress, "SupressError" if HandleError should not be called
	      		L3Data of expected message
Output:     CauseValue


=head2 SendDeliveryReportWithoutRepsacch

 SendDeliveryReportWithoutRepsacch();

Subroutine: SendDeliveryReportWithoutRepsacch
Purpose:    Send SMS from MSSIM/receive SMS on abisco
Input:			$BTS
Output:     None


=head2 SendMeas

 SendMeas();

Subroutine: SendMeas
Purpose:  	To send Measurement Reports
Input:	  	L2 Header
						Measurement Report contents (array)
Output:


=head2 SendMultiPurposeReq

 SendMultiPurposeReq();

Subroutine: SendMultiPurposeReq
Purpose:    To send a downlink message.
Input:	  	SAPI
						L3Data
Output:     None


=head2 SendSMSWithoutRepsacch

 SendSMSWithoutRepsacch();

Subroutine: SendSMSWithoutRepsacch
Purpose:    Send SMS from MSSIM/receive SMS on abisco
Input:			$BTS
Output:     None


=head2 SendShortMessageMSSIM

 SendShortMessageMSSIM();

Subroutine: SendShortMessageMSSIM
Purpose:    Send SMS from MSSIM/receive SMS on abisco
Input:	  	$BTS, $Sapi, $Chan, @L3Data
Output:     None


=head2 SetMeasurementReportingBTS

 SetMeasurementReportingBTS();

Subroutine: SetMeasurementReporting
Purpose:		Activates and Deactivates Measurment reporting
Input:			$Status: 'On' or 'Off'
Output:     None
Added: 			090807 XYNMARG


=head2 WriteLog

 WriteLog();

Subroutine: WriteLog
Purpose:    To write a message to the logfile and/or console window
Input:	  	Text string
						Type (FILE or CONSOLE)
Output:     None



=cut

=head1 NAME

Subs_RFPower


=head1 DESCRIPTION

Document number : 208/190 55-CAH 161 1607/1  Uen
MODULE          : subs_atrasup.pm
DESCRIPTION     : This file specifies subroutines for 4848/4837 scripts
                  RF Power Management

COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE        NAME                  REVIEW            COMMENT
A     2011-11-17  QRADGUT               XPRRANA           First version
                                                          Modified SetTG.
                                                          Added ModifySpeech,CheckPowerUtilsReport
                                                          and CheckPowerUtilsMeasOnDVT
                                                          Updated CheckBackOffInLog, Fix TR HO38954/HO38967
                                                          Fix bug in ConfigMCTR.
                                                          Added subs CreateResultFile/SaveInResultFile/CalculateMCTROcts
                                                          Fix ReceiveAbiscoMessage
                                                          Modified CheckMonitorByNameOnDVT.
PB1   2011-12-06  QRADGUT               XPRRANA           Updated to FTS F.
                                                          Fix TR HP16366 (monitor reading improvement).
                                                          Updated according to perlcritic.
PB2   2012-02-08  QRADGUT               XPRRANA           Added functions to provide support for RRUS12 and mixed mode
PB3   2012-02-22  QRADGUT               XPRRANA           Added CompareArrays. Changed FetchMCTRInstancesUnderTest.


=head1 REQUIRES

L<File::Copy> 

L<diagnostics> Produce verbose warning diagnostics

L<Carp> 

L<English> 

L<DVTFunc> 

L<AbiscoFunc2> 

L<Abisco_Connection> 

L<Storable> 

L<dbLog> 

L<PerlFunc> 


=head1 METHODS

=head2 ActivateSpeech

 ActivateSpeech();

Subroutine: ActivateSpeech
Purpose:    Activate speech on an activated channel
Input:
Output:


=head2 AllocateGslLink

 AllocateGslLink();

Subroutine: AllocateGslLink
Purpose:    Allocate Gsl Link
Input:
Output:


=head2 BSPowerControl

 BSPowerControl();

 Subroutine:  BSPowerControl
Purpose: Send BSPowerControl
Input:		$TG, $TRXC, $TS, $lChannelType, $BSPower
Output:


=head2 CalculateBackoffStatistics

 CalculateBackoffStatistics();

Subroutine: CalculateBackoffStatistics
Purpose:
Input:
Output:


=head2 CalculateMCTROcts

 CalculateMCTROcts();

Subroutine: CalculateMCTROcts
Purpose:    Calculate Oct1 and Oct2 in MCTR Config Request message
Input:      Resttrxc, TRXCsCaps
Output:     Oct1 and Oct2


=head2 CallSetUp

 CallSetUp();

 Subroutine:  CallSetUp
Purpose: Setting up a Mobile Terminated call
Input:		$TG, $TRXC, $TS, $TCHSubCH, $SDCCHSubCH
Output:


=head2 Cases

 Cases();

Subroutine: Cases
Purpose:
Input:
Output:


=head2 ChActImmAssignBTS

 ChActImmAssignBTS();

Subroutine: ChActImmAssignBTS
Purpose:    Activate an immediate assign channel in the BTS
Input:      Hash with following keys: TG, TRXC, TS, ChType, TypeOfCh, ChRate, AlgOrRate
Output:     Response message


=head2 ChActNormalAssignBTS

 ChActNormalAssignBTS();

Subroutine: ChActNormalAssignBTS
Purpose:    Activate a channel in the BTS
Input:      Hash with following keys: TG, TRXC, TS, ChType, TypeOfCh, ChRate, AlgOrRate
Output:     Response message


=head2 ChannelActPacketChannel

 ChannelActPacketChannel();

Subroutine: ChannelActPacketChannel
Purpose:    Activate a channel in the BTS
Input:      Hash with following keys: TG, TRXC, TS, ChType, TypeOfCh, ChRate, AlgOrRate
Output:     Response message


=head2 CheckAvailMCTR

 CheckAvailMCTR();

--FUNCTION : CheckAvailMCTR
COMMENT  : Check number of MCTRs available
IN       : -
OUT      : $Resp{MCTRInstance}
--

=head2 CheckBackOffInLog

 CheckBackOffInLog();

--FUNCTION : CheckBackOffInLog
COMMENT  : Check Back Off Control Command in Log /after TFConfig Request and before TSConfig(s)
IN           :
OUT          : 0| 1 -> notOK | OK
--

=head2 CheckBackOffMeasOnDVT

 CheckBackOffMeasOnDVT();

--FUNCTION : CheckBackOffMeasOnDVT
COMMENT  : Check Backoff counters on each TRXC
IN           :
OUT          :
--

=head2 CheckBackOffReport

 CheckBackOffReport();

Subroutine: CheckBackOffReport
Purpose:    Compare received BackOff Report vs Expected
Input:      RefReport (received  Report)
            RefExpBackOffStats (expected Report) (server for expected message)
Output:     0 | 1 - check fail | OK


=head2 CheckMonitorByNameOnDVT

 CheckMonitorByNameOnDVT();

--FUNCTION : CheckMonitorByNameOnDVT
COMMENT  :
IN           :
OUT          :
--

=head2 CheckNumberOfTRXC

 CheckNumberOfTRXC();

Subroutine: CheckNumberOfTRXC
Purpose:
Input:      nroftrxcs
Output:


=head2 CheckPowerUtilsMeasOnDVT

 CheckPowerUtilsMeasOnDVT();

--FUNCTION : CheckPowerUtilsMeasOnDVT
COMMENT  :
IN           :
OUT          :
--

=head2 CheckPowerUtilsReport

 CheckPowerUtilsReport();

Subroutine: CheckPowerUtilsReport
Purpose:    Compare received PowerUtils Report vs Expected
Input:      RefReport (received  Report)
            RefExpPowerUtilsStats (expected Report) (server for expected message)
Output:     0 | 1 - check fail | OK


=head2 CheckStatisticsContent

 CheckStatisticsContent();

Subroutine: CheckStatisticsContent
Purpose:
Input:
Output:


=head2 CompareArrays

 CompareArrays();

Subroutine: CompareArrays
Purpose:   Compare two arrays
Input:     References to Array 1-2
Output:    1|0 - (equal| different)

=head2 CompleteStartBTS

 CompleteStartBTS();

Subroutine: CompleteStartBTS
Purpose:    Do a complete start of BTS
Input:      None
Output:     None


=head2 CompleteStartTG

 CompleteStartTG();

Subroutine: CompleteStartTG
Purpose:
Input:
Output:


=head2 ConfigMCTR

 ConfigMCTR();

--FUNCTION : ConfigMCTR
COMMENT  : Sends MCTRConfigRequest
IN       :
OUT      : None
--

=head2 ConfigReadMO

 ConfigReadMO();

--FUNCTION : ConfigReadMO
COMMENT  : Get current parameters for wanted MO
Syntax   : ConfigReadMO(MO => $MO);
IN       : MO type
OUT      : %Resp
--

=head2 ConfigureBCCHTSandTX

 ConfigureBCCHTSandTX();

Subroutine: ConfigureBCCHTSandTX
Purpose:
Input:
Output:


=head2 ConnectAllMCTRs

 ConnectAllMCTRs();

Subroutine: ConnectAllMCTRs
Purpose:
Input:      Octet1L,Octet2L,MaxAllowedNrOfTRXC,MaxAllowedPwrExt,OrigMaxAllowedPwr,
            FeatureStatusBitMap,OrigMaxAllowedNrOfTRXC
Output:


=head2 ConnectMO

 ConnectMO();

--FUNCTION : ConnectMO
COMMENT  : Sends ConnectCommand to MO defined by MOClass, InstanceNo
           and AssosiatedSOInstance and checks ConnectComplete.
IN           : Optionally one or more of the following
           keys: TRXC, MO, MOState, INST, ASOInst
OUT           : None
--

=head2 ConnectResetStartConfigEnableOpinfo

 ConnectResetStartConfigEnableOpinfo();

--FUNCTION : ConnectResetStartConfigEnableOpinfo
COMMENT  : ConnectResetStartConfigEnableOpinfo
IN           : Optionally one or more of the following
           keys: TRXList, MO
OUT           : None
--

=head2 CreateResultFile

 CreateResultFile();

Subroutine: CreateResultFile
Purpose:    To save capabilities in a file.
            Loop through @CapabilitiesSummary and save to a file
Input:      @CapabilitiesSummary
Output:     OUTFILE


=head2 DeactivateGslData

 DeactivateGslData();

Subroutine: DeactivateGslData
Purpose:    Deactivate Gsl Data
Input:
Output:


=head2 DeactivateSpeech

 DeactivateSpeech();

Subroutine: DectivateSpeech
Purpose:    Deactivate speech
Input:
Output:


=head2 DecodeMCTRRecord

 DecodeMCTRRecord();

Subroutine:   DecodeMCTRRecord
Purpose:
Input:  %RefMCTRCaps
Output:


=head2 DisableMO

 DisableMO();

--FUNCTION : DisableMO
COMMENT  : Sends DisableRequest to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks DisableResult.
IN           : Optionally a reference to a Hash
           containing one or more of the following
           keys: TRXC, MO, MOState, ASOInst, ReasonCode, ResultCode
           ASOInst, INST
Out           : None
--

=head2 DoTSConfigRequest

 DoTSConfigRequest();

Subroutine: DoTSConfigRequest
Purpose:    Do a TSConfigRequest to set TLS settings, Receiver Diversity etc
            Note: Only Comb TCH implemented
            Changing TLS filtering time does not work
Input:


Output:


=head2 EnableMO

 EnableMO();

--FUNCTION : EnableMO
COMMENT  : Sends EnableRequest to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks EnableResult.
IN             : Optionally a reference to a Hash containing
           one or more of the following
           keys: TRXC, MO, MOState, ASOInst
OUT             : None
--

=head2 EstablishResetStart

 EstablishResetStart();

-Subroutine: EstablishResetStart
Purpose   : Establish, Reset and Start CF/TRXCs in list
IN        : TRXList (if SO is TRXC
OUT       : None
-

=head2 EstablishResetStartAllCFs

 EstablishResetStartAllCFs();

Subroutine: EstablishResetStartAllCFs
Purpose:
Input:
Output:


=head2 FetchMCTRInstancesUnderTest

 FetchMCTRInstancesUnderTest();

Subroutine: FetchMCTRInstancesUnderTest
Purpose:
Input:
Output:


=head2 FormatTestcaseName

 FormatTestcaseName();

Subroutine: FormatTestcaseName
Purpose:    Reformats the PAR hash test case name for printout purposes.
            If the input string is not on the format "XX_YY", it is returned unchanged.
Input:      TestcaseName => "xx_yy"
Output:     "xx.yy"


=head2 GetAndCheckMCTRStatistics

 GetAndCheckMCTRStatistics();

Subroutine: GetAndCheckMCTRStatistics
Purpose:
Input:
Output:


=head2 GetDateTimeForFileName

 GetDateTimeForFileName();

Subroutine: GetDateTimeForFileName
Purpose:    Formats date and time
Input:                  None
Output:     Formatted string with date and time YYYYMMDD_HHMMSS


=head2 GetLast

 GetLast();

--FUNCTION : GetLast
COMMENT: Returns last value of a list
         (incl. removal of last character !)
IN         : @List - as variable name says
Out         : $_ - scalar containing last value of @List
--

=head2 GetMCTRRecords

 GetMCTRRecords();

--FUNCTION : GetMCTRRecords
COMMENT  : Returns MCTRRecords from Capabilities in CF
IN         -
OUT      : @MCTRRecords
--

=head2 HardwareReset

 HardwareReset();

Subroutine: HardwareReset
Purpose:
Input:
Output:


=head2 ModifySpeech

 ModifySpeech();

Subroutine:  ModifySpeech
Purpose:     The ModifySpeech command toggles speech generation on/off
Input:		$TG, $TRXC, $TS, $TCHSubCH, $SDCCHSubCH
Output:


=head2 PowerBackOffControl

 PowerBackOffControl();

--FUNCTION : PowerBackOffControl
COMMENT  : Sends PowerBackOffControl
IN       : Optionally one or more of the following
           keys: TRXC, MO, MOState, INST, ASOInst
OUT      : None
--

=head2 PrepareConfigureTX

 PrepareConfigureTX();

Subroutine: PrepareConfigureTX
Purpose:
Input:
Output:


=head2 PrepareMCTRConfigurations

 PrepareMCTRConfigurations();

Subroutine: PrepareMCTRConfigurations
Purpose:
Input:      Octet1L,Octet2L,MaxAllowedNrOfTRXC,MaxAllowedPwrExt,OrigMaxAllowedPwr,
            FeatureStatusBitMap,OrigMaxAllowedNrOfTRXC
Output:


=head2 RFChReleaseOnAllChannels

 RFChReleaseOnAllChannels();

=head2 RadioChRel

 RadioChRel();

Subroutine: RadioChRel
Purpose:    Release all channels
Input:
Output:


=head2 ReceiveAbiscoMessage

 ReceiveAbiscoMessage();

Subroutine: ReceiveAbiscoMessage
Purpose:    Receiving Abisco messages
Input:      Expect (message wanted)
            Server (server for expected message)
            CauseValue (Only applicable for ConnectionFailureIndication)
            Fault (Only applicable for FaultReport)
            ChType (Bm/Bm_1)
            Timeout [s]
Output:     'Found'         - if expected message found
            [Error Cause]   - if message not found


=head2 ReleaseAllChannels

 ReleaseAllChannels();

Subroutine: ReleaseAllChannels
Purpose:
Input:
Output:


=head2 ReleaseChannel

 ReleaseChannel();

=head2 ResetMO

 ResetMO();

--FUNCTION : ResetMO
COMMENT  : Sends ResetCommand to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks ResetComplete.
IN           : Optionally one or more of the following
           keys: TRXC, MO, MOState, INST, ASOInst, BACKCOMP
OUT           : None
--

=head2 RevertCCCHTS

 RevertCCCHTS(fault);

Subroutine: RevertCCCHTS
Purpose:
Input:
Output:


=head2 SaveInResultFile

 SaveInResultFile();

Subroutine: SaveInResultFile
Purpose:    To save capabilities in a file.
            Loop through @CapabilitiesSummary and save to a file
Input:      @CapabilitiesSummary
Output:     OUTFILE


=head2 SaveMCTRConfigurations

 SaveMCTRConfigurations();

Subroutine: SaveMCTRConfigurations
Purpose:
Input:
Output:


=head2 SendStatusRequest

 SendStatusRequest();

FUNCTION : SendStatusRequest
COMMENT  : Sends the message on ABIS.

EXAMPLE  : SendStatusRequest(_MO => 'CF');
           SendStatusRequest(_MO => 'TRXC', _TRXC => 5);


IN       : $TRXC ->
           $MO   ->
           $Inst ->
OUT      : Updates $TG->{LinkStatusError}


=head2 SetCell

 SetCell();

--FUNCTION : SetCell
COMMENT  : Update Cell with new elements
Syntax   : SetCell(CellNr => $CellNr, TGId => $TGId, ExtendedRange => $ExtendedRange,
                   ReceiverDiversity => $ReceiverDiversity );
IN       :
OUT      :
--

=head2 SetMCTRReporting

 SetMCTRReporting();

Subroutine: SetMCTRReporting
Purpose:    Enabled or Disabled MCTR Reporting
Input: On || Off
Output:


=head2 SetTG

 SetTG();

Subroutine: SetTG
Purpose:    To set TCM configuration. Disconnects, updates and reconnects TG.
            May Restart BTS if AbisMode or TLS settings is changed
Input:      %TG
Output:     None


=head2 SetupPDCHandSDCCHTraffic

 SetupPDCHandSDCCHTraffic();

Subroutine: SetupPDCHandSDCCHTraffic
Purpose:
Input:
Output:


=head2 SetupTCHTraffic

 SetupTCHTraffic();

Subroutine: SetupTCHTraffic
Purpose:
Input:
Output:


=head2 SplitString

 SplitString();

--FUNCTION : SplitString
COMMENT  : Returns a list with splitted string (Delimiter: Whitespace)
IN           : $String - as variable name says
Out           : @String - list with splitted string
--

=head2 StartGslLink

 StartGslLink();

Subroutine: StartGslLink
Purpose:    Start Gsl Link
Input:
Output:


=head2 StartMO

 StartMO();

--FUNCTION : StartMO
COMMENT  : Sends StartRequest to MO defined by MOClass,
           AssosiatedSOInstance, InstanceNo and checks StartResult.
IN           : Optionally one or more of the following
           keys: TRXC, MO, INST, ASOInst
OUT           :
--

=head2 StopGslLink

 StopGslLink();

Subroutine: StopGslLink
Purpose:    Stop Gsl Link
Input:
Output:


=head2 UpdateAllTGs

 UpdateAllTGs();

Subroutine: UpdateAllTGs
Purpose:
Input:
Output:


=head2 rev_by_date

 rev_by_date();

--FUNCTION : rev_by_date
COMMENT  : Sort list of files by created date (the last first)
IN           :
OUT          :
--


=cut

=head1 NAME

subs_smsp2p


=head1 DESCRIPTION

Document number : 80/190 55-CAH 161 1607/1 Uen
MODULE          : subs_smsp2p.pm
DESCRIPTION     : This package contains the subfunctions and variables used
                  with the main test case

COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE        NAME            REVIEW      COMMENT
PA1   20091120    Syntronic AB,   UABJAES     Document created
                  Björn Eriksson

A     20100308    Syntronic AB/   UABJANES    Document created.
                  Björn Ericsson              Approved UABTOH.
B     20101027    Syntronic AB    XWIKMAR     Updated log functionality => Removed functions and use
                  David Melin                 of (local) HandleLogg, HandleError, Dbreport, DbCheckTable,
                                              PrintDebug, InitResult, GetResult
                                              Approved UABTOH.


=head1 REQUIRES

L<English> 

L<Hash::Util> 

L<Carp> 

L<dbLog> 

L<mssim_sub> 

L<mssim> 

L<mssim_def> 

L<PerlFunc> 

L<AbiscoFunc2> 

L<Abisco_Connection> 

L<subinit_smsp2p> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 ChActBTS

 ChActBTS();

SUBROUTINE  : ChActBTS
DESCRIPTION : To activate a channel in the BTS, uses par hash variables

IN  : BTS                => $BTS,
      ChRate             => $ChRate,
      TRXC               => $TRXC,
      TS                 => $TS,
      ChType             => $ChType,
      ActType            => $ActType,
      TypeOfCh           => $TypeOfCh,
      AlgOrRate          => $AlgOrRate,
      ChAct              => $ChAct,
      Optional           => undef,
OUT : None


=head2 ChActMSSIM

 ChActMSSIM();

IN  :     AMRCodec    => $AMRCodec,
          ChRate      => undef,
          TG          => $TG,
          TRXC        => $TRXC,
          TS          => $TS,
          ChType      => undef,
          TypeOfCh    => undef,
          AlgOrRate   => undef,
          Bypass      => 0,
          Cell        => $Cell,
          Ref         => 0,
          AllSacchSI  => 0,
          MsId        => $MsId,
          Timeout     => $Timeout,
          PDCHMode    => '',
          TSC         => -1,
          RxAcchOn    => 1,
          RToutOff    => 0,
          RxTrfcOn    => 0,
          UndecFrm    => 0,
          TrxNum      => 0,
          Data        => \@gMeas,
          L2hdr       => 2,
OUT :     $CcId


=head2 ChRelBTS

 ChRelBTS();

SUBROUTINE  : ChRelBTS
DESCRIPTION : To release radio traffic channels or control channels in the BTS

IN  : BTS           => $BTS,
      TG            => $TG,
      TRXC          => $TRXC,
      TS            => $TS,
      ChType        => undef,
      SupressError  => 0,
OUT : None


=head2 ChRelMSSIM

 ChRelMSSIM();

IN  : CcId         - CcId of channel to close

OUT : None


=head2 CheckCellSettings

 CheckCellSettings();

SUBROUTINE  : CheckCellSettings
DESCRIPTION : If the 'Expected' input hash doesnt match the current cell settings
              from InfoCell then update cell with 'Expected's keys and restart BTS.
              The 'Expected' input hash is merged with a default settings hash if
              'UseDefaults' is set to 1. The default settings hash has
              the settings a cell has when New TG is used in Abisco.
              NOTE: the cell must be configured once before this function is used
              since it doesnt update HW specific settings in UpdateCell (such as
              ARFCN number).


IN  : BTS         => $BTS,
      TG          => $TG,
      Cell        => 0,
      UseDefaults => 0
      Expected => {
         BCCHType        => $BCCHType,
         SDCCHList       => [$TRXC, $TS],
         BS_AG_BLKS_RES  => $BSAG,
         CBCHIndicator   => $CBCH_Ind,
            ..(above are just examples, all parameters in iwd updatecell valid)},
OUT : None


=head2 CompareArrays

 CompareArrays();

IN  : $lArray1    ONE dimensional array
      $lArray2    ONE dimensional array
      Debug       Enables debug trace 1 = On, 0 = Off

OUT : 0 - tables DOES NOT match
      1 - tables match
==

=head2 CompareHash

 CompareHash();

SUBROUTINE  : CompareHash
DESCRIPTION : Compares two hashes by using recursion

IN  : Expected    Expected hash table
      Received    Hash table to compare Expected to
      Debug       Set to 1 to get debug printouts

OUT : 0 - tables DOESNT match
      1 - tables match


=head2 EstReqBTS

 EstReqBTS();

SUBROUTINE  : EstReqBTS
DESCRIPTION : To send Establish Request from BTS and receive
            the expected response from BTS on a SAPI channel

IN  : BTS       => $BTS,
      Expected  => 'EstablishConfirm',
      TG        => $TG,
      TRXC      => $TRXC,
      SAPI      => 0,
      TS        => $TS,
      ChType    => undef,
      NABit     => 0,
      Chan      => $Chan,
OUT : None


=head2 EstablishReqMSSIM

 EstablishReqMSSIM();

SUBROUTINE  : EstablishReqMSSIM
DESCRIPTION : To send Establish Request to MSSIM and receive EstablishIndication from Abisco

IN  : BTS     => $BTS,
      SAPI    => 0,
      Chan    => $Chan,
      L3Data  => undef,
      Timeout => $Timeout,
      Mode    => 'EST_NORM',
      MsId    => $MsId,
      EaId    => 0,
OUT : None


=head2 ReceiveAbiscoMsg

 ReceiveAbiscoMsg();

SUBROUTINE  : ReceiveAbiscoMsg
DESCRIPTION : Receive msgs on Abisco until one is found that matches the
              in Expected hash or timeout occurs

IN  : BTS           - Abisco connection parameter
      Timeout       - 0.., time to look for msg in seconds
      SupressError  - 1/0, supress croak On/Off
      ErrorMsg      - if this string is defined it will be printed if an
                      error occurs
      Expected      - Hash containing keys to look for in received msg

OUT : 0 - Message matching Expected's keys NOT found
      1 - Message matching Expected's keys found


=head2 ReceiveMSSimMsg

 ReceiveMSSimMsg();

SUBROUTINE  : ReceiveMSSimMsg
DESCRIPTION : Receive msgs on the MSSim until one is found that matches the
              in Expected hash or timeout occurs


IN  : Timeout       - 0.., time to look for msg in seconds
      SupressError  - 1/0, supress croak On/Off
      ErrorMsg      - if this string is defined it will be printed if an
                      error occurs
      Expected      - Hash containing keys to look for in received msg

OUT : 0 - Message matching Expected's keys NOT found
      1 - Message matching Expected's keys found


=head2 RelReqBTS

 RelReqBTS();

SUBROUTINE  : RelReqBTS
DESCRIPTION : To send a ReleaseRequest from Abisco (SAPI3)
              and receive a ReleaseConfirm from BTS

IN  : BTS     => $BTS,
      SAPI    => 0,
      Mode    => 'Normal',
      LinkId  => 'FACCH/SDCCH',
      TG      => $TG,
      TRXC    => $TRXC,
      TS      => $TS,
      ChType  => undef,
      NABit   => 0 ,
      SupressError - 1/0 continue even if error is received On/Off
      Timeout => $Timeout
OUT : None


=head2 RelReqMSSim

 RelReqMSSim();

SUBROUTINE  : RelReqMSSIM
DESCRIPTION : To send Release Request to MSSIM and receive Release Comfirmation
              from Abisco. This is used to release a SAPI link.

IN  : BTS     => $BTS,
      SAPI    => 0,
      Chan    => $Chan,
      SupressError - 1/0 continue even if error is received On/Off
      L3Data  => undef,
      Timeout => 3,
      Mode    => 'EST_NORM', # Contention Resolution / Default Mode = Normal
      MsId    => $MsId,
      EaId    => 0,
OUT : None


=head2 RestartBTS

 RestartBTS();

SUBROUTINE  : RestartBTS
DESCRIPTION : Restarting the BTS, make sure that the parameters set during restart
            complies with your specific TC

IN  : BTS           => $BTS,
      TGId          => $TG,
      TRXList       => $TRXList,
      SiList        => [ 'SI1', 'SI2', 'SI3', 'SI4', 'SI5', 'SI6', 'MI' ],
      Responses     => 'Int',
      StartingMode  => 'TDM',
Output:


=head2 SendMultiPurposeReqBTS

 SendMultiPurposeReqBTS();

SUBROUTINE  : SendMultiPurposeReqBTS
DESCRIPTION : To send a downlink message.

IN  :     BTS           => $BTS,
          SAPI          => 3,
          TG            => $TG,
          TRXC          => $TRXC,
          TS            => undef,
          ChType        => $ChType,
          NABit         => 0,
          Chan          => $Chan,
          L3DataRef     => undef,
OUT : None


=head2 SendSMSBTS

 SendSMSBTS();

SUBROUTINE  : SendSMSBTS
DESCRIPTION : Send SMS over SAPI 3 from Network side and check that SMS is received
              on the MS side

IN  : BTS         - BTS reference
      TG          - TG Number
      TRXC        - TRXC Number
      TS          - Timeslot Number
      ChType      - Channel Type
      NABit       - NABit 0/1
      SMS_CPDATA  - Reference to array containing SMS CP-DATA
      Chan        - Used to determine Link Id, SDCCH FACCH or SACCH
      Timeout     - Timeout,
      SAPI        - 3,
      MsId        - MsId,
      ChanSapi3   - ChanSapi3,
OUT : None


=head2 SendSMSMSSim

 SendSMSMSSim();

SUBROUTINE  : SendSMSMSSim
DESCRIPTION : Send SMS over SAPI 3 from MSSIM and check that SMS is received
            on abisco

IN  : BTS         => $BTS,
      Chan        => $Chan
      SMS_CPDATA  => \@CP_DATA_SAPI3,
      Timeout     => $Timeout,
      MsId        => $MsId,
      Sapi        => 3,
      ChType      => ChType,
      TS          => TS,
      ChanSapi3   => ChanSapi3,
OUT : None



=cut

=head1 NAME

Subs_Speech


=head1 DESCRIPTION


      Copyright (C) 2006 by 
      ERICSSON AB 
      S-164 80 STOCKHOLM 
      Phone +46 8 719 0000     
      Company Registration number: 556056-6258 
      The program may be used and/or copied only with the written 
      permission from Ericsson AB, or in accordance with 
      the terms and conditions stipulated in the agreement/contract 
      under which the program has been supplied. 
      All rights reserved

			Module: 
		  subs_speech.pm

      Author: 
       Stefan Mohlin

      Description: 
		Sub-routines for speech.abi.
       
      File Revision: 
	P1A 090827 ERATZIS Created based on speech.pl
	P1B 100611 ESTEMOH Special TimeToRun for GUI
	P1C 100909 ESTEMOH Updated for VAMOS
	P1C 100929 ESTEMOH Updated for VAMOS again




=head1 REQUIRES

L<Tk::Table> 

L<Tk::HList> 

L<Tk::LabFrame> 

L<Tk> 

L<speechfunc(SendSpeech)> 

L<Exporter> 


=head1 METHODS

=head2 ButtonNext

 ButtonNext();

Subroutine: ButtonNext
Purpose:    To dispaly "nexT" statistics
Input:	  	"Previous" button
            "Next" button
Output:     None


=head2 ButtonPrev

 ButtonPrev();

Subroutine: ButtonPrev
Purpose:    To dispaly "Previous" statistics
Input:	  	"Previous" button
            "Next" button
Output:     None


=head2 ChangePatternFile

 ChangePatternFile();

Subroutine: ChangePatternFile
Purpose:    To change path and filename for pattern file
            Update codec settings for AMR
Input:	  	Index to actual speech type
Output:     None


=head2 ChangeStateAMRFR_NB

 ChangeStateAMRFR_NB();

Subroutine: ChangeStateAMRFR_NB
Purpose:    To change state (normal/disable)for codec check buttons AMR FR NB
Input:	  	Widget
Output:     None


=head2 ChangeStateAMRFR_WB

 ChangeStateAMRFR_WB();

Subroutine: ChangeStateAMRFR_WB
Purpose:    To change state for codec check buttons AMR FR WB
Input:	  	Widget
Output:     None


=head2 ChangeStateAMRHR

 ChangeStateAMRHR();

Subroutine: ChangeStateAMRHR
Purpose:    To change state for codec check buttons AMR HR
            To change state for for the sub channel entry
Input:	  	Sub Channel widget
            AMR HR Codec widget
Output:     None


=head2 ChangeStateHR

 ChangeStateHR();

Subroutine: ChangeStateHR
Purpose:    To change state for for the sub channel entry when halfrate is selected.
Input:	  	Widget
Output:     None


=head2 ChangeStateVAMOS

 ChangeStateVAMOS();

Subroutine: ChangeStatVAMOS
Purpose:    To change state (normal/disable) of the VAMOS parameter fields
Input:	  	Widget
Output:     None


=head2 ClearStatistics

 ClearStatistics();

Subroutine: ClearStatistics
Purpose:    To clear statistics. This routine is called when the "Clear statistics"
            butten is slected.
Input:	  	Previous button
            Next button
Output:     None


=head2 CreateGUI

 CreateGUI();

Subroutine: CreateGUI
Purpose:    To create the GUI for Speech

Input:	  	None
Output:     None


=head2 CreateParamHash

 CreateParamHash();

Subroutine: CreateParamHash
Purpose:    To create parameter hash to be sent to subroutine SendSpeech
            in module speechfunc.pm.
            See speechfunc.pm for parameter layout
Input:	  	Speech Type
Output:     Parameter hash


=head2 DisplayStatistics

 DisplayStatistics();

Subroutine: DisplayStatistics
Purpose:    To dispaly statistics on the GUI
Input:	  	Result number
Output:     None


=head2 GetAMRParam

 GetAMRParam();

Subroutine: GetAMRParam
Purpose:    To prepare AMR parameters for BTS Channel Activation
Input:	  	Action number
	  	  		Param Hash
Output 	  	Param hash updated with AMR parameters


=head2 GetCodec

 GetCodec();

Subroutine: GetCodec
Purpose:    Get get select codecs for AMRFR, AMRWB OR AMRHR
Input:	  	Speech Type
Output:     Global hash %SpeechHash updated with updated with codec bitmap


=head2 GetStatistics

 GetStatistics();

Subroutine: GetStatistics
Purpose:    To get statitics from the received results and save it
            in an internal result hash
Input:	  	Result Text
            Result hash (received from speechfunc.pm)
Output:     Global %ResultHash updated


=head2 PopUp

 PopUp();

Subroutine: PopUp
Purpose:    To present a pop-up window with OK and Cancel buttons
Input:	  	Text to display
            Button (OK or OKCancel)
Output:     Pressed button (OK or Cancel)


=head2 ReadPatternConfigFile

 ReadPatternConfigFile();

Subroutine: ReadPatternConfigFile
Purpose:    To read the configuration file for pattern files
Input:	  	None
Output:     None


=head2 ReadPatternFile

 ReadPatternFile();

Subroutine: ReadPatternFile
Purpose:    To update the codec settings based on the pattern file
Input:	  	Index to actual speech type
            AMR Type
            Reference to Codec array
Output:     None


=head2 SaveStatistics

 SaveStatistics();

Subroutine: SaveStatistics
Purpose:    To save statistics. This routine is called when the "Save statistics"
            butten is slected.
            Loop through %ResultHash and call SaveStatisticsToFile to save on file
Input:	  	None
Output:     None


=head2 SaveStatisticsLog

 SaveStatisticsLog();

Subroutine: SaveStatistics
Purpose:    To save statistics. This routine is called when no GUI is used

            Loop through %ResultHash and call "SaveStatisticsToFileNoGUI"
Input:	  	None
Output:     None


=head2 SaveStatisticsToFile

 SaveStatisticsToFile();

Subroutine: SaveStatisticsToFile
Purpose:    To save statistics to file
Input:	  	Result number
Output:     None


=head2 StartTest

 StartTest();

Subroutine: StartTest
Purpose:    This routine is called when the "Start Test"  button is 	selected.
            It creates a parameter hash and calls subroutine SendSpeech
            in speechfunc.pm to generate the speech frames. Finally it
            presents the result
Input:	  	"Previous" button
		  			"Next" button
Output:     None


=head2 StartTestNoGUI

 StartTestNoGUI();

Subroutine: StartTest
Purpose:    This routine is called when no GUI is used.
            It creates a parameter hash and calls subroutine SendSpeech
            in speechfunc.pm to generate the speech frames. Finally it
            presents the result
Input:	  None

Output:     None



=cut

=head1 NAME

subs_startrestart


=head1 DESCRIPTION

Document number: 205/190 55-CAH 161 1607/1
MODULE:          subs_startrestart
DESCRIPTION:     Contains subroutins for Scenario StartRestart.

COPYRIGHT © : ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV DATE      NAME      REVIEW    COMMENT
PA1 20060508  ERABAHG   XTOBSEM   Work started
PA2 20110307  XTOBSEM   XMABENT   Added sub: ConnectResetStartConfig, SetNumberOfTRX
PA3 20120912  ETORWIL   EDAMELI   General Cleanup and quality improvement
                                   Removed SetNumberOfTRX
PA4 20120924  XHENRMA   XNAVNAS   Added sub: TRXCConnectResetStartConfig and
                                    modified ConnectResetStartConfig


=head1 REQUIRES

L<Hash::Util> 

L<dbLog> 

L<SubInit_startrestart> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 ConnectResetStartConfig

 ConnectResetStartConfig();

Subroutine: ConnectResetStartConfig

Input:      MO, InstanceNumber, TRXC

Added:      20110201  Syntronic AB,
                      Tobias Semberg


=head2 TRXCConnectResetStartConfig

 TRXCConnectResetStartConfig();

Subroutine: TRXCConnectResetStartConfig

Input:      MO, InstanceNumber, TRXC

Added:      20120921  Syntronic AB,
                      Henrik Mårtensson



=cut

=head1 NAME

Subs_TimeReq


=head1 DESCRIPTION

Document number : 231/190 55-CAH 161 1607/1
MODULE          : Subs_TimeReq
DESCRIPTION     : Contains subroutines that will be used in calendarTimeRequest tests

COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE      NAME            REVIEW      COMMENT
PA1   20120820  XYNSTAN         XDANHEN     File created
PA2   20121116  XANSBEM         XMAREDV     Added subroutine ButtonLocal, minor changes


=head1 REQUIRES

L<Hash::Util> 

L<English> 

L<Storable> 

L<dbLog> 

L<SubInit_TimeReq> 

L<diagnostics> Produce verbose warning diagnostics


=head1 METHODS

=head2 AbisLoggingBTS

 AbisLoggingBTS();

Subroutine: AbisLoggingBTS
Purpose:    Turn Abis logging off or on
Input:      State => 'OFF',
            TG    =>  $TG,
            BTS    =>  $BTS,
Output:


=head2 ButtonLocal

 ButtonLocal();

SUBROUTINE  : ButtonLocal
DESCRIPTION : Syntax: Send ButtonLocal Command via DVT

IN  : Unit
OUT :


=head2 GetCalendarTimeRequest

 GetCalendarTimeRequest();

SUBROUTINE  : GetCalendarTimeRequest
DESCRIPTION : Finds GetCalendarTimeRequest on Abis and returns the timestamp
               recieved message.

IN  : BTSConn
      Timeout
OUT : $MsgTimeStamp


=head2 GetCalendarTimeResponseTime

 GetCalendarTimeResponseTime();

SUBROUTINE  : GetCalendarTimeResponseTime
DESCRIPTION : Finds CalendarTimeResponse and returns the time difference
               from where the CF link has been established

IN  : BTSConn
      Timeout
OUT : $TimeDifference



=cut

=head1 NAME

subs_vgcs


=head1 DESCRIPTION

Document number: 29/190 55-CAH 161 1607/1 Uen
MODULE      :    subs_vgcs.pm
DESCRIPTION :    This program specifies subroutines for VGCS tests
                 in accordance with 335/102 64-HRB 105 15

COPYRIGHT ©: ERICSSON AB, S-164 80 STOCKHOLM
Company Registration number: 556056-6258
The program may be used and/or copied only with the written
permission from Ericsson AB, or in accordance with
the terms and conditions stipulated in the agreement/contract
under which the program has been supplied.
All rights reserved.

REV   DATE       NAME             REVIEW      COMMENT
PA1   20091029   Syntronic AB/    ERAKOSI
                 Erik Jonsson
PA2   20110103   Syntronic AB/    XDAVMEL     Added sub Restart & UpdateCell
                 Tobias Semberg
PA3   20110425   XAMMELY          EERICSV     Perlcritic, removed unused functions,
                                              Dynamic TG, BTS Utilities.


=head1 REQUIRES

L<Carp> 

L<Hash::Util> 

L<English> 

L<lib> 

L<DBI> 

L<mssim_def> 

L<dbLog> 

L<PerlFunc> 

L<mssim_sub> 

L<mssim> 

L<Abisco_Connection> 

L<subInit_vgcs> 

L<diagnostics> 


=head1 METHODS

=head2 ChActBTS

 ChActBTS();

SUBROUTINE  : ChActBTS
DESCRIPTION : To activate a VGCS channel in the BTS

IN  : TRXC
      VGCSREL
      AlgOrRate
      ChAct
      ChRate
      ChType
      TypeOfCh
      TS
      T3115
      Ny2
OUT : None


=head2 ChActMSSIM

 ChActMSSIM();

SUBROUTINE  : ChActMSSIM
DESCRIPTION : To activate a channel in the MSSIM

IN  : Bypass  (set to '1' to bypass MSSIM automatic LAPDm handling)
      AMRCodec
      AlgOrRate
      ChAct
      ChRate
      ChType
      TypeOfCh
      TS
OUT : $CcId


=head2 ChActNormalAssignBTSTalker

 ChActNormalAssignBTSTalker();

SUBROUTINE  : ChActNormalAssignBTSTalker
DESCRIPTION : To activate the talker channel in the BTS for a VGCS call with Normal Assignment

IN  : TRXC - TRXC on which talker channel is activated
      AlgOrRate
      ChRate
      ChType
      TypeOfCh
      TS
OUT : None


=head2 ChActTalkerMSSIM

 ChActTalkerMSSIM();

SUBROUTINE  : ChActMSSIM
DESCRIPTION : To activate a talker channel in the MSSIM

IN  : TRXC
      Bypass  (set to '1' to bypass MSSIM automatic LAPDm handling)
      AlgOrRate
      ChRate
      ChType
      TypeOfCh
      TS
      AMRCodec
OUT : $CcId


=head2 ChRelBTS

 ChRelBTS();

SUBROUTINE  : ChRelBTS
DESCRIPTION : To release a channel in the BTS

IN  : ChType
      TS
OUT : None


=head2 ChRelBTSTalker

 ChRelBTSTalker();

SUBROUTINE  : ChRelBTSTalker
DESCRIPTION : To release a talker channel in the BTS

IN  :  TRXC
       TS
       ChType
OUT :  None


=head2 ChRelMSSIM

 ChRelMSSIM();

SUBROUTINE  : ChRelMSSIM
DESCRIPTION : To release a channel in the MSSIM

IN  : None
OUT : None


=head2 CheckL3Data

 CheckL3Data();

SUBROUTINE  :  CheckL3Data
DESCRIPTION : To compare received L3Data to expected L3Data

IN  :  Expected L3Data
       Received L3Data
OUT :  Returns 1 if data differs, else 0


=head2 DoNotReceiveVGCSUplinkGrant

 DoNotReceiveVGCSUplinkGrant();

SUBROUTINE: DoNotReceiveVGCSUplinkGrant
DESCRIPTION : To be sure that no more lapdmDL_UNITDATA_IND with VGCS_UPLINK_GRANT messages are received in the MSSIM

IN  :  None
OUT :  Return 0 if no message have been received, otherwise 1


=head2 EstablishReqMSSIM

 EstablishReqMSSIM();

SUBROUTINE  : EstablishReqMSSIM
DESCRIPTION : To send Establish Request to MSSIM and receive EstablishIndication from Abisco

IN  :  $Sapi, $Chan, @L3Data
OUT :  None


=head2 ReceiveAbisco

 ReceiveAbisco();

SUBROUTINE  : ReceiveAbisco
DESCRIPTION : To receive a spontanious message from Abisco

IN  :  Timeout value
       Expected message
       Supress, "SupressError" if HandleError should not be called
       L3Data of expected message
OUT :  CauseValue


=head2 ReceiveAbiscoData

 ReceiveAbiscoData();

SUBROUTINE  : ReceiveAbiscoData
DESCRIPTION : To receive a spontanious message from Abisco

IN  :  Timeout value
       Expected message
       Supress, "SupressError" if HandleError should not be called
       L3Data of expected message
OUT :  Data


=head2 ReceiveMSSIM

 ReceiveMSSIM();

SUBROUTINE  : ReceiveMSSIM
DESCRIPTION : To receive a spontanious message from MSSIM

IN  :  Timeout value
       Expected Message
       L3Data of expected message
OUT :  None


=head2 ReceiveVGCSUplinkGrant

 ReceiveVGCSUplinkGrant();

SUBROUTINE: ReceiveVGCSUplinkGrant
DESCRIPTION : To receive a lapdmDL_UNITDATA_IND with VGCS_UPLINK_GRANT message in the MSSIM

IN  :  $AccessDelay   Access delay value received in Abisco to be compared to the TA value of the VGCS_UPLINK_GRANT message
OUT :  Return 1 if succeeded, otherwise 0


=head2 RelReqMSSIM

 RelReqMSSIM();

SUBROUTINE  : RelReqMSSIM
DESCRIPTION : To send Release Request to MSSIM and receive ReleaseIndication from Abisco

IN  :  $BTS  AbiscoConnection object
       $Sapi  SAPI 0 or 3
       $Chan  Channel
       $Mode Release mode
OUT :  None


=head2 Restart

 Restart();

SUBROUTINE  : Restart
DESCRIPTION : Restarting the BTS, make sure that the parameters set during restart
              complies with your specific TC

IN  :  BTS (Abisco connection parameter)
       TGId
       TRXList (array)
       TypeOfStart
OUT :


=head2 SendAssignmentCommandAbisco

 SendAssignmentCommandAbisco();

SUBROUTINE  : SendAssignmentCommandAbisco
DESCRIPTION : To send DATA_REQUEST Assignment Command from Abisco

IN  :  ChType
       TS
OUT :  None


=head2 SendDataMSSIM

 SendDataMSSIM();

SUBROUTINE  : SendData MSSIM
DESCRIPTION : To send Data Indication to MSSIM and receive DataInd from Abisco.

IN  :   Sapi, Chan, Data
OUT :   None


=head2 SendReleaseReqTalker

 SendReleaseReqTalker();

SUBROUTINE  : SendReleaseReq
DESCRIPTION : To send a ReleaseRequest from Abisco regarding a Talker channel
              and receive a ReleaseConfirm from BTS

IN  :  TRXC
       TS
       ChType
OUT :  None


=head2 SendUnitDataReqUplinkBusy

 SendUnitDataReqUplinkBusy();

SUBROUTINE  : SendUnitDataReqUplinkBusy
DESCRIPTION : To send UNIT_DATA_REQUEST with Uplink Busy message from Abisco

IN  :  ChType
       TS
OUT :  None


=head2 SendUnitDataReqUplinkFree

 SendUnitDataReqUplinkFree();

SUBROUTINE  : SendUnitDataReqAbisco
DESCRIPTION : To send UNIT_DATA_REQUEST with Uplink Free message from Abisco

IN  :  ChType
       TS
OUT :  None


=head2 SendUplinkAccess

 SendUplinkAccess();

SUBROUTINE  : SendUplinkAccess
DESCRIPTION : Send UPLINK_ACCESS message from MSSIM

IN  :  Establishment cause (one octet)
OUT :   None


=head2 UpdateCell

 UpdateCell();

SUBROUTINE  : UpdateCell
DESCRIPTION : UpdateCell( TGId => $TG, CellNr => 0, BSAG => $BSAG, BSPA => $BSPA
              BCCHType => 'NCOMB');

IN  : BSAG
      BSPA
      BCCHType
      CCCHList
OUT :



=cut

